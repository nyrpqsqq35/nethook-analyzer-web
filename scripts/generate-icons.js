import path from 'path'
import fs from 'fs'
import prettier from 'prettier'

const IconSets = ['silk', 'fugue']
const SRC_DIR = path.join(import.meta.dirname, '..', 'src')

/**
 * @type {Record<string, [Map<string, string>, Map<string, string>]>}
 */
const cache = {}

function standardizeItemName(iconSet, item) {
  cache[iconSet] = cache[iconSet] || [new Map(), new Map()]
  const [itemToName, nameToItem] = cache[iconSet]

  const name = item.slice(0, -path.extname(item).length)
  let segments = name.split(/[_-]/i).map((i) => {
    return i.charAt(0).toUpperCase() + i.substr(1).toLowerCase()
  })
  let final = segments.join('')

  if (nameToItem.has(final)) {
    if (nameToItem.get(final) != item) {
      final += '2'
    }
  } else {
    itemToName.set(item, final)
    nameToItem.set(final, item)
  }

  return final
}

const getImportPath = (iconSet, item) => `@/assets/icons/${iconSet}/${item}`

function generateImportLine(iconSet, item) {
  const importPath = getImportPath(iconSet, item)
  const name = standardizeItemName(iconSet, item)
  return `import ${name}IconUrl from '${importPath}';`
}

function generateExportLine(iconSet, item) {
  const importPath = getImportPath(iconSet, item)
  const name = standardizeItemName(iconSet, item)

  return `export const ${name}Icon = createIcon(() => import('${importPath}'));`
  return `export const ${name}Icon = createIcon(${name}IconUrl);`
}

for (const iconSet of IconSets) {
  const ICONS_DIR = path.join(SRC_DIR, 'assets', 'icons', iconSet)
  const GENERATED_PATH = path.join(SRC_DIR, 'components', 'Icon', iconSet + '.tsx')

  const items = fs.readdirSync(ICONS_DIR)
  let buf = `// This file was auto-generated by scripts/generate-icons.js at ${new Date().toLocaleString()}\n`
  const exportLines = ['']

  buf += '// DO NOT MODIFY!\n'
  buf += "import createIcon from './Icon'\n"

  for (const item of items) {
    exportLines.push(generateExportLine(iconSet, item))
  }

  buf += exportLines.join('\n')

  const prettierConfig = await prettier.resolveConfig(GENERATED_PATH)
  fs.writeFileSync(GENERATED_PATH, await prettier.format(buf, { ...prettierConfig, parser: 'typescript' }), 'utf8')
}
