// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file steammessages_contentsystem.steamclient.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_steammessages_base } from "./steammessages_base_pb";
import { file_steammessages_unified_base_steamclient } from "./steammessages_unified_base.steamclient_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file steammessages_contentsystem.steamclient.proto.
 */
export const file_steammessages_contentsystem_steamclient: GenFile = /*@__PURE__*/
  fileDesc("Ci1zdGVhbW1lc3NhZ2VzX2NvbnRlbnRzeXN0ZW0uc3RlYW1jbGllbnQucHJvdG8iaQo0Q0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfQ29ubmVjdGVkU3RlYW1QaXBlU2VydmVySW5mbxIMCgR0eXBlGAEgASgJEhEKCXNvdXJjZV9pZBgCIAEoBRIQCghob3N0bmFtZRgDIAEoCSL6AQo2Q0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfR2V0U2VydmVyc0ZvclN0ZWFtUGlwZV9SZXF1ZXN0Eg8KB2NlbGxfaWQYASABKA0SFwoLbWF4X3NlcnZlcnMYAiABKA06AjIwEhMKC2lwX292ZXJyaWRlGAMgASgJEhgKDWxhdW5jaGVyX3R5cGUYBCABKAU6ATASEwoLaXB2Nl9wdWJsaWMYBSABKAkSUgoTY3VycmVudF9jb25uZWN0aW9ucxgGIAMoCzI1LkNDb250ZW50U2VydmVyRGlyZWN0b3J5X0Nvbm5lY3RlZFN0ZWFtUGlwZVNlcnZlckluZm8i+QIKIkNDb250ZW50U2VydmVyRGlyZWN0b3J5X1NlcnZlckluZm8SDAoEdHlwZRgBIAEoCRIRCglzb3VyY2VfaWQYAiABKAUSDwoHY2VsbF9pZBgDIAEoBRIMCgRsb2FkGAQgASgFEhUKDXdlaWdodGVkX2xvYWQYBSABKAISIgoabnVtX2VudHJpZXNfaW5fY2xpZW50X2xpc3QYBiABKAUSGAoQc3RlYW1fY2hpbmFfb25seRgHIAEoCBIMCgRob3N0GAggASgJEg0KBXZob3N0GAkgASgJEhQKDHVzZV9hc19wcm94eRgKIAEoCBIjChtwcm94eV9yZXF1ZXN0X3BhdGhfdGVtcGxhdGUYCyABKAkSFQoNaHR0cHNfc3VwcG9ydBgMIAEoCRIXCg9hbGxvd2VkX2FwcF9pZHMYDSADKA0SFgoOcHJpb3JpdHlfY2xhc3MYDyABKA0SHgoWYnlwYXNzX3Byb3hpZXNfb2ZfdHlwZRgQIAMoCSKCAQo3Q0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfR2V0U2VydmVyc0ZvclN0ZWFtUGlwZV9SZXNwb25zZRI0CgdzZXJ2ZXJzGAEgAygLMiMuQ0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfU2VydmVySW5mbxIRCglub19jaGFuZ2UYAiABKAgiiQEKMUNDb250ZW50U2VydmVyRGlyZWN0b3J5X0dldERlcG90UGF0Y2hJbmZvX1JlcXVlc3QSDQoFYXBwaWQYASABKA0SDwoHZGVwb3RpZBgCIAEoDRIZChFzb3VyY2VfbWFuaWZlc3RpZBgDIAEoBBIZChF0YXJnZXRfbWFuaWZlc3RpZBgEIAEoBCJ7CjJDQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXREZXBvdFBhdGNoSW5mb19SZXNwb25zZRIUCgxpc19hdmFpbGFibGUYASABKAgSEgoKcGF0Y2hfc2l6ZRgCIAEoBBIbChNwYXRjaGVkX2NodW5rc19zaXplGAMgASgEIlAKNENDb250ZW50U2VydmVyRGlyZWN0b3J5X0dldENsaWVudFVwZGF0ZUhvc3RzX1JlcXVlc3QSGAoQY2FjaGVkX3NpZ25hdHVyZRgBIAEoCSJ3CjVDQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXRDbGllbnRVcGRhdGVIb3N0c19SZXNwb25zZRIQCghob3N0c19rdhgBIAEoCRIYChB2YWxpZF91bnRpbF90aW1lGAIgASgEEhIKCmlwX2NvdW50cnkYAyABKAkioQEKNkNDb250ZW50U2VydmVyRGlyZWN0b3J5X0dldE1hbmlmZXN0UmVxdWVzdENvZGVfUmVxdWVzdBIOCgZhcHBfaWQYASABKA0SEAoIZGVwb3RfaWQYAiABKA0SEwoLbWFuaWZlc3RfaWQYAyABKAQSEgoKYXBwX2JyYW5jaBgEIAEoCRIcChRicmFuY2hfcGFzc3dvcmRfaGFzaBgFIAEoCSJYCjdDQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXRNYW5pZmVzdFJlcXVlc3RDb2RlX1Jlc3BvbnNlEh0KFW1hbmlmZXN0X3JlcXVlc3RfY29kZRgBIAEoBCJmCi9DQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXRDRE5BdXRoVG9rZW5fUmVxdWVzdBIQCghkZXBvdF9pZBgBIAEoDRIRCglob3N0X25hbWUYAiABKAkSDgoGYXBwX2lkGAMgASgNIloKMENDb250ZW50U2VydmVyRGlyZWN0b3J5X0dldENETkF1dGhUb2tlbl9SZXNwb25zZRINCgV0b2tlbhgBIAEoCRIXCg9leHBpcmF0aW9uX3RpbWUYAiABKA0isAEKOENDb250ZW50U2VydmVyRGlyZWN0b3J5X1JlcXVlc3RQZWVyQ29udGVudFNlcnZlcl9SZXF1ZXN0EhgKEHJlbW90ZV9jbGllbnRfaWQYASABKAQSDwoHc3RlYW1pZBgCIAEoBBIfChdzZXJ2ZXJfcmVtb3RlX2NsaWVudF9pZBgDIAEoBBIOCgZhcHBfaWQYBCABKA0SGAoQY3VycmVudF9idWlsZF9pZBgFIAEoDSKAAQo5Q0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfUmVxdWVzdFBlZXJDb250ZW50U2VydmVyX1Jlc3BvbnNlEhMKC3NlcnZlcl9wb3J0GAEgASgNEhgKEGluc3RhbGxlZF9kZXBvdHMYAiADKA0SFAoMYWNjZXNzX3Rva2VuGAMgASgEIoABCjJDQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXRQZWVyQ29udGVudEluZm9fUmVxdWVzdBIYChByZW1vdGVfY2xpZW50X2lkGAEgASgEEg8KB3N0ZWFtaWQYAiABKAQSHwoXc2VydmVyX3JlbW90ZV9jbGllbnRfaWQYAyABKAQiWAozQ0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfR2V0UGVlckNvbnRlbnRJbmZvX1Jlc3BvbnNlEg4KBmFwcGlkcxgBIAMoDRIRCglpcF9wdWJsaWMYAiABKAkijQEKN0NEZXBvdENvbnRlbnREZXRlY3Rpb25fR2V0QWxsRGV0ZWN0ZWRBcHBDb250ZW50X1JlcXVlc3QSUgoOZGV0ZWN0aW9uX3R5cGUYASABKA4yGS5FQXBwQ29udGVudERldGVjdGlvblR5cGU6H2tfRUFwcENvbnRlbnREZXRlY3Rpb25UeXBlX05vbmUiUAoSRGV0ZWN0ZWRBcHBDb250ZW50Eg4KBmFwcF9pZBgBIAEoDRIQCghkZXBvdF9pZBgCIAEoDRIYChBkZXRlY3RlZF9jb250ZW50GAMgASgFIm0KOENEZXBvdENvbnRlbnREZXRlY3Rpb25fR2V0QWxsRGV0ZWN0ZWRBcHBDb250ZW50X1Jlc3BvbnNlEjEKFGRldGVjdGVkX2FwcF9jb250ZW50GAEgAygLMhMuRGV0ZWN0ZWRBcHBDb250ZW50IksKOkNEZXBvdENvbnRlbnREZXRlY3Rpb25fR2V0RGV0ZWN0ZWRDb250ZW50U2luZ2xlQXBwX1JlcXVlc3QSDQoFYXBwaWQYASABKA0i0gEKO0NEZXBvdENvbnRlbnREZXRlY3Rpb25fR2V0RGV0ZWN0ZWRDb250ZW50U2luZ2xlQXBwX1Jlc3BvbnNlEkcKEmRldGVjdGVkX2FudGljaGVhdBgBIAEoDjISLkVBcHBBbnRpQ2hlYXRUeXBlOhdrX0VBcHBBbnRpQ2hlYXRUeXBlTm9uZRJKChNkZXRlY3RlZF9nYW1lZW5naW5lGAIgASgOMhMuRUFwcEdhbWVFbmdpbmVUeXBlOhhrX0VBcHBHYW1lRW5naW5lVHlwZU5vbmUqlAEKGEVBcHBDb250ZW50RGV0ZWN0aW9uVHlwZRIjCh9rX0VBcHBDb250ZW50RGV0ZWN0aW9uVHlwZV9Ob25lEAASKAoka19FQXBwQ29udGVudERldGVjdGlvblR5cGVfQW50aUNoZWF0EAESKQola19FQXBwQ29udGVudERldGVjdGlvblR5cGVfR2FtZUVuZ2luZRACKvoCChFFQXBwQW50aUNoZWF0VHlwZRIbChdrX0VBcHBBbnRpQ2hlYXRUeXBlTm9uZRAAEh0KGWtfRUFwcEFudGlDaGVhdFR5cGVFYXN5QUMQARIdChlrX0VBcHBBbnRpQ2hlYXRUeXBlRGVudXZvEAISHwoba19FQXBwQW50aUNoZWF0VHlwZUJhdHRsRXllEAMSHwoba19FQXBwQW50aUNoZWF0VHlwZVhpZ25Db2RlEAQSIQoda19FQXBwQW50aUNoZWF0VHlwZVB1bmtCdXN0ZXIQBRIaChZrX0VBcHBBbnRpQ2hlYXRUeXBlVkFDEAYSIAoca19FQXBwQW50aUNoZWF0VHlwZUdhbWVHdWFyZBAHEiEKHWtfRUFwcEFudGlDaGVhdFR5cGVIYWNrU2hpZWxkEAgSJgoia19FQXBwQW50aUNoZWF0VHlwZUFudGlDaGVhdEV4cGVydBAJEhwKGGtfRUFwcEFudGlDaGVhdFR5cGVPdGhlchAKKlIKEkVBcHBHYW1lRW5naW5lVHlwZRIcChhrX0VBcHBHYW1lRW5naW5lVHlwZU5vbmUQABIeChprX0VBcHBHYW1lRW5naW5lVHlwZVVucmVhbBABMscHChZDb250ZW50U2VydmVyRGlyZWN0b3J5EosBChZHZXRTZXJ2ZXJzRm9yU3RlYW1QaXBlEjcuQ0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfR2V0U2VydmVyc0ZvclN0ZWFtUGlwZV9SZXF1ZXN0GjguQ0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfR2V0U2VydmVyc0ZvclN0ZWFtUGlwZV9SZXNwb25zZRJ8ChFHZXREZXBvdFBhdGNoSW5mbxIyLkNDb250ZW50U2VydmVyRGlyZWN0b3J5X0dldERlcG90UGF0Y2hJbmZvX1JlcXVlc3QaMy5DQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXREZXBvdFBhdGNoSW5mb19SZXNwb25zZRKFAQoUR2V0Q2xpZW50VXBkYXRlSG9zdHMSNS5DQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXRDbGllbnRVcGRhdGVIb3N0c19SZXF1ZXN0GjYuQ0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfR2V0Q2xpZW50VXBkYXRlSG9zdHNfUmVzcG9uc2USiwEKFkdldE1hbmlmZXN0UmVxdWVzdENvZGUSNy5DQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXRNYW5pZmVzdFJlcXVlc3RDb2RlX1JlcXVlc3QaOC5DQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXRNYW5pZmVzdFJlcXVlc3RDb2RlX1Jlc3BvbnNlEnYKD0dldENETkF1dGhUb2tlbhIwLkNDb250ZW50U2VydmVyRGlyZWN0b3J5X0dldENETkF1dGhUb2tlbl9SZXF1ZXN0GjEuQ0NvbnRlbnRTZXJ2ZXJEaXJlY3RvcnlfR2V0Q0ROQXV0aFRva2VuX1Jlc3BvbnNlEpEBChhSZXF1ZXN0UGVlckNvbnRlbnRTZXJ2ZXISOS5DQ29udGVudFNlcnZlckRpcmVjdG9yeV9SZXF1ZXN0UGVlckNvbnRlbnRTZXJ2ZXJfUmVxdWVzdBo6LkNDb250ZW50U2VydmVyRGlyZWN0b3J5X1JlcXVlc3RQZWVyQ29udGVudFNlcnZlcl9SZXNwb25zZRJ/ChJHZXRQZWVyQ29udGVudEluZm8SMy5DQ29udGVudFNlcnZlckRpcmVjdG9yeV9HZXRQZWVyQ29udGVudEluZm9fUmVxdWVzdBo0LkNDb250ZW50U2VydmVyRGlyZWN0b3J5X0dldFBlZXJDb250ZW50SW5mb19SZXNwb25zZTLEAgoVRGVwb3RDb250ZW50RGV0ZWN0aW9uEo8BChhHZXRBbGxEZXRlY3RlZEFwcENvbnRlbnQSOC5DRGVwb3RDb250ZW50RGV0ZWN0aW9uX0dldEFsbERldGVjdGVkQXBwQ29udGVudF9SZXF1ZXN0GjkuQ0RlcG90Q29udGVudERldGVjdGlvbl9HZXRBbGxEZXRlY3RlZEFwcENvbnRlbnRfUmVzcG9uc2USmAEKG0dldERldGVjdGVkQ29udGVudFNpbmdsZUFwcBI7LkNEZXBvdENvbnRlbnREZXRlY3Rpb25fR2V0RGV0ZWN0ZWRDb250ZW50U2luZ2xlQXBwX1JlcXVlc3QaPC5DRGVwb3RDb250ZW50RGV0ZWN0aW9uX0dldERldGVjdGVkQ29udGVudFNpbmdsZUFwcF9SZXNwb25zZUIDgAEB", [file_steammessages_base, file_steammessages_unified_base_steamclient]);

/**
 * @generated from message CContentServerDirectory_ConnectedSteamPipeServerInfo
 */
export type CContentServerDirectory_ConnectedSteamPipeServerInfo = Message<"CContentServerDirectory_ConnectedSteamPipeServerInfo"> & {
  /**
   * @generated from field: optional string type = 1;
   */
  type: string;

  /**
   * @generated from field: optional int32 source_id = 2;
   */
  sourceId: number;

  /**
   * @generated from field: optional string hostname = 3;
   */
  hostname: string;
};

/**
 * Describes the message CContentServerDirectory_ConnectedSteamPipeServerInfo.
 * Use `create(CContentServerDirectory_ConnectedSteamPipeServerInfoSchema)` to create a new message.
 */
export const CContentServerDirectory_ConnectedSteamPipeServerInfoSchema: GenMessage<CContentServerDirectory_ConnectedSteamPipeServerInfo> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 0);

/**
 * @generated from message CContentServerDirectory_GetServersForSteamPipe_Request
 */
export type CContentServerDirectory_GetServersForSteamPipe_Request = Message<"CContentServerDirectory_GetServersForSteamPipe_Request"> & {
  /**
   * @generated from field: optional uint32 cell_id = 1;
   */
  cellId: number;

  /**
   * @generated from field: optional uint32 max_servers = 2 [default = 20];
   */
  maxServers: number;

  /**
   * @generated from field: optional string ip_override = 3;
   */
  ipOverride: string;

  /**
   * @generated from field: optional int32 launcher_type = 4 [default = 0];
   */
  launcherType: number;

  /**
   * @generated from field: optional string ipv6_public = 5;
   */
  ipv6Public: string;

  /**
   * @generated from field: repeated CContentServerDirectory_ConnectedSteamPipeServerInfo current_connections = 6;
   */
  currentConnections: CContentServerDirectory_ConnectedSteamPipeServerInfo[];
};

/**
 * Describes the message CContentServerDirectory_GetServersForSteamPipe_Request.
 * Use `create(CContentServerDirectory_GetServersForSteamPipe_RequestSchema)` to create a new message.
 */
export const CContentServerDirectory_GetServersForSteamPipe_RequestSchema: GenMessage<CContentServerDirectory_GetServersForSteamPipe_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 1);

/**
 * @generated from message CContentServerDirectory_ServerInfo
 */
export type CContentServerDirectory_ServerInfo = Message<"CContentServerDirectory_ServerInfo"> & {
  /**
   * @generated from field: optional string type = 1;
   */
  type: string;

  /**
   * @generated from field: optional int32 source_id = 2;
   */
  sourceId: number;

  /**
   * @generated from field: optional int32 cell_id = 3;
   */
  cellId: number;

  /**
   * @generated from field: optional int32 load = 4;
   */
  load: number;

  /**
   * @generated from field: optional float weighted_load = 5;
   */
  weightedLoad: number;

  /**
   * @generated from field: optional int32 num_entries_in_client_list = 6;
   */
  numEntriesInClientList: number;

  /**
   * @generated from field: optional bool steam_china_only = 7;
   */
  steamChinaOnly: boolean;

  /**
   * @generated from field: optional string host = 8;
   */
  host: string;

  /**
   * @generated from field: optional string vhost = 9;
   */
  vhost: string;

  /**
   * @generated from field: optional bool use_as_proxy = 10;
   */
  useAsProxy: boolean;

  /**
   * @generated from field: optional string proxy_request_path_template = 11;
   */
  proxyRequestPathTemplate: string;

  /**
   * @generated from field: optional string https_support = 12;
   */
  httpsSupport: string;

  /**
   * @generated from field: repeated uint32 allowed_app_ids = 13;
   */
  allowedAppIds: number[];

  /**
   * @generated from field: optional uint32 priority_class = 15;
   */
  priorityClass: number;

  /**
   * @generated from field: repeated string bypass_proxies_of_type = 16;
   */
  bypassProxiesOfType: string[];
};

/**
 * Describes the message CContentServerDirectory_ServerInfo.
 * Use `create(CContentServerDirectory_ServerInfoSchema)` to create a new message.
 */
export const CContentServerDirectory_ServerInfoSchema: GenMessage<CContentServerDirectory_ServerInfo> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 2);

/**
 * @generated from message CContentServerDirectory_GetServersForSteamPipe_Response
 */
export type CContentServerDirectory_GetServersForSteamPipe_Response = Message<"CContentServerDirectory_GetServersForSteamPipe_Response"> & {
  /**
   * @generated from field: repeated CContentServerDirectory_ServerInfo servers = 1;
   */
  servers: CContentServerDirectory_ServerInfo[];

  /**
   * @generated from field: optional bool no_change = 2;
   */
  noChange: boolean;
};

/**
 * Describes the message CContentServerDirectory_GetServersForSteamPipe_Response.
 * Use `create(CContentServerDirectory_GetServersForSteamPipe_ResponseSchema)` to create a new message.
 */
export const CContentServerDirectory_GetServersForSteamPipe_ResponseSchema: GenMessage<CContentServerDirectory_GetServersForSteamPipe_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 3);

/**
 * @generated from message CContentServerDirectory_GetDepotPatchInfo_Request
 */
export type CContentServerDirectory_GetDepotPatchInfo_Request = Message<"CContentServerDirectory_GetDepotPatchInfo_Request"> & {
  /**
   * @generated from field: optional uint32 appid = 1;
   */
  appid: number;

  /**
   * @generated from field: optional uint32 depotid = 2;
   */
  depotid: number;

  /**
   * @generated from field: optional uint64 source_manifestid = 3;
   */
  sourceManifestid: bigint;

  /**
   * @generated from field: optional uint64 target_manifestid = 4;
   */
  targetManifestid: bigint;
};

/**
 * Describes the message CContentServerDirectory_GetDepotPatchInfo_Request.
 * Use `create(CContentServerDirectory_GetDepotPatchInfo_RequestSchema)` to create a new message.
 */
export const CContentServerDirectory_GetDepotPatchInfo_RequestSchema: GenMessage<CContentServerDirectory_GetDepotPatchInfo_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 4);

/**
 * @generated from message CContentServerDirectory_GetDepotPatchInfo_Response
 */
export type CContentServerDirectory_GetDepotPatchInfo_Response = Message<"CContentServerDirectory_GetDepotPatchInfo_Response"> & {
  /**
   * @generated from field: optional bool is_available = 1;
   */
  isAvailable: boolean;

  /**
   * @generated from field: optional uint64 patch_size = 2;
   */
  patchSize: bigint;

  /**
   * @generated from field: optional uint64 patched_chunks_size = 3;
   */
  patchedChunksSize: bigint;
};

/**
 * Describes the message CContentServerDirectory_GetDepotPatchInfo_Response.
 * Use `create(CContentServerDirectory_GetDepotPatchInfo_ResponseSchema)` to create a new message.
 */
export const CContentServerDirectory_GetDepotPatchInfo_ResponseSchema: GenMessage<CContentServerDirectory_GetDepotPatchInfo_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 5);

/**
 * @generated from message CContentServerDirectory_GetClientUpdateHosts_Request
 */
export type CContentServerDirectory_GetClientUpdateHosts_Request = Message<"CContentServerDirectory_GetClientUpdateHosts_Request"> & {
  /**
   * @generated from field: optional string cached_signature = 1;
   */
  cachedSignature: string;
};

/**
 * Describes the message CContentServerDirectory_GetClientUpdateHosts_Request.
 * Use `create(CContentServerDirectory_GetClientUpdateHosts_RequestSchema)` to create a new message.
 */
export const CContentServerDirectory_GetClientUpdateHosts_RequestSchema: GenMessage<CContentServerDirectory_GetClientUpdateHosts_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 6);

/**
 * @generated from message CContentServerDirectory_GetClientUpdateHosts_Response
 */
export type CContentServerDirectory_GetClientUpdateHosts_Response = Message<"CContentServerDirectory_GetClientUpdateHosts_Response"> & {
  /**
   * @generated from field: optional string hosts_kv = 1;
   */
  hostsKv: string;

  /**
   * @generated from field: optional uint64 valid_until_time = 2;
   */
  validUntilTime: bigint;

  /**
   * @generated from field: optional string ip_country = 3;
   */
  ipCountry: string;
};

/**
 * Describes the message CContentServerDirectory_GetClientUpdateHosts_Response.
 * Use `create(CContentServerDirectory_GetClientUpdateHosts_ResponseSchema)` to create a new message.
 */
export const CContentServerDirectory_GetClientUpdateHosts_ResponseSchema: GenMessage<CContentServerDirectory_GetClientUpdateHosts_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 7);

/**
 * @generated from message CContentServerDirectory_GetManifestRequestCode_Request
 */
export type CContentServerDirectory_GetManifestRequestCode_Request = Message<"CContentServerDirectory_GetManifestRequestCode_Request"> & {
  /**
   * @generated from field: optional uint32 app_id = 1;
   */
  appId: number;

  /**
   * @generated from field: optional uint32 depot_id = 2;
   */
  depotId: number;

  /**
   * @generated from field: optional uint64 manifest_id = 3;
   */
  manifestId: bigint;

  /**
   * @generated from field: optional string app_branch = 4;
   */
  appBranch: string;

  /**
   * @generated from field: optional string branch_password_hash = 5;
   */
  branchPasswordHash: string;
};

/**
 * Describes the message CContentServerDirectory_GetManifestRequestCode_Request.
 * Use `create(CContentServerDirectory_GetManifestRequestCode_RequestSchema)` to create a new message.
 */
export const CContentServerDirectory_GetManifestRequestCode_RequestSchema: GenMessage<CContentServerDirectory_GetManifestRequestCode_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 8);

/**
 * @generated from message CContentServerDirectory_GetManifestRequestCode_Response
 */
export type CContentServerDirectory_GetManifestRequestCode_Response = Message<"CContentServerDirectory_GetManifestRequestCode_Response"> & {
  /**
   * @generated from field: optional uint64 manifest_request_code = 1;
   */
  manifestRequestCode: bigint;
};

/**
 * Describes the message CContentServerDirectory_GetManifestRequestCode_Response.
 * Use `create(CContentServerDirectory_GetManifestRequestCode_ResponseSchema)` to create a new message.
 */
export const CContentServerDirectory_GetManifestRequestCode_ResponseSchema: GenMessage<CContentServerDirectory_GetManifestRequestCode_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 9);

/**
 * @generated from message CContentServerDirectory_GetCDNAuthToken_Request
 */
export type CContentServerDirectory_GetCDNAuthToken_Request = Message<"CContentServerDirectory_GetCDNAuthToken_Request"> & {
  /**
   * @generated from field: optional uint32 depot_id = 1;
   */
  depotId: number;

  /**
   * @generated from field: optional string host_name = 2;
   */
  hostName: string;

  /**
   * @generated from field: optional uint32 app_id = 3;
   */
  appId: number;
};

/**
 * Describes the message CContentServerDirectory_GetCDNAuthToken_Request.
 * Use `create(CContentServerDirectory_GetCDNAuthToken_RequestSchema)` to create a new message.
 */
export const CContentServerDirectory_GetCDNAuthToken_RequestSchema: GenMessage<CContentServerDirectory_GetCDNAuthToken_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 10);

/**
 * @generated from message CContentServerDirectory_GetCDNAuthToken_Response
 */
export type CContentServerDirectory_GetCDNAuthToken_Response = Message<"CContentServerDirectory_GetCDNAuthToken_Response"> & {
  /**
   * @generated from field: optional string token = 1;
   */
  token: string;

  /**
   * @generated from field: optional uint32 expiration_time = 2;
   */
  expirationTime: number;
};

/**
 * Describes the message CContentServerDirectory_GetCDNAuthToken_Response.
 * Use `create(CContentServerDirectory_GetCDNAuthToken_ResponseSchema)` to create a new message.
 */
export const CContentServerDirectory_GetCDNAuthToken_ResponseSchema: GenMessage<CContentServerDirectory_GetCDNAuthToken_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 11);

/**
 * @generated from message CContentServerDirectory_RequestPeerContentServer_Request
 */
export type CContentServerDirectory_RequestPeerContentServer_Request = Message<"CContentServerDirectory_RequestPeerContentServer_Request"> & {
  /**
   * @generated from field: optional uint64 remote_client_id = 1;
   */
  remoteClientId: bigint;

  /**
   * @generated from field: optional uint64 steamid = 2;
   */
  steamid: bigint;

  /**
   * @generated from field: optional uint64 server_remote_client_id = 3;
   */
  serverRemoteClientId: bigint;

  /**
   * @generated from field: optional uint32 app_id = 4;
   */
  appId: number;

  /**
   * @generated from field: optional uint32 current_build_id = 5;
   */
  currentBuildId: number;
};

/**
 * Describes the message CContentServerDirectory_RequestPeerContentServer_Request.
 * Use `create(CContentServerDirectory_RequestPeerContentServer_RequestSchema)` to create a new message.
 */
export const CContentServerDirectory_RequestPeerContentServer_RequestSchema: GenMessage<CContentServerDirectory_RequestPeerContentServer_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 12);

/**
 * @generated from message CContentServerDirectory_RequestPeerContentServer_Response
 */
export type CContentServerDirectory_RequestPeerContentServer_Response = Message<"CContentServerDirectory_RequestPeerContentServer_Response"> & {
  /**
   * @generated from field: optional uint32 server_port = 1;
   */
  serverPort: number;

  /**
   * @generated from field: repeated uint32 installed_depots = 2;
   */
  installedDepots: number[];

  /**
   * @generated from field: optional uint64 access_token = 3;
   */
  accessToken: bigint;
};

/**
 * Describes the message CContentServerDirectory_RequestPeerContentServer_Response.
 * Use `create(CContentServerDirectory_RequestPeerContentServer_ResponseSchema)` to create a new message.
 */
export const CContentServerDirectory_RequestPeerContentServer_ResponseSchema: GenMessage<CContentServerDirectory_RequestPeerContentServer_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 13);

/**
 * @generated from message CContentServerDirectory_GetPeerContentInfo_Request
 */
export type CContentServerDirectory_GetPeerContentInfo_Request = Message<"CContentServerDirectory_GetPeerContentInfo_Request"> & {
  /**
   * @generated from field: optional uint64 remote_client_id = 1;
   */
  remoteClientId: bigint;

  /**
   * @generated from field: optional uint64 steamid = 2;
   */
  steamid: bigint;

  /**
   * @generated from field: optional uint64 server_remote_client_id = 3;
   */
  serverRemoteClientId: bigint;
};

/**
 * Describes the message CContentServerDirectory_GetPeerContentInfo_Request.
 * Use `create(CContentServerDirectory_GetPeerContentInfo_RequestSchema)` to create a new message.
 */
export const CContentServerDirectory_GetPeerContentInfo_RequestSchema: GenMessage<CContentServerDirectory_GetPeerContentInfo_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 14);

/**
 * @generated from message CContentServerDirectory_GetPeerContentInfo_Response
 */
export type CContentServerDirectory_GetPeerContentInfo_Response = Message<"CContentServerDirectory_GetPeerContentInfo_Response"> & {
  /**
   * @generated from field: repeated uint32 appids = 1;
   */
  appids: number[];

  /**
   * @generated from field: optional string ip_public = 2;
   */
  ipPublic: string;
};

/**
 * Describes the message CContentServerDirectory_GetPeerContentInfo_Response.
 * Use `create(CContentServerDirectory_GetPeerContentInfo_ResponseSchema)` to create a new message.
 */
export const CContentServerDirectory_GetPeerContentInfo_ResponseSchema: GenMessage<CContentServerDirectory_GetPeerContentInfo_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 15);

/**
 * @generated from message CDepotContentDetection_GetAllDetectedAppContent_Request
 */
export type CDepotContentDetection_GetAllDetectedAppContent_Request = Message<"CDepotContentDetection_GetAllDetectedAppContent_Request"> & {
  /**
   * @generated from field: optional EAppContentDetectionType detection_type = 1 [default = k_EAppContentDetectionType_None];
   */
  detectionType: EAppContentDetectionType;
};

/**
 * Describes the message CDepotContentDetection_GetAllDetectedAppContent_Request.
 * Use `create(CDepotContentDetection_GetAllDetectedAppContent_RequestSchema)` to create a new message.
 */
export const CDepotContentDetection_GetAllDetectedAppContent_RequestSchema: GenMessage<CDepotContentDetection_GetAllDetectedAppContent_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 16);

/**
 * @generated from message DetectedAppContent
 */
export type DetectedAppContent = Message<"DetectedAppContent"> & {
  /**
   * @generated from field: optional uint32 app_id = 1;
   */
  appId: number;

  /**
   * @generated from field: optional uint32 depot_id = 2;
   */
  depotId: number;

  /**
   * @generated from field: optional int32 detected_content = 3;
   */
  detectedContent: number;
};

/**
 * Describes the message DetectedAppContent.
 * Use `create(DetectedAppContentSchema)` to create a new message.
 */
export const DetectedAppContentSchema: GenMessage<DetectedAppContent> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 17);

/**
 * @generated from message CDepotContentDetection_GetAllDetectedAppContent_Response
 */
export type CDepotContentDetection_GetAllDetectedAppContent_Response = Message<"CDepotContentDetection_GetAllDetectedAppContent_Response"> & {
  /**
   * @generated from field: repeated DetectedAppContent detected_app_content = 1;
   */
  detectedAppContent: DetectedAppContent[];
};

/**
 * Describes the message CDepotContentDetection_GetAllDetectedAppContent_Response.
 * Use `create(CDepotContentDetection_GetAllDetectedAppContent_ResponseSchema)` to create a new message.
 */
export const CDepotContentDetection_GetAllDetectedAppContent_ResponseSchema: GenMessage<CDepotContentDetection_GetAllDetectedAppContent_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 18);

/**
 * @generated from message CDepotContentDetection_GetDetectedContentSingleApp_Request
 */
export type CDepotContentDetection_GetDetectedContentSingleApp_Request = Message<"CDepotContentDetection_GetDetectedContentSingleApp_Request"> & {
  /**
   * @generated from field: optional uint32 appid = 1;
   */
  appid: number;
};

/**
 * Describes the message CDepotContentDetection_GetDetectedContentSingleApp_Request.
 * Use `create(CDepotContentDetection_GetDetectedContentSingleApp_RequestSchema)` to create a new message.
 */
export const CDepotContentDetection_GetDetectedContentSingleApp_RequestSchema: GenMessage<CDepotContentDetection_GetDetectedContentSingleApp_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 19);

/**
 * @generated from message CDepotContentDetection_GetDetectedContentSingleApp_Response
 */
export type CDepotContentDetection_GetDetectedContentSingleApp_Response = Message<"CDepotContentDetection_GetDetectedContentSingleApp_Response"> & {
  /**
   * @generated from field: optional EAppAntiCheatType detected_anticheat = 1 [default = k_EAppAntiCheatTypeNone];
   */
  detectedAnticheat: EAppAntiCheatType;

  /**
   * @generated from field: optional EAppGameEngineType detected_gameengine = 2 [default = k_EAppGameEngineTypeNone];
   */
  detectedGameengine: EAppGameEngineType;
};

/**
 * Describes the message CDepotContentDetection_GetDetectedContentSingleApp_Response.
 * Use `create(CDepotContentDetection_GetDetectedContentSingleApp_ResponseSchema)` to create a new message.
 */
export const CDepotContentDetection_GetDetectedContentSingleApp_ResponseSchema: GenMessage<CDepotContentDetection_GetDetectedContentSingleApp_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_contentsystem_steamclient, 20);

/**
 * @generated from enum EAppContentDetectionType
 */
export enum EAppContentDetectionType {
  /**
   * @generated from enum value: k_EAppContentDetectionType_None = 0;
   */
  k_EAppContentDetectionType_None = 0,

  /**
   * @generated from enum value: k_EAppContentDetectionType_AntiCheat = 1;
   */
  k_EAppContentDetectionType_AntiCheat = 1,

  /**
   * @generated from enum value: k_EAppContentDetectionType_GameEngine = 2;
   */
  k_EAppContentDetectionType_GameEngine = 2,
}

/**
 * Describes the enum EAppContentDetectionType.
 */
export const EAppContentDetectionTypeSchema: GenEnum<EAppContentDetectionType> = /*@__PURE__*/
  enumDesc(file_steammessages_contentsystem_steamclient, 0);

/**
 * @generated from enum EAppAntiCheatType
 */
export enum EAppAntiCheatType {
  /**
   * @generated from enum value: k_EAppAntiCheatTypeNone = 0;
   */
  k_EAppAntiCheatTypeNone = 0,

  /**
   * @generated from enum value: k_EAppAntiCheatTypeEasyAC = 1;
   */
  k_EAppAntiCheatTypeEasyAC = 1,

  /**
   * @generated from enum value: k_EAppAntiCheatTypeDenuvo = 2;
   */
  k_EAppAntiCheatTypeDenuvo = 2,

  /**
   * @generated from enum value: k_EAppAntiCheatTypeBattlEye = 3;
   */
  k_EAppAntiCheatTypeBattlEye = 3,

  /**
   * @generated from enum value: k_EAppAntiCheatTypeXignCode = 4;
   */
  k_EAppAntiCheatTypeXignCode = 4,

  /**
   * @generated from enum value: k_EAppAntiCheatTypePunkBuster = 5;
   */
  k_EAppAntiCheatTypePunkBuster = 5,

  /**
   * @generated from enum value: k_EAppAntiCheatTypeVAC = 6;
   */
  k_EAppAntiCheatTypeVAC = 6,

  /**
   * @generated from enum value: k_EAppAntiCheatTypeGameGuard = 7;
   */
  k_EAppAntiCheatTypeGameGuard = 7,

  /**
   * @generated from enum value: k_EAppAntiCheatTypeHackShield = 8;
   */
  k_EAppAntiCheatTypeHackShield = 8,

  /**
   * @generated from enum value: k_EAppAntiCheatTypeAntiCheatExpert = 9;
   */
  k_EAppAntiCheatTypeAntiCheatExpert = 9,

  /**
   * @generated from enum value: k_EAppAntiCheatTypeOther = 10;
   */
  k_EAppAntiCheatTypeOther = 10,
}

/**
 * Describes the enum EAppAntiCheatType.
 */
export const EAppAntiCheatTypeSchema: GenEnum<EAppAntiCheatType> = /*@__PURE__*/
  enumDesc(file_steammessages_contentsystem_steamclient, 1);

/**
 * @generated from enum EAppGameEngineType
 */
export enum EAppGameEngineType {
  /**
   * @generated from enum value: k_EAppGameEngineTypeNone = 0;
   */
  k_EAppGameEngineTypeNone = 0,

  /**
   * @generated from enum value: k_EAppGameEngineTypeUnreal = 1;
   */
  k_EAppGameEngineTypeUnreal = 1,
}

/**
 * Describes the enum EAppGameEngineType.
 */
export const EAppGameEngineTypeSchema: GenEnum<EAppGameEngineType> = /*@__PURE__*/
  enumDesc(file_steammessages_contentsystem_steamclient, 2);

/**
 * @generated from service ContentServerDirectory
 */
export const ContentServerDirectory: GenService<{
  /**
   * @generated from rpc ContentServerDirectory.GetServersForSteamPipe
   */
  getServersForSteamPipe: {
    methodKind: "unary";
    input: typeof CContentServerDirectory_GetServersForSteamPipe_RequestSchema;
    output: typeof CContentServerDirectory_GetServersForSteamPipe_ResponseSchema;
  },
  /**
   * @generated from rpc ContentServerDirectory.GetDepotPatchInfo
   */
  getDepotPatchInfo: {
    methodKind: "unary";
    input: typeof CContentServerDirectory_GetDepotPatchInfo_RequestSchema;
    output: typeof CContentServerDirectory_GetDepotPatchInfo_ResponseSchema;
  },
  /**
   * @generated from rpc ContentServerDirectory.GetClientUpdateHosts
   */
  getClientUpdateHosts: {
    methodKind: "unary";
    input: typeof CContentServerDirectory_GetClientUpdateHosts_RequestSchema;
    output: typeof CContentServerDirectory_GetClientUpdateHosts_ResponseSchema;
  },
  /**
   * @generated from rpc ContentServerDirectory.GetManifestRequestCode
   */
  getManifestRequestCode: {
    methodKind: "unary";
    input: typeof CContentServerDirectory_GetManifestRequestCode_RequestSchema;
    output: typeof CContentServerDirectory_GetManifestRequestCode_ResponseSchema;
  },
  /**
   * @generated from rpc ContentServerDirectory.GetCDNAuthToken
   */
  getCDNAuthToken: {
    methodKind: "unary";
    input: typeof CContentServerDirectory_GetCDNAuthToken_RequestSchema;
    output: typeof CContentServerDirectory_GetCDNAuthToken_ResponseSchema;
  },
  /**
   * @generated from rpc ContentServerDirectory.RequestPeerContentServer
   */
  requestPeerContentServer: {
    methodKind: "unary";
    input: typeof CContentServerDirectory_RequestPeerContentServer_RequestSchema;
    output: typeof CContentServerDirectory_RequestPeerContentServer_ResponseSchema;
  },
  /**
   * @generated from rpc ContentServerDirectory.GetPeerContentInfo
   */
  getPeerContentInfo: {
    methodKind: "unary";
    input: typeof CContentServerDirectory_GetPeerContentInfo_RequestSchema;
    output: typeof CContentServerDirectory_GetPeerContentInfo_ResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_steammessages_contentsystem_steamclient, 0);

/**
 * @generated from service DepotContentDetection
 */
export const DepotContentDetection: GenService<{
  /**
   * @generated from rpc DepotContentDetection.GetAllDetectedAppContent
   */
  getAllDetectedAppContent: {
    methodKind: "unary";
    input: typeof CDepotContentDetection_GetAllDetectedAppContent_RequestSchema;
    output: typeof CDepotContentDetection_GetAllDetectedAppContent_ResponseSchema;
  },
  /**
   * @generated from rpc DepotContentDetection.GetDetectedContentSingleApp
   */
  getDetectedContentSingleApp: {
    methodKind: "unary";
    input: typeof CDepotContentDetection_GetDetectedContentSingleApp_RequestSchema;
    output: typeof CDepotContentDetection_GetDetectedContentSingleApp_ResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_steammessages_contentsystem_steamclient, 1);

