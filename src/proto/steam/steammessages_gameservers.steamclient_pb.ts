// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file steammessages_gameservers.steamclient.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { CMsgIPAddress } from "./steammessages_base_pb";
import { file_steammessages_base } from "./steammessages_base_pb";
import type { NoResponseSchema } from "./steammessages_unified_base.steamclient_pb";
import { file_steammessages_unified_base_steamclient } from "./steammessages_unified_base.steamclient_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file steammessages_gameservers.steamclient.proto.
 */
export const file_steammessages_gameservers_steamclient: GenFile = /*@__PURE__*/
  fileDesc("CitzdGVhbW1lc3NhZ2VzX2dhbWVzZXJ2ZXJzLnN0ZWFtY2xpZW50LnByb3RvIkAKKkNHYW1lU2VydmVyc19HZXRTZXJ2ZXJTdGVhbUlEc0J5SVBfUmVxdWVzdBISCgpzZXJ2ZXJfaXBzGAEgAygJIpABCiVDR2FtZVNlcnZlcnNfSVBzV2l0aFN0ZWFtSURzX1Jlc3BvbnNlEj4KB3NlcnZlcnMYASADKAsyLS5DR2FtZVNlcnZlcnNfSVBzV2l0aFN0ZWFtSURzX1Jlc3BvbnNlLlNlcnZlchonCgZTZXJ2ZXISDAoEYWRkchgBIAEoCRIPCgdzdGVhbWlkGAIgASgGIkUKKkNHYW1lU2VydmVyc19HZXRTZXJ2ZXJJUHNCeVN0ZWFtSURfUmVxdWVzdBIXCg9zZXJ2ZXJfc3RlYW1pZHMYASADKAYigAIKIkNHYW1lU2VydmVyc19RdWVyeUJ5RmFrZUlQX1JlcXVlc3QSDwoHZmFrZV9pcBgBIAEoDRIRCglmYWtlX3BvcnQYAiABKA0SDgoGYXBwX2lkGAMgASgNElEKCnF1ZXJ5X3R5cGUYBCABKA4yLi5DR2FtZVNlcnZlcnNfUXVlcnlCeUZha2VJUF9SZXF1ZXN0LkVRdWVyeVR5cGU6DVF1ZXJ5X0ludmFsaWQiUwoKRVF1ZXJ5VHlwZRIRCg1RdWVyeV9JbnZhbGlkEAASDgoKUXVlcnlfUGluZxABEhEKDVF1ZXJ5X1BsYXllcnMQAhIPCgtRdWVyeV9SdWxlcxADItADChtDTXNnR2FtZVNlcnZlclBpbmdRdWVyeURhdGESIQoJc2VydmVyX2lwGAEgASgLMg4uQ01zZ0lQQWRkcmVzcxISCgpxdWVyeV9wb3J0GAIgASgNEhEKCWdhbWVfcG9ydBgDIAEoDRIWCg5zcGVjdGF0b3JfcG9ydBgEIAEoDRIdChVzcGVjdGF0b3Jfc2VydmVyX25hbWUYBSABKAkSEwoLc2VydmVyX25hbWUYBiABKAkSDwoHc3RlYW1pZBgHIAEoBhIOCgZhcHBfaWQYCCABKA0SDwoHZ2FtZWRpchgJIAEoCRILCgNtYXAYCiABKAkSGAoQZ2FtZV9kZXNjcmlwdGlvbhgLIAEoCRIQCghnYW1ldHlwZRgMIAEoCRITCgtudW1fcGxheWVycxgNIAEoDRITCgttYXhfcGxheWVycxgOIAEoDRIQCghudW1fYm90cxgPIAEoDRIQCghwYXNzd29yZBgQIAEoCBIOCgZzZWN1cmUYESABKAgSEQoJZGVkaWNhdGVkGBIgASgIEg8KB3ZlcnNpb24YEyABKAkSEQoJc2RyX3BvcGlkGBQgASgHEhsKE3Nkcl9sb2NhdGlvbl9zdHJpbmcYFSABKAkilQEKHkNNc2dHYW1lU2VydmVyUGxheWVyc1F1ZXJ5RGF0YRI3CgdwbGF5ZXJzGAEgAygLMiYuQ01zZ0dhbWVTZXJ2ZXJQbGF5ZXJzUXVlcnlEYXRhLlBsYXllcho6CgZQbGF5ZXISDAoEbmFtZRgBIAEoCRINCgVzY29yZRgCIAEoDRITCgt0aW1lX3BsYXllZBgDIAEoDSJ2ChxDTXNnR2FtZVNlcnZlclJ1bGVzUXVlcnlEYXRhEjEKBXJ1bGVzGAEgAygLMiIuQ01zZ0dhbWVTZXJ2ZXJSdWxlc1F1ZXJ5RGF0YS5SdWxlGiMKBFJ1bGUSDAoEcnVsZRgBIAEoCRINCgV2YWx1ZRgCIAEoCSLCAQolQ0dhbWVTZXJ2ZXJzX0dhbWVTZXJ2ZXJRdWVyeV9SZXNwb25zZRIvCglwaW5nX2RhdGEYASABKAsyHC5DTXNnR2FtZVNlcnZlclBpbmdRdWVyeURhdGESNQoMcGxheWVyc19kYXRhGAIgASgLMh8uQ01zZ0dhbWVTZXJ2ZXJQbGF5ZXJzUXVlcnlEYXRhEjEKCnJ1bGVzX2RhdGEYAyABKAsyHS5DTXNnR2FtZVNlcnZlclJ1bGVzUXVlcnlEYXRhIpkBCi9DR2FtZVNlcnZlcnNfUmVwb3J0U2VydmVyUGluZ1JlcGx5X05vdGlmaWNhdGlvbhIxCgtzZXJ2ZXJfZGF0YRgBIAEoCzIcLkNNc2dHYW1lU2VydmVyUGluZ1F1ZXJ5RGF0YRIPCgdwaW5nX21zGAIgASgNEiIKGmNsaWVudF9zZHJfbG9jYXRpb25fc3RyaW5nGAMgASgJIioKKEdhbWVTZXJ2ZXJDbGllbnRfUXVlcnlTZXJ2ZXJEYXRhX1JlcXVlc3QixgEKKUdhbWVTZXJ2ZXJDbGllbnRfUXVlcnlTZXJ2ZXJEYXRhX1Jlc3BvbnNlEi8KCXBpbmdfZGF0YRgBIAEoCzIcLkNNc2dHYW1lU2VydmVyUGluZ1F1ZXJ5RGF0YRI1CgxwbGF5ZXJzX2RhdGEYAiABKAsyHy5DTXNnR2FtZVNlcnZlclBsYXllcnNRdWVyeURhdGESMQoKcnVsZXNfZGF0YRgDIAEoCzIdLkNNc2dHYW1lU2VydmVyUnVsZXNRdWVyeURhdGEynwMKC0dhbWVTZXJ2ZXJzEmwKFUdldFNlcnZlclN0ZWFtSURzQnlJUBIrLkNHYW1lU2VydmVyc19HZXRTZXJ2ZXJTdGVhbUlEc0J5SVBfUmVxdWVzdBomLkNHYW1lU2VydmVyc19JUHNXaXRoU3RlYW1JRHNfUmVzcG9uc2USbAoVR2V0U2VydmVySVBzQnlTdGVhbUlEEisuQ0dhbWVTZXJ2ZXJzX0dldFNlcnZlcklQc0J5U3RlYW1JRF9SZXF1ZXN0GiYuQ0dhbWVTZXJ2ZXJzX0lQc1dpdGhTdGVhbUlEc19SZXNwb25zZRJcCg1RdWVyeUJ5RmFrZUlQEiMuQ0dhbWVTZXJ2ZXJzX1F1ZXJ5QnlGYWtlSVBfUmVxdWVzdBomLkNHYW1lU2VydmVyc19HYW1lU2VydmVyUXVlcnlfUmVzcG9uc2USVgoVUmVwb3J0U2VydmVyUGluZ1JlcGx5EjAuQ0dhbWVTZXJ2ZXJzX1JlcG9ydFNlcnZlclBpbmdSZXBseV9Ob3RpZmljYXRpb24aCy5Ob1Jlc3BvbnNlMoIBChBHYW1lU2VydmVyQ2xpZW50EmgKD1F1ZXJ5U2VydmVyRGF0YRIpLkdhbWVTZXJ2ZXJDbGllbnRfUXVlcnlTZXJ2ZXJEYXRhX1JlcXVlc3QaKi5HYW1lU2VydmVyQ2xpZW50X1F1ZXJ5U2VydmVyRGF0YV9SZXNwb25zZRoEwLUYAkIDgAEB", [file_steammessages_base, file_steammessages_unified_base_steamclient]);

/**
 * @generated from message CGameServers_GetServerSteamIDsByIP_Request
 */
export type CGameServers_GetServerSteamIDsByIP_Request = Message<"CGameServers_GetServerSteamIDsByIP_Request"> & {
  /**
   * @generated from field: repeated string server_ips = 1;
   */
  serverIps: string[];
};

/**
 * Describes the message CGameServers_GetServerSteamIDsByIP_Request.
 * Use `create(CGameServers_GetServerSteamIDsByIP_RequestSchema)` to create a new message.
 */
export const CGameServers_GetServerSteamIDsByIP_RequestSchema: GenMessage<CGameServers_GetServerSteamIDsByIP_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 0);

/**
 * @generated from message CGameServers_IPsWithSteamIDs_Response
 */
export type CGameServers_IPsWithSteamIDs_Response = Message<"CGameServers_IPsWithSteamIDs_Response"> & {
  /**
   * @generated from field: repeated CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
   */
  servers: CGameServers_IPsWithSteamIDs_Response_Server[];
};

/**
 * Describes the message CGameServers_IPsWithSteamIDs_Response.
 * Use `create(CGameServers_IPsWithSteamIDs_ResponseSchema)` to create a new message.
 */
export const CGameServers_IPsWithSteamIDs_ResponseSchema: GenMessage<CGameServers_IPsWithSteamIDs_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 1);

/**
 * @generated from message CGameServers_IPsWithSteamIDs_Response.Server
 */
export type CGameServers_IPsWithSteamIDs_Response_Server = Message<"CGameServers_IPsWithSteamIDs_Response.Server"> & {
  /**
   * @generated from field: optional string addr = 1;
   */
  addr: string;

  /**
   * @generated from field: optional fixed64 steamid = 2;
   */
  steamid: bigint;
};

/**
 * Describes the message CGameServers_IPsWithSteamIDs_Response.Server.
 * Use `create(CGameServers_IPsWithSteamIDs_Response_ServerSchema)` to create a new message.
 */
export const CGameServers_IPsWithSteamIDs_Response_ServerSchema: GenMessage<CGameServers_IPsWithSteamIDs_Response_Server> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 1, 0);

/**
 * @generated from message CGameServers_GetServerIPsBySteamID_Request
 */
export type CGameServers_GetServerIPsBySteamID_Request = Message<"CGameServers_GetServerIPsBySteamID_Request"> & {
  /**
   * @generated from field: repeated fixed64 server_steamids = 1;
   */
  serverSteamids: bigint[];
};

/**
 * Describes the message CGameServers_GetServerIPsBySteamID_Request.
 * Use `create(CGameServers_GetServerIPsBySteamID_RequestSchema)` to create a new message.
 */
export const CGameServers_GetServerIPsBySteamID_RequestSchema: GenMessage<CGameServers_GetServerIPsBySteamID_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 2);

/**
 * @generated from message CGameServers_QueryByFakeIP_Request
 */
export type CGameServers_QueryByFakeIP_Request = Message<"CGameServers_QueryByFakeIP_Request"> & {
  /**
   * @generated from field: optional uint32 fake_ip = 1;
   */
  fakeIp: number;

  /**
   * @generated from field: optional uint32 fake_port = 2;
   */
  fakePort: number;

  /**
   * @generated from field: optional uint32 app_id = 3;
   */
  appId: number;

  /**
   * @generated from field: optional CGameServers_QueryByFakeIP_Request.EQueryType query_type = 4 [default = Query_Invalid];
   */
  queryType: CGameServers_QueryByFakeIP_Request_EQueryType;
};

/**
 * Describes the message CGameServers_QueryByFakeIP_Request.
 * Use `create(CGameServers_QueryByFakeIP_RequestSchema)` to create a new message.
 */
export const CGameServers_QueryByFakeIP_RequestSchema: GenMessage<CGameServers_QueryByFakeIP_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 3);

/**
 * @generated from enum CGameServers_QueryByFakeIP_Request.EQueryType
 */
export enum CGameServers_QueryByFakeIP_Request_EQueryType {
  /**
   * @generated from enum value: Query_Invalid = 0;
   */
  Query_Invalid = 0,

  /**
   * @generated from enum value: Query_Ping = 1;
   */
  Query_Ping = 1,

  /**
   * @generated from enum value: Query_Players = 2;
   */
  Query_Players = 2,

  /**
   * @generated from enum value: Query_Rules = 3;
   */
  Query_Rules = 3,
}

/**
 * Describes the enum CGameServers_QueryByFakeIP_Request.EQueryType.
 */
export const CGameServers_QueryByFakeIP_Request_EQueryTypeSchema: GenEnum<CGameServers_QueryByFakeIP_Request_EQueryType> = /*@__PURE__*/
  enumDesc(file_steammessages_gameservers_steamclient, 3, 0);

/**
 * @generated from message CMsgGameServerPingQueryData
 */
export type CMsgGameServerPingQueryData = Message<"CMsgGameServerPingQueryData"> & {
  /**
   * @generated from field: optional CMsgIPAddress server_ip = 1;
   */
  serverIp?: CMsgIPAddress;

  /**
   * @generated from field: optional uint32 query_port = 2;
   */
  queryPort: number;

  /**
   * @generated from field: optional uint32 game_port = 3;
   */
  gamePort: number;

  /**
   * @generated from field: optional uint32 spectator_port = 4;
   */
  spectatorPort: number;

  /**
   * @generated from field: optional string spectator_server_name = 5;
   */
  spectatorServerName: string;

  /**
   * @generated from field: optional string server_name = 6;
   */
  serverName: string;

  /**
   * @generated from field: optional fixed64 steamid = 7;
   */
  steamid: bigint;

  /**
   * @generated from field: optional uint32 app_id = 8;
   */
  appId: number;

  /**
   * @generated from field: optional string gamedir = 9;
   */
  gamedir: string;

  /**
   * @generated from field: optional string map = 10;
   */
  map: string;

  /**
   * @generated from field: optional string game_description = 11;
   */
  gameDescription: string;

  /**
   * @generated from field: optional string gametype = 12;
   */
  gametype: string;

  /**
   * @generated from field: optional uint32 num_players = 13;
   */
  numPlayers: number;

  /**
   * @generated from field: optional uint32 max_players = 14;
   */
  maxPlayers: number;

  /**
   * @generated from field: optional uint32 num_bots = 15;
   */
  numBots: number;

  /**
   * @generated from field: optional bool password = 16;
   */
  password: boolean;

  /**
   * @generated from field: optional bool secure = 17;
   */
  secure: boolean;

  /**
   * @generated from field: optional bool dedicated = 18;
   */
  dedicated: boolean;

  /**
   * @generated from field: optional string version = 19;
   */
  version: string;

  /**
   * @generated from field: optional fixed32 sdr_popid = 20;
   */
  sdrPopid: number;

  /**
   * @generated from field: optional string sdr_location_string = 21;
   */
  sdrLocationString: string;
};

/**
 * Describes the message CMsgGameServerPingQueryData.
 * Use `create(CMsgGameServerPingQueryDataSchema)` to create a new message.
 */
export const CMsgGameServerPingQueryDataSchema: GenMessage<CMsgGameServerPingQueryData> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 4);

/**
 * @generated from message CMsgGameServerPlayersQueryData
 */
export type CMsgGameServerPlayersQueryData = Message<"CMsgGameServerPlayersQueryData"> & {
  /**
   * @generated from field: repeated CMsgGameServerPlayersQueryData.Player players = 1;
   */
  players: CMsgGameServerPlayersQueryData_Player[];
};

/**
 * Describes the message CMsgGameServerPlayersQueryData.
 * Use `create(CMsgGameServerPlayersQueryDataSchema)` to create a new message.
 */
export const CMsgGameServerPlayersQueryDataSchema: GenMessage<CMsgGameServerPlayersQueryData> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 5);

/**
 * @generated from message CMsgGameServerPlayersQueryData.Player
 */
export type CMsgGameServerPlayersQueryData_Player = Message<"CMsgGameServerPlayersQueryData.Player"> & {
  /**
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * @generated from field: optional uint32 score = 2;
   */
  score: number;

  /**
   * @generated from field: optional uint32 time_played = 3;
   */
  timePlayed: number;
};

/**
 * Describes the message CMsgGameServerPlayersQueryData.Player.
 * Use `create(CMsgGameServerPlayersQueryData_PlayerSchema)` to create a new message.
 */
export const CMsgGameServerPlayersQueryData_PlayerSchema: GenMessage<CMsgGameServerPlayersQueryData_Player> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 5, 0);

/**
 * @generated from message CMsgGameServerRulesQueryData
 */
export type CMsgGameServerRulesQueryData = Message<"CMsgGameServerRulesQueryData"> & {
  /**
   * @generated from field: repeated CMsgGameServerRulesQueryData.Rule rules = 1;
   */
  rules: CMsgGameServerRulesQueryData_Rule[];
};

/**
 * Describes the message CMsgGameServerRulesQueryData.
 * Use `create(CMsgGameServerRulesQueryDataSchema)` to create a new message.
 */
export const CMsgGameServerRulesQueryDataSchema: GenMessage<CMsgGameServerRulesQueryData> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 6);

/**
 * @generated from message CMsgGameServerRulesQueryData.Rule
 */
export type CMsgGameServerRulesQueryData_Rule = Message<"CMsgGameServerRulesQueryData.Rule"> & {
  /**
   * @generated from field: optional string rule = 1;
   */
  rule: string;

  /**
   * @generated from field: optional string value = 2;
   */
  value: string;
};

/**
 * Describes the message CMsgGameServerRulesQueryData.Rule.
 * Use `create(CMsgGameServerRulesQueryData_RuleSchema)` to create a new message.
 */
export const CMsgGameServerRulesQueryData_RuleSchema: GenMessage<CMsgGameServerRulesQueryData_Rule> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 6, 0);

/**
 * @generated from message CGameServers_GameServerQuery_Response
 */
export type CGameServers_GameServerQuery_Response = Message<"CGameServers_GameServerQuery_Response"> & {
  /**
   * @generated from field: optional CMsgGameServerPingQueryData ping_data = 1;
   */
  pingData?: CMsgGameServerPingQueryData;

  /**
   * @generated from field: optional CMsgGameServerPlayersQueryData players_data = 2;
   */
  playersData?: CMsgGameServerPlayersQueryData;

  /**
   * @generated from field: optional CMsgGameServerRulesQueryData rules_data = 3;
   */
  rulesData?: CMsgGameServerRulesQueryData;
};

/**
 * Describes the message CGameServers_GameServerQuery_Response.
 * Use `create(CGameServers_GameServerQuery_ResponseSchema)` to create a new message.
 */
export const CGameServers_GameServerQuery_ResponseSchema: GenMessage<CGameServers_GameServerQuery_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 7);

/**
 * @generated from message CGameServers_ReportServerPingReply_Notification
 */
export type CGameServers_ReportServerPingReply_Notification = Message<"CGameServers_ReportServerPingReply_Notification"> & {
  /**
   * @generated from field: optional CMsgGameServerPingQueryData server_data = 1;
   */
  serverData?: CMsgGameServerPingQueryData;

  /**
   * @generated from field: optional uint32 ping_ms = 2;
   */
  pingMs: number;

  /**
   * @generated from field: optional string client_sdr_location_string = 3;
   */
  clientSdrLocationString: string;
};

/**
 * Describes the message CGameServers_ReportServerPingReply_Notification.
 * Use `create(CGameServers_ReportServerPingReply_NotificationSchema)` to create a new message.
 */
export const CGameServers_ReportServerPingReply_NotificationSchema: GenMessage<CGameServers_ReportServerPingReply_Notification> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 8);

/**
 * @generated from message GameServerClient_QueryServerData_Request
 */
export type GameServerClient_QueryServerData_Request = Message<"GameServerClient_QueryServerData_Request"> & {
};

/**
 * Describes the message GameServerClient_QueryServerData_Request.
 * Use `create(GameServerClient_QueryServerData_RequestSchema)` to create a new message.
 */
export const GameServerClient_QueryServerData_RequestSchema: GenMessage<GameServerClient_QueryServerData_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 9);

/**
 * @generated from message GameServerClient_QueryServerData_Response
 */
export type GameServerClient_QueryServerData_Response = Message<"GameServerClient_QueryServerData_Response"> & {
  /**
   * @generated from field: optional CMsgGameServerPingQueryData ping_data = 1;
   */
  pingData?: CMsgGameServerPingQueryData;

  /**
   * @generated from field: optional CMsgGameServerPlayersQueryData players_data = 2;
   */
  playersData?: CMsgGameServerPlayersQueryData;

  /**
   * @generated from field: optional CMsgGameServerRulesQueryData rules_data = 3;
   */
  rulesData?: CMsgGameServerRulesQueryData;
};

/**
 * Describes the message GameServerClient_QueryServerData_Response.
 * Use `create(GameServerClient_QueryServerData_ResponseSchema)` to create a new message.
 */
export const GameServerClient_QueryServerData_ResponseSchema: GenMessage<GameServerClient_QueryServerData_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_gameservers_steamclient, 10);

/**
 * @generated from service GameServers
 */
export const GameServers: GenService<{
  /**
   * @generated from rpc GameServers.GetServerSteamIDsByIP
   */
  getServerSteamIDsByIP: {
    methodKind: "unary";
    input: typeof CGameServers_GetServerSteamIDsByIP_RequestSchema;
    output: typeof CGameServers_IPsWithSteamIDs_ResponseSchema;
  },
  /**
   * @generated from rpc GameServers.GetServerIPsBySteamID
   */
  getServerIPsBySteamID: {
    methodKind: "unary";
    input: typeof CGameServers_GetServerIPsBySteamID_RequestSchema;
    output: typeof CGameServers_IPsWithSteamIDs_ResponseSchema;
  },
  /**
   * @generated from rpc GameServers.QueryByFakeIP
   */
  queryByFakeIP: {
    methodKind: "unary";
    input: typeof CGameServers_QueryByFakeIP_RequestSchema;
    output: typeof CGameServers_GameServerQuery_ResponseSchema;
  },
  /**
   * @generated from rpc GameServers.ReportServerPingReply
   */
  reportServerPingReply: {
    methodKind: "unary";
    input: typeof CGameServers_ReportServerPingReply_NotificationSchema;
    output: typeof NoResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_steammessages_gameservers_steamclient, 0);

/**
 * @generated from service GameServerClient
 */
export const GameServerClient: GenService<{
  /**
   * @generated from rpc GameServerClient.QueryServerData
   */
  queryServerData: {
    methodKind: "unary";
    input: typeof GameServerClient_QueryServerData_RequestSchema;
    output: typeof GameServerClient_QueryServerData_ResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_steammessages_gameservers_steamclient, 1);

