// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file steammessages_hiddevices.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file steammessages_hiddevices.proto.
 */
export const file_steammessages_hiddevices: GenFile = /*@__PURE__*/
  fileDesc("Ch5zdGVhbW1lc3NhZ2VzX2hpZGRldmljZXMucHJvdG8izgQKDkNISUREZXZpY2VJbmZvEj0KCGxvY2F0aW9uGAEgASgOMhMuRUhJRERldmljZUxvY2F0aW9uOhZrX0VEZXZpY2VMb2NhdGlvbkxvY2FsEgwKBHBhdGgYAiABKAkSEQoJdmVuZG9yX2lkGAMgASgNEhIKCnByb2R1Y3RfaWQYBCABKA0SFQoNc2VyaWFsX251bWJlchgFIAEoCRIWCg5yZWxlYXNlX251bWJlchgGIAEoDRIbChNtYW51ZmFjdHVyZXJfc3RyaW5nGAcgASgJEhYKDnByb2R1Y3Rfc3RyaW5nGAggASgJEhIKCnVzYWdlX3BhZ2UYCSABKA0SDQoFdXNhZ2UYCiABKA0SHAoQaW50ZXJmYWNlX251bWJlchgLIAEoBToCLTESEgoGb3N0eXBlGAwgASgFOgItMRIaChJpc19nZW5lcmljX2dhbWVwYWQYDSABKAgSGwoTaXNfZ2VuZXJpY19qb3lzdGljaxgOIAEoCBIRCgljYXBzX2JpdHMYDyABKA0SEgoKc2Vzc2lvbl9pZBgQIAEoDRIjChhlQ29udHJvbGxlclR5cGVfT0JTT0xFVEUYESABKA06ATASKAoZaXNfeGlucHV0X2RldmljZV9PQlNPTEVURRgSIAEoCDoFZmFsc2USKgoic2Vzc2lvbl9yZW1vdGVfcGxheV90b2dldGhlcl9hcHBpZBgTIAEoDRIgChFpc19zdGVhbXZyX2RldmljZRgUIAEoCDoFZmFsc2USEgoKY2Fwc19iaXRzMhgVIAEoDSJ3ChVDSElERGV2aWNlSW5wdXRSZXBvcnQSEwoLZnVsbF9yZXBvcnQYASABKAwSFAoMZGVsdGFfcmVwb3J0GAIgASgMEhkKEWRlbHRhX3JlcG9ydF9zaXplGAMgASgNEhgKEGRlbHRhX3JlcG9ydF9jcmMYBCABKA0i4gwKE0NISURNZXNzYWdlVG9SZW1vdGUSEgoKcmVxdWVzdF9pZBgBIAEoDRI2CgtkZXZpY2Vfb3BlbhgCIAEoCzIfLkNISURNZXNzYWdlVG9SZW1vdGUuRGV2aWNlT3BlbkgAEjgKDGRldmljZV9jbG9zZRgDIAEoCzIgLkNISURNZXNzYWdlVG9SZW1vdGUuRGV2aWNlQ2xvc2VIABI4CgxkZXZpY2Vfd3JpdGUYBCABKAsyIC5DSElETWVzc2FnZVRvUmVtb3RlLkRldmljZVdyaXRlSAASNgoLZGV2aWNlX3JlYWQYBSABKAsyHy5DSElETWVzc2FnZVRvUmVtb3RlLkRldmljZVJlYWRIABJSChpkZXZpY2Vfc2VuZF9mZWF0dXJlX3JlcG9ydBgGIAEoCzIsLkNISURNZXNzYWdlVG9SZW1vdGUuRGV2aWNlU2VuZEZlYXR1cmVSZXBvcnRIABJQChlkZXZpY2VfZ2V0X2ZlYXR1cmVfcmVwb3J0GAcgASgLMisuQ0hJRE1lc3NhZ2VUb1JlbW90ZS5EZXZpY2VHZXRGZWF0dXJlUmVwb3J0SAASTgoYZGV2aWNlX2dldF92ZW5kb3Jfc3RyaW5nGAggASgLMiouQ0hJRE1lc3NhZ2VUb1JlbW90ZS5EZXZpY2VHZXRWZW5kb3JTdHJpbmdIABJQChlkZXZpY2VfZ2V0X3Byb2R1Y3Rfc3RyaW5nGAkgASgLMisuQ0hJRE1lc3NhZ2VUb1JlbW90ZS5EZXZpY2VHZXRQcm9kdWN0U3RyaW5nSAASWwofZGV2aWNlX2dldF9zZXJpYWxfbnVtYmVyX3N0cmluZxgKIAEoCzIwLkNISURNZXNzYWdlVG9SZW1vdGUuRGV2aWNlR2V0U2VyaWFsTnVtYmVyU3RyaW5nSAASUgoaZGV2aWNlX3N0YXJ0X2lucHV0X3JlcG9ydHMYCyABKAsyLC5DSElETWVzc2FnZVRvUmVtb3RlLkRldmljZVN0YXJ0SW5wdXRSZXBvcnRzSAASUgoaZGV2aWNlX3JlcXVlc3RfZnVsbF9yZXBvcnQYDCABKAsyLC5DSElETWVzc2FnZVRvUmVtb3RlLkRldmljZVJlcXVlc3RGdWxsUmVwb3J0SAASQgoRZGV2aWNlX2Rpc2Nvbm5lY3QYDSABKAsyJS5DSElETWVzc2FnZVRvUmVtb3RlLkRldmljZURpc2Nvbm5lY3RIABorCgpEZXZpY2VPcGVuEh0KBGluZm8YASABKAsyDy5DSElERGV2aWNlSW5mbxodCgtEZXZpY2VDbG9zZRIOCgZkZXZpY2UYASABKA0aKwoLRGV2aWNlV3JpdGUSDgoGZGV2aWNlGAEgASgNEgwKBGRhdGEYAiABKAwaQAoKRGV2aWNlUmVhZBIOCgZkZXZpY2UYASABKA0SDgoGbGVuZ3RoGAIgASgNEhIKCnRpbWVvdXRfbXMYAyABKAUaNwoXRGV2aWNlU2VuZEZlYXR1cmVSZXBvcnQSDgoGZGV2aWNlGAEgASgNEgwKBGRhdGEYAiABKAwaTwoWRGV2aWNlR2V0RmVhdHVyZVJlcG9ydBIOCgZkZXZpY2UYASABKA0SFQoNcmVwb3J0X251bWJlchgCIAEoDBIOCgZsZW5ndGgYAyABKA0aJwoVRGV2aWNlR2V0VmVuZG9yU3RyaW5nEg4KBmRldmljZRgBIAEoDRooChZEZXZpY2VHZXRQcm9kdWN0U3RyaW5nEg4KBmRldmljZRgBIAEoDRotChtEZXZpY2VHZXRTZXJpYWxOdW1iZXJTdHJpbmcSDgoGZGV2aWNlGAEgASgNGjkKF0RldmljZVN0YXJ0SW5wdXRSZXBvcnRzEg4KBmRldmljZRgBIAEoDRIOCgZsZW5ndGgYAiABKA0aKQoXRGV2aWNlUmVxdWVzdEZ1bGxSZXBvcnQSDgoGZGV2aWNlGAEgASgNGokBChBEZXZpY2VEaXNjb25uZWN0Eg4KBmRldmljZRgBIAEoDRJXChBkaXNjb25uZWN0TWV0aG9kGAIgASgOMhsuRUhJRERldmljZURpc2Nvbm5lY3RNZXRob2Q6IGtfRURldmljZURpc2Nvbm5lY3RNZXRob2RVbmtub3duEgwKBGRhdGEYAyABKAxCCQoHY29tbWFuZCLLBQoVQ0hJRE1lc3NhZ2VGcm9tUmVtb3RlEkUKEnVwZGF0ZV9kZXZpY2VfbGlzdBgBIAEoCzInLkNISURNZXNzYWdlRnJvbVJlbW90ZS5VcGRhdGVEZXZpY2VMaXN0SAASOgoIcmVzcG9uc2UYAiABKAsyJi5DSElETWVzc2FnZUZyb21SZW1vdGUuUmVxdWVzdFJlc3BvbnNlSAASPAoHcmVwb3J0cxgDIAEoCzIpLkNISURNZXNzYWdlRnJvbVJlbW90ZS5EZXZpY2VJbnB1dFJlcG9ydHNIABI6CgxjbG9zZV9kZXZpY2UYBCABKAsyIi5DSElETWVzc2FnZUZyb21SZW1vdGUuQ2xvc2VEZXZpY2VIABJDChFjbG9zZV9hbGxfZGV2aWNlcxgFIAEoCzImLkNISURNZXNzYWdlRnJvbVJlbW90ZS5DbG9zZUFsbERldmljZXNIABo0ChBVcGRhdGVEZXZpY2VMaXN0EiAKB2RldmljZXMYASADKAsyDy5DSElERGV2aWNlSW5mbxpDCg9SZXF1ZXN0UmVzcG9uc2USEgoKcmVxdWVzdF9pZBgBIAEoDRIOCgZyZXN1bHQYAiABKAUSDAoEZGF0YRgDIAEoDBq3AQoSRGV2aWNlSW5wdXRSZXBvcnRzElMKDmRldmljZV9yZXBvcnRzGAEgAygLMjsuQ0hJRE1lc3NhZ2VGcm9tUmVtb3RlLkRldmljZUlucHV0UmVwb3J0cy5EZXZpY2VJbnB1dFJlcG9ydBpMChFEZXZpY2VJbnB1dFJlcG9ydBIOCgZkZXZpY2UYASABKA0SJwoHcmVwb3J0cxgCIAMoCzIWLkNISUREZXZpY2VJbnB1dFJlcG9ydBodCgtDbG9zZURldmljZRIOCgZkZXZpY2UYASABKA0aEQoPQ2xvc2VBbGxEZXZpY2VzQgkKB2NvbW1hbmQqZwoSRUhJRERldmljZUxvY2F0aW9uEhoKFmtfRURldmljZUxvY2F0aW9uTG9jYWwQABIbChdrX0VEZXZpY2VMb2NhdGlvblJlbW90ZRACEhgKFGtfRURldmljZUxvY2F0aW9uQW55EAMqwQEKGkVISUREZXZpY2VEaXNjb25uZWN0TWV0aG9kEiQKIGtfRURldmljZURpc2Nvbm5lY3RNZXRob2RVbmtub3duEAASJgoia19FRGV2aWNlRGlzY29ubmVjdE1ldGhvZEJsdWV0b290aBABEioKJmtfRURldmljZURpc2Nvbm5lY3RNZXRob2RGZWF0dXJlUmVwb3J0EAISKQola19FRGV2aWNlRGlzY29ubmVjdE1ldGhvZE91dHB1dFJlcG9ydBADQgVIAYABAA");

/**
 * @generated from message CHIDDeviceInfo
 */
export type CHIDDeviceInfo = Message<"CHIDDeviceInfo"> & {
  /**
   * @generated from field: optional EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
   */
  location: EHIDDeviceLocation;

  /**
   * @generated from field: optional string path = 2;
   */
  path: string;

  /**
   * @generated from field: optional uint32 vendor_id = 3;
   */
  vendorId: number;

  /**
   * @generated from field: optional uint32 product_id = 4;
   */
  productId: number;

  /**
   * @generated from field: optional string serial_number = 5;
   */
  serialNumber: string;

  /**
   * @generated from field: optional uint32 release_number = 6;
   */
  releaseNumber: number;

  /**
   * @generated from field: optional string manufacturer_string = 7;
   */
  manufacturerString: string;

  /**
   * @generated from field: optional string product_string = 8;
   */
  productString: string;

  /**
   * @generated from field: optional uint32 usage_page = 9;
   */
  usagePage: number;

  /**
   * @generated from field: optional uint32 usage = 10;
   */
  usage: number;

  /**
   * @generated from field: optional int32 interface_number = 11 [default = -1];
   */
  interfaceNumber: number;

  /**
   * @generated from field: optional int32 ostype = 12 [default = -1];
   */
  ostype: number;

  /**
   * @generated from field: optional bool is_generic_gamepad = 13;
   */
  isGenericGamepad: boolean;

  /**
   * @generated from field: optional bool is_generic_joystick = 14;
   */
  isGenericJoystick: boolean;

  /**
   * @generated from field: optional uint32 caps_bits = 15;
   */
  capsBits: number;

  /**
   * @generated from field: optional uint32 session_id = 16;
   */
  sessionId: number;

  /**
   * @generated from field: optional uint32 eControllerType_OBSOLETE = 17 [default = 0];
   */
  eControllerTypeOBSOLETE: number;

  /**
   * @generated from field: optional bool is_xinput_device_OBSOLETE = 18 [default = false];
   */
  isXinputDeviceOBSOLETE: boolean;

  /**
   * @generated from field: optional uint32 session_remote_play_together_appid = 19;
   */
  sessionRemotePlayTogetherAppid: number;

  /**
   * @generated from field: optional bool is_steamvr_device = 20 [default = false];
   */
  isSteamvrDevice: boolean;

  /**
   * @generated from field: optional uint32 caps_bits2 = 21;
   */
  capsBits2: number;
};

/**
 * Describes the message CHIDDeviceInfo.
 * Use `create(CHIDDeviceInfoSchema)` to create a new message.
 */
export const CHIDDeviceInfoSchema: GenMessage<CHIDDeviceInfo> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 0);

/**
 * @generated from message CHIDDeviceInputReport
 */
export type CHIDDeviceInputReport = Message<"CHIDDeviceInputReport"> & {
  /**
   * @generated from field: optional bytes full_report = 1;
   */
  fullReport: Uint8Array;

  /**
   * @generated from field: optional bytes delta_report = 2;
   */
  deltaReport: Uint8Array;

  /**
   * @generated from field: optional uint32 delta_report_size = 3;
   */
  deltaReportSize: number;

  /**
   * @generated from field: optional uint32 delta_report_crc = 4;
   */
  deltaReportCrc: number;
};

/**
 * Describes the message CHIDDeviceInputReport.
 * Use `create(CHIDDeviceInputReportSchema)` to create a new message.
 */
export const CHIDDeviceInputReportSchema: GenMessage<CHIDDeviceInputReport> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 1);

/**
 * @generated from message CHIDMessageToRemote
 */
export type CHIDMessageToRemote = Message<"CHIDMessageToRemote"> & {
  /**
   * @generated from field: optional uint32 request_id = 1;
   */
  requestId: number;

  /**
   * @generated from oneof CHIDMessageToRemote.command
   */
  command: {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceOpen device_open = 2;
     */
    value: CHIDMessageToRemote_DeviceOpen;
    case: "deviceOpen";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceClose device_close = 3;
     */
    value: CHIDMessageToRemote_DeviceClose;
    case: "deviceClose";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceWrite device_write = 4;
     */
    value: CHIDMessageToRemote_DeviceWrite;
    case: "deviceWrite";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceRead device_read = 5;
     */
    value: CHIDMessageToRemote_DeviceRead;
    case: "deviceRead";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
     */
    value: CHIDMessageToRemote_DeviceSendFeatureReport;
    case: "deviceSendFeatureReport";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
     */
    value: CHIDMessageToRemote_DeviceGetFeatureReport;
    case: "deviceGetFeatureReport";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
     */
    value: CHIDMessageToRemote_DeviceGetVendorString;
    case: "deviceGetVendorString";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
     */
    value: CHIDMessageToRemote_DeviceGetProductString;
    case: "deviceGetProductString";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
     */
    value: CHIDMessageToRemote_DeviceGetSerialNumberString;
    case: "deviceGetSerialNumberString";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
     */
    value: CHIDMessageToRemote_DeviceStartInputReports;
    case: "deviceStartInputReports";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
     */
    value: CHIDMessageToRemote_DeviceRequestFullReport;
    case: "deviceRequestFullReport";
  } | {
    /**
     * @generated from field: CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
     */
    value: CHIDMessageToRemote_DeviceDisconnect;
    case: "deviceDisconnect";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message CHIDMessageToRemote.
 * Use `create(CHIDMessageToRemoteSchema)` to create a new message.
 */
export const CHIDMessageToRemoteSchema: GenMessage<CHIDMessageToRemote> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2);

/**
 * @generated from message CHIDMessageToRemote.DeviceOpen
 */
export type CHIDMessageToRemote_DeviceOpen = Message<"CHIDMessageToRemote.DeviceOpen"> & {
  /**
   * @generated from field: optional CHIDDeviceInfo info = 1;
   */
  info?: CHIDDeviceInfo;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceOpen.
 * Use `create(CHIDMessageToRemote_DeviceOpenSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceOpenSchema: GenMessage<CHIDMessageToRemote_DeviceOpen> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 0);

/**
 * @generated from message CHIDMessageToRemote.DeviceClose
 */
export type CHIDMessageToRemote_DeviceClose = Message<"CHIDMessageToRemote.DeviceClose"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceClose.
 * Use `create(CHIDMessageToRemote_DeviceCloseSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceCloseSchema: GenMessage<CHIDMessageToRemote_DeviceClose> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 1);

/**
 * @generated from message CHIDMessageToRemote.DeviceWrite
 */
export type CHIDMessageToRemote_DeviceWrite = Message<"CHIDMessageToRemote.DeviceWrite"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;

  /**
   * @generated from field: optional bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceWrite.
 * Use `create(CHIDMessageToRemote_DeviceWriteSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceWriteSchema: GenMessage<CHIDMessageToRemote_DeviceWrite> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 2);

/**
 * @generated from message CHIDMessageToRemote.DeviceRead
 */
export type CHIDMessageToRemote_DeviceRead = Message<"CHIDMessageToRemote.DeviceRead"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;

  /**
   * @generated from field: optional uint32 length = 2;
   */
  length: number;

  /**
   * @generated from field: optional int32 timeout_ms = 3;
   */
  timeoutMs: number;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceRead.
 * Use `create(CHIDMessageToRemote_DeviceReadSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceReadSchema: GenMessage<CHIDMessageToRemote_DeviceRead> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 3);

/**
 * @generated from message CHIDMessageToRemote.DeviceSendFeatureReport
 */
export type CHIDMessageToRemote_DeviceSendFeatureReport = Message<"CHIDMessageToRemote.DeviceSendFeatureReport"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;

  /**
   * @generated from field: optional bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceSendFeatureReport.
 * Use `create(CHIDMessageToRemote_DeviceSendFeatureReportSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceSendFeatureReportSchema: GenMessage<CHIDMessageToRemote_DeviceSendFeatureReport> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 4);

/**
 * @generated from message CHIDMessageToRemote.DeviceGetFeatureReport
 */
export type CHIDMessageToRemote_DeviceGetFeatureReport = Message<"CHIDMessageToRemote.DeviceGetFeatureReport"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;

  /**
   * @generated from field: optional bytes report_number = 2;
   */
  reportNumber: Uint8Array;

  /**
   * @generated from field: optional uint32 length = 3;
   */
  length: number;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceGetFeatureReport.
 * Use `create(CHIDMessageToRemote_DeviceGetFeatureReportSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceGetFeatureReportSchema: GenMessage<CHIDMessageToRemote_DeviceGetFeatureReport> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 5);

/**
 * @generated from message CHIDMessageToRemote.DeviceGetVendorString
 */
export type CHIDMessageToRemote_DeviceGetVendorString = Message<"CHIDMessageToRemote.DeviceGetVendorString"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceGetVendorString.
 * Use `create(CHIDMessageToRemote_DeviceGetVendorStringSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceGetVendorStringSchema: GenMessage<CHIDMessageToRemote_DeviceGetVendorString> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 6);

/**
 * @generated from message CHIDMessageToRemote.DeviceGetProductString
 */
export type CHIDMessageToRemote_DeviceGetProductString = Message<"CHIDMessageToRemote.DeviceGetProductString"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceGetProductString.
 * Use `create(CHIDMessageToRemote_DeviceGetProductStringSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceGetProductStringSchema: GenMessage<CHIDMessageToRemote_DeviceGetProductString> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 7);

/**
 * @generated from message CHIDMessageToRemote.DeviceGetSerialNumberString
 */
export type CHIDMessageToRemote_DeviceGetSerialNumberString = Message<"CHIDMessageToRemote.DeviceGetSerialNumberString"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceGetSerialNumberString.
 * Use `create(CHIDMessageToRemote_DeviceGetSerialNumberStringSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceGetSerialNumberStringSchema: GenMessage<CHIDMessageToRemote_DeviceGetSerialNumberString> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 8);

/**
 * @generated from message CHIDMessageToRemote.DeviceStartInputReports
 */
export type CHIDMessageToRemote_DeviceStartInputReports = Message<"CHIDMessageToRemote.DeviceStartInputReports"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;

  /**
   * @generated from field: optional uint32 length = 2;
   */
  length: number;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceStartInputReports.
 * Use `create(CHIDMessageToRemote_DeviceStartInputReportsSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceStartInputReportsSchema: GenMessage<CHIDMessageToRemote_DeviceStartInputReports> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 9);

/**
 * @generated from message CHIDMessageToRemote.DeviceRequestFullReport
 */
export type CHIDMessageToRemote_DeviceRequestFullReport = Message<"CHIDMessageToRemote.DeviceRequestFullReport"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceRequestFullReport.
 * Use `create(CHIDMessageToRemote_DeviceRequestFullReportSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceRequestFullReportSchema: GenMessage<CHIDMessageToRemote_DeviceRequestFullReport> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 10);

/**
 * @generated from message CHIDMessageToRemote.DeviceDisconnect
 */
export type CHIDMessageToRemote_DeviceDisconnect = Message<"CHIDMessageToRemote.DeviceDisconnect"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;

  /**
   * @generated from field: optional EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
   */
  disconnectMethod: EHIDDeviceDisconnectMethod;

  /**
   * @generated from field: optional bytes data = 3;
   */
  data: Uint8Array;
};

/**
 * Describes the message CHIDMessageToRemote.DeviceDisconnect.
 * Use `create(CHIDMessageToRemote_DeviceDisconnectSchema)` to create a new message.
 */
export const CHIDMessageToRemote_DeviceDisconnectSchema: GenMessage<CHIDMessageToRemote_DeviceDisconnect> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 2, 11);

/**
 * @generated from message CHIDMessageFromRemote
 */
export type CHIDMessageFromRemote = Message<"CHIDMessageFromRemote"> & {
  /**
   * @generated from oneof CHIDMessageFromRemote.command
   */
  command: {
    /**
     * @generated from field: CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
     */
    value: CHIDMessageFromRemote_UpdateDeviceList;
    case: "updateDeviceList";
  } | {
    /**
     * @generated from field: CHIDMessageFromRemote.RequestResponse response = 2;
     */
    value: CHIDMessageFromRemote_RequestResponse;
    case: "response";
  } | {
    /**
     * @generated from field: CHIDMessageFromRemote.DeviceInputReports reports = 3;
     */
    value: CHIDMessageFromRemote_DeviceInputReports;
    case: "reports";
  } | {
    /**
     * @generated from field: CHIDMessageFromRemote.CloseDevice close_device = 4;
     */
    value: CHIDMessageFromRemote_CloseDevice;
    case: "closeDevice";
  } | {
    /**
     * @generated from field: CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
     */
    value: CHIDMessageFromRemote_CloseAllDevices;
    case: "closeAllDevices";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message CHIDMessageFromRemote.
 * Use `create(CHIDMessageFromRemoteSchema)` to create a new message.
 */
export const CHIDMessageFromRemoteSchema: GenMessage<CHIDMessageFromRemote> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 3);

/**
 * @generated from message CHIDMessageFromRemote.UpdateDeviceList
 */
export type CHIDMessageFromRemote_UpdateDeviceList = Message<"CHIDMessageFromRemote.UpdateDeviceList"> & {
  /**
   * @generated from field: repeated CHIDDeviceInfo devices = 1;
   */
  devices: CHIDDeviceInfo[];
};

/**
 * Describes the message CHIDMessageFromRemote.UpdateDeviceList.
 * Use `create(CHIDMessageFromRemote_UpdateDeviceListSchema)` to create a new message.
 */
export const CHIDMessageFromRemote_UpdateDeviceListSchema: GenMessage<CHIDMessageFromRemote_UpdateDeviceList> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 3, 0);

/**
 * @generated from message CHIDMessageFromRemote.RequestResponse
 */
export type CHIDMessageFromRemote_RequestResponse = Message<"CHIDMessageFromRemote.RequestResponse"> & {
  /**
   * @generated from field: optional uint32 request_id = 1;
   */
  requestId: number;

  /**
   * @generated from field: optional int32 result = 2;
   */
  result: number;

  /**
   * @generated from field: optional bytes data = 3;
   */
  data: Uint8Array;
};

/**
 * Describes the message CHIDMessageFromRemote.RequestResponse.
 * Use `create(CHIDMessageFromRemote_RequestResponseSchema)` to create a new message.
 */
export const CHIDMessageFromRemote_RequestResponseSchema: GenMessage<CHIDMessageFromRemote_RequestResponse> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 3, 1);

/**
 * @generated from message CHIDMessageFromRemote.DeviceInputReports
 */
export type CHIDMessageFromRemote_DeviceInputReports = Message<"CHIDMessageFromRemote.DeviceInputReports"> & {
  /**
   * @generated from field: repeated CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
   */
  deviceReports: CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport[];
};

/**
 * Describes the message CHIDMessageFromRemote.DeviceInputReports.
 * Use `create(CHIDMessageFromRemote_DeviceInputReportsSchema)` to create a new message.
 */
export const CHIDMessageFromRemote_DeviceInputReportsSchema: GenMessage<CHIDMessageFromRemote_DeviceInputReports> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 3, 2);

/**
 * @generated from message CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport
 */
export type CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport = Message<"CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;

  /**
   * @generated from field: repeated CHIDDeviceInputReport reports = 2;
   */
  reports: CHIDDeviceInputReport[];
};

/**
 * Describes the message CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.
 * Use `create(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportSchema)` to create a new message.
 */
export const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportSchema: GenMessage<CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 3, 2, 0);

/**
 * @generated from message CHIDMessageFromRemote.CloseDevice
 */
export type CHIDMessageFromRemote_CloseDevice = Message<"CHIDMessageFromRemote.CloseDevice"> & {
  /**
   * @generated from field: optional uint32 device = 1;
   */
  device: number;
};

/**
 * Describes the message CHIDMessageFromRemote.CloseDevice.
 * Use `create(CHIDMessageFromRemote_CloseDeviceSchema)` to create a new message.
 */
export const CHIDMessageFromRemote_CloseDeviceSchema: GenMessage<CHIDMessageFromRemote_CloseDevice> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 3, 3);

/**
 * @generated from message CHIDMessageFromRemote.CloseAllDevices
 */
export type CHIDMessageFromRemote_CloseAllDevices = Message<"CHIDMessageFromRemote.CloseAllDevices"> & {
};

/**
 * Describes the message CHIDMessageFromRemote.CloseAllDevices.
 * Use `create(CHIDMessageFromRemote_CloseAllDevicesSchema)` to create a new message.
 */
export const CHIDMessageFromRemote_CloseAllDevicesSchema: GenMessage<CHIDMessageFromRemote_CloseAllDevices> = /*@__PURE__*/
  messageDesc(file_steammessages_hiddevices, 3, 4);

/**
 * @generated from enum EHIDDeviceLocation
 */
export enum EHIDDeviceLocation {
  /**
   * @generated from enum value: k_EDeviceLocationLocal = 0;
   */
  k_EDeviceLocationLocal = 0,

  /**
   * @generated from enum value: k_EDeviceLocationRemote = 2;
   */
  k_EDeviceLocationRemote = 2,

  /**
   * @generated from enum value: k_EDeviceLocationAny = 3;
   */
  k_EDeviceLocationAny = 3,
}

/**
 * Describes the enum EHIDDeviceLocation.
 */
export const EHIDDeviceLocationSchema: GenEnum<EHIDDeviceLocation> = /*@__PURE__*/
  enumDesc(file_steammessages_hiddevices, 0);

/**
 * @generated from enum EHIDDeviceDisconnectMethod
 */
export enum EHIDDeviceDisconnectMethod {
  /**
   * @generated from enum value: k_EDeviceDisconnectMethodUnknown = 0;
   */
  k_EDeviceDisconnectMethodUnknown = 0,

  /**
   * @generated from enum value: k_EDeviceDisconnectMethodBluetooth = 1;
   */
  k_EDeviceDisconnectMethodBluetooth = 1,

  /**
   * @generated from enum value: k_EDeviceDisconnectMethodFeatureReport = 2;
   */
  k_EDeviceDisconnectMethodFeatureReport = 2,

  /**
   * @generated from enum value: k_EDeviceDisconnectMethodOutputReport = 3;
   */
  k_EDeviceDisconnectMethodOutputReport = 3,
}

/**
 * Describes the enum EHIDDeviceDisconnectMethod.
 */
export const EHIDDeviceDisconnectMethodSchema: GenEnum<EHIDDeviceDisconnectMethod> = /*@__PURE__*/
  enumDesc(file_steammessages_hiddevices, 1);

