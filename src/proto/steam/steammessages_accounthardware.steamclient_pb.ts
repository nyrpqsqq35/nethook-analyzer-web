// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file steammessages_accounthardware.steamclient.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_steammessages_base } from "./steammessages_base_pb";
import { file_steammessages_unified_base_steamclient } from "./steammessages_unified_base.steamclient_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file steammessages_accounthardware.steamclient.proto.
 */
export const file_steammessages_accounthardware_steamclient: GenFile = /*@__PURE__*/
  fileDesc("Ci9zdGVhbW1lc3NhZ2VzX2FjY291bnRoYXJkd2FyZS5zdGVhbWNsaWVudC5wcm90byJiCjBDQWNjb3VudEhhcmR3YXJlX1JlZ2lzdGVyU3RlYW1Db250cm9sbGVyX1JlcXVlc3QSFQoNc2VyaWFsX251bWJlchgBIAEoCRIXCg9jb250cm9sbGVyX2NvZGUYAiABKAkiMwoxQ0FjY291bnRIYXJkd2FyZV9SZWdpc3RlclN0ZWFtQ29udHJvbGxlcl9SZXNwb25zZSJuCjxDQWNjb3VudEhhcmR3YXJlX0NvbXBsZXRlU3RlYW1Db250cm9sbGVyUmVnaXN0cmF0aW9uX1JlcXVlc3QSFQoNc2VyaWFsX251bWJlchgBIAEoCRIXCg9jb250cm9sbGVyX2NvZGUYAiABKAkiPwo9Q0FjY291bnRIYXJkd2FyZV9Db21wbGV0ZVN0ZWFtQ29udHJvbGxlclJlZ2lzdHJhdGlvbl9SZXNwb25zZSJqCjhDQWNjb3VudEhhcmR3YXJlX1F1ZXJ5QWNjb3VudHNSZWdpc3RlcmVkVG9TZXJpYWxfUmVxdWVzdBIVCg1zZXJpYWxfbnVtYmVyGAEgASgJEhcKD2NvbnRyb2xsZXJfY29kZRgCIAEoCSJtCjlDQWNjb3VudEhhcmR3YXJlX1F1ZXJ5QWNjb3VudHNSZWdpc3RlcmVkVG9TZXJpYWxfQWNjb3VudHMSEQoJYWNjb3VudGlkGAEgASgNEh0KFXJlZ2lzdHJhdGlvbl9jb21wbGV0ZRgCIAEoCCKJAQo5Q0FjY291bnRIYXJkd2FyZV9RdWVyeUFjY291bnRzUmVnaXN0ZXJlZFRvU2VyaWFsX1Jlc3BvbnNlEkwKCGFjY291bnRzGAEgAygLMjouQ0FjY291bnRIYXJkd2FyZV9RdWVyeUFjY291bnRzUmVnaXN0ZXJlZFRvU2VyaWFsX0FjY291bnRzIssBCjRDQWNjb3VudEhhcmR3YXJlX1VwZGF0ZUNvbnRyb2xsZXJVc2FnZVJlcG9ydF9SZXF1ZXN0ElUKC2NvbnRyb2xsZXJzGAEgAygLMkAuQ0FjY291bnRIYXJkd2FyZV9VcGRhdGVDb250cm9sbGVyVXNhZ2VSZXBvcnRfUmVxdWVzdC5Db250cm9sbGVyGjwKCkNvbnRyb2xsZXISFQoNc2VyaWFsX251bWJlchgBIAEoCRIXCg9jb250cm9sbGVyX2NvZGUYAiABKAkiNwo1Q0FjY291bnRIYXJkd2FyZV9VcGRhdGVDb250cm9sbGVyVXNhZ2VSZXBvcnRfUmVzcG9uc2UigAEKOkNBY2NvdW50SGFyZHdhcmVfU3RlYW1Db250cm9sbGVyU2V0Q29uZmlnX0NvbnRyb2xsZXJDb25maWcSEwoLYXBwaWRvcm5hbWUYASABKAkSFwoPcHVibGlzaGVkZmlsZWlkGAIgASgEEhQKDHRlbXBsYXRlbmFtZRgDIAEoCSKMAgoxQ0FjY291bnRIYXJkd2FyZV9TdGVhbUNvbnRyb2xsZXJTZXRDb25maWdfUmVxdWVzdBIVCg1zZXJpYWxfbnVtYmVyGAEgASgJEhcKD2NvbnRyb2xsZXJfY29kZRgCIAEoCRIRCglhY2NvdW50aWQYAyABKA0SUwoOY29uZmlndXJhdGlvbnMYBCADKAsyOy5DQWNjb3VudEhhcmR3YXJlX1N0ZWFtQ29udHJvbGxlclNldENvbmZpZ19Db250cm9sbGVyQ29uZmlnEhoKD2NvbnRyb2xsZXJfdHlwZRgFIAEoBToBMhIjChRvbmx5X2Zvcl90aGlzX3NlcmlhbBgGIAEoCDoFZmFsc2UiNAoyQ0FjY291bnRIYXJkd2FyZV9TdGVhbUNvbnRyb2xsZXJTZXRDb25maWdfUmVzcG9uc2UizAEKMUNBY2NvdW50SGFyZHdhcmVfU3RlYW1Db250cm9sbGVyR2V0Q29uZmlnX1JlcXVlc3QSFQoNc2VyaWFsX251bWJlchgBIAEoCRIXCg9jb250cm9sbGVyX2NvZGUYAiABKAkSEQoJYWNjb3VudGlkGAMgASgNEhMKC2FwcGlkb3JuYW1lGAQgASgJEhoKD2NvbnRyb2xsZXJfdHlwZRgFIAEoBToBMhIjChRvbmx5X2Zvcl90aGlzX3NlcmlhbBgGIAEoCDoFZmFsc2UisAEKOkNBY2NvdW50SGFyZHdhcmVfU3RlYW1Db250cm9sbGVyR2V0Q29uZmlnX0NvbnRyb2xsZXJDb25maWcSEwoLYXBwaWRvcm5hbWUYASABKAkSFwoPcHVibGlzaGVkZmlsZWlkGAIgASgEEhQKDHRlbXBsYXRlbmFtZRgDIAEoCRIVCg1zZXJpYWxfbnVtYmVyGAQgASgJEhcKCGF1dG9zYXZlGAUgASgIOgVmYWxzZSKJAQoyQ0FjY291bnRIYXJkd2FyZV9TdGVhbUNvbnRyb2xsZXJHZXRDb25maWdfUmVzcG9uc2USUwoOY29uZmlndXJhdGlvbnMYASADKAsyOy5DQWNjb3VudEhhcmR3YXJlX1N0ZWFtQ29udHJvbGxlckdldENvbmZpZ19Db250cm9sbGVyQ29uZmlnIncKMkNBY2NvdW50SGFyZHdhcmVfRGVSZWdpc3RlclN0ZWFtQ29udHJvbGxlcl9SZXF1ZXN0EhUKDXNlcmlhbF9udW1iZXIYASABKAkSFwoPY29udHJvbGxlcl9jb2RlGAIgASgJEhEKCWFjY291bnRpZBgDIAEoDSI1CjNDQWNjb3VudEhhcmR3YXJlX0RlUmVnaXN0ZXJTdGVhbUNvbnRyb2xsZXJfUmVzcG9uc2UidAovQ0FjY291bnRIYXJkd2FyZV9TZXRQZXJzb25hbGl6YXRpb25GaWxlX1JlcXVlc3QSFQoNc2VyaWFsX251bWJlchgBIAEoCRIXCg9wdWJsaXNoZWRmaWxlaWQYAiABKAQSEQoJYWNjb3VudGlkGAMgASgNIjIKMENBY2NvdW50SGFyZHdhcmVfU2V0UGVyc29uYWxpemF0aW9uRmlsZV9SZXNwb25zZSJbCi9DQWNjb3VudEhhcmR3YXJlX0dldFBlcnNvbmFsaXphdGlvbkZpbGVfUmVxdWVzdBIVCg1zZXJpYWxfbnVtYmVyGAEgASgJEhEKCWFjY291bnRpZBgCIAEoDSJLCjBDQWNjb3VudEhhcmR3YXJlX0dldFBlcnNvbmFsaXphdGlvbkZpbGVfUmVzcG9uc2USFwoPcHVibGlzaGVkZmlsZWlkGAEgASgEIq4BCi1DQWNjb3VudEhhcmR3YXJlX1ZSQ29tcGF0aWJpbGl0eUNoZWNrX1JlcXVlc3QSFAoMcHJvZHVjdF9uYW1lGAEgASgJEkMKBnZhbHVlcxgCIAMoCzIzLkNBY2NvdW50SGFyZHdhcmVfVlJDb21wYXRpYmlsaXR5Q2hlY2tfUmVxdWVzdC5QYWlyGiIKBFBhaXISCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIrACCi5DQWNjb3VudEhhcmR3YXJlX1ZSQ29tcGF0aWJpbGl0eUNoZWNrX1Jlc3BvbnNlEkQKBnZhbHVlcxgBIAMoCzI0LkNBY2NvdW50SGFyZHdhcmVfVlJDb21wYXRpYmlsaXR5Q2hlY2tfUmVzcG9uc2UuUGFpchJUCgpjb21wb25lbnRzGAIgAygLMkAuQ0FjY291bnRIYXJkd2FyZV9WUkNvbXBhdGliaWxpdHlDaGVja19SZXNwb25zZS5Db21wb25lbnREaXNwbGF5GiIKBFBhaXISCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJGj4KEENvbXBvbmVudERpc3BsYXkSDAoEbmFtZRgBIAEoCRINCgVpbWFnZRgCIAEoCRINCgV2YWx1ZRgDIAEoCSL6AQo0Q0FjY291bnRIYXJkd2FyZV9SZWdpc3RlclZhbHZlSW5kZXhDb21wb25lbnRfUmVxdWVzdBIVCg1zZXJpYWxfbnVtYmVyGAEgASgJEiIKGm1hbnVmYWN0dXJlcl9zZXJpYWxfbnVtYmVyGAIgASgJEhYKDmNvbXBvbmVudF9jb2RlGAMgASgJEkwKDmNvbXBvbmVudF90eXBlGAQgASgOMhUuRVZhbHZlSW5kZXhDb21wb25lbnQ6HWtfRVZhbHZlSW5kZXhDb21wb25lbnRVbmtub3duEiEKGWVzdGltYXRlZF90aW1lX3JlZ2lzdGVyZWQYBSABKAUiNwo1Q0FjY291bnRIYXJkd2FyZV9SZWdpc3RlclZhbHZlSW5kZXhDb21wb25lbnRfUmVzcG9uc2UiYQovQ0FjY291bnRIYXJkd2FyZV9HZXRTdGVhbURlY2tDb21wb25lbnRzX1JlcXVlc3QSFQoNc2VyaWFsX251bWJlchgBIAEoCRIXCg9jb250cm9sbGVyX2NvZGUYAiABKAkiSwowQ0FjY291bnRIYXJkd2FyZV9HZXRTdGVhbURlY2tDb21wb25lbnRzX1Jlc3BvbnNlEhcKD2pzb25fY29tcG9uZW50cxgBIAEoCSrdAQoURVZhbHZlSW5kZXhDb21wb25lbnQSIQoda19FVmFsdmVJbmRleENvbXBvbmVudFVua25vd24QABIdChlrX0VWYWx2ZUluZGV4Q29tcG9uZW50SE1EEAESJQoha19FVmFsdmVJbmRleENvbXBvbmVudExlZnRLbnVja2xlEAISJgoia19FVmFsdmVJbmRleENvbXBvbmVudFJpZ2h0S251Y2tsZRADEhAKDGtfRVRlbXBEVHN0MRAEEhAKDGtfRVRlbXBEVHN0MhAFEhAKDGtfRVRlbXBEVHN0MxAGMqkNCg9BY2NvdW50SGFyZHdhcmUSgAEKF1JlZ2lzdGVyU3RlYW1Db250cm9sbGVyEjEuQ0FjY291bnRIYXJkd2FyZV9SZWdpc3RlclN0ZWFtQ29udHJvbGxlcl9SZXF1ZXN0GjIuQ0FjY291bnRIYXJkd2FyZV9SZWdpc3RlclN0ZWFtQ29udHJvbGxlcl9SZXNwb25zZRKkAQojQ29tcGxldGVTdGVhbUNvbnRyb2xsZXJSZWdpc3RyYXRpb24SPS5DQWNjb3VudEhhcmR3YXJlX0NvbXBsZXRlU3RlYW1Db250cm9sbGVyUmVnaXN0cmF0aW9uX1JlcXVlc3QaPi5DQWNjb3VudEhhcmR3YXJlX0NvbXBsZXRlU3RlYW1Db250cm9sbGVyUmVnaXN0cmF0aW9uX1Jlc3BvbnNlEpwBCiNRdWVyeUFjY291bnRzUmVnaXN0ZXJlZFRvQ29udHJvbGxlchI5LkNBY2NvdW50SGFyZHdhcmVfUXVlcnlBY2NvdW50c1JlZ2lzdGVyZWRUb1NlcmlhbF9SZXF1ZXN0GjouQ0FjY291bnRIYXJkd2FyZV9RdWVyeUFjY291bnRzUmVnaXN0ZXJlZFRvU2VyaWFsX1Jlc3BvbnNlEowBChtVcGRhdGVDb250cm9sbGVyVXNhZ2VSZXBvcnQSNS5DQWNjb3VudEhhcmR3YXJlX1VwZGF0ZUNvbnRyb2xsZXJVc2FnZVJlcG9ydF9SZXF1ZXN0GjYuQ0FjY291bnRIYXJkd2FyZV9VcGRhdGVDb250cm9sbGVyVXNhZ2VSZXBvcnRfUmVzcG9uc2USiwEKIFNldERlc2lyZWRDb250cm9sbGVyQ29uZmlnRm9yQXBwEjIuQ0FjY291bnRIYXJkd2FyZV9TdGVhbUNvbnRyb2xsZXJTZXRDb25maWdfUmVxdWVzdBozLkNBY2NvdW50SGFyZHdhcmVfU3RlYW1Db250cm9sbGVyU2V0Q29uZmlnX1Jlc3BvbnNlEosBCiBHZXREZXNpcmVkQ29udHJvbGxlckNvbmZpZ0ZvckFwcBIyLkNBY2NvdW50SGFyZHdhcmVfU3RlYW1Db250cm9sbGVyR2V0Q29uZmlnX1JlcXVlc3QaMy5DQWNjb3VudEhhcmR3YXJlX1N0ZWFtQ29udHJvbGxlckdldENvbmZpZ19SZXNwb25zZRKGAQoZRGVSZWdpc3RlclN0ZWFtQ29udHJvbGxlchIzLkNBY2NvdW50SGFyZHdhcmVfRGVSZWdpc3RlclN0ZWFtQ29udHJvbGxlcl9SZXF1ZXN0GjQuQ0FjY291bnRIYXJkd2FyZV9EZVJlZ2lzdGVyU3RlYW1Db250cm9sbGVyX1Jlc3BvbnNlEocBCiBTZXRDb250cm9sbGVyUGVyc29uYWxpemF0aW9uRmlsZRIwLkNBY2NvdW50SGFyZHdhcmVfU2V0UGVyc29uYWxpemF0aW9uRmlsZV9SZXF1ZXN0GjEuQ0FjY291bnRIYXJkd2FyZV9TZXRQZXJzb25hbGl6YXRpb25GaWxlX1Jlc3BvbnNlEocBCiBHZXRDb250cm9sbGVyUGVyc29uYWxpemF0aW9uRmlsZRIwLkNBY2NvdW50SGFyZHdhcmVfR2V0UGVyc29uYWxpemF0aW9uRmlsZV9SZXF1ZXN0GjEuQ0FjY291bnRIYXJkd2FyZV9HZXRQZXJzb25hbGl6YXRpb25GaWxlX1Jlc3BvbnNlEncKFFZSQ29tcGF0aWJpbGl0eUNoZWNrEi4uQ0FjY291bnRIYXJkd2FyZV9WUkNvbXBhdGliaWxpdHlDaGVja19SZXF1ZXN0Gi8uQ0FjY291bnRIYXJkd2FyZV9WUkNvbXBhdGliaWxpdHlDaGVja19SZXNwb25zZRKMAQobUmVnaXN0ZXJWYWx2ZUluZGV4Q29tcG9uZW50EjUuQ0FjY291bnRIYXJkd2FyZV9SZWdpc3RlclZhbHZlSW5kZXhDb21wb25lbnRfUmVxdWVzdBo2LkNBY2NvdW50SGFyZHdhcmVfUmVnaXN0ZXJWYWx2ZUluZGV4Q29tcG9uZW50X1Jlc3BvbnNlEn0KFkdldFN0ZWFtRGVja0NvbXBvbmVudHMSMC5DQWNjb3VudEhhcmR3YXJlX0dldFN0ZWFtRGVja0NvbXBvbmVudHNfUmVxdWVzdBoxLkNBY2NvdW50SGFyZHdhcmVfR2V0U3RlYW1EZWNrQ29tcG9uZW50c19SZXNwb25zZUIDgAEB", [file_steammessages_base, file_steammessages_unified_base_steamclient]);

/**
 * @generated from message CAccountHardware_RegisterSteamController_Request
 */
export type CAccountHardware_RegisterSteamController_Request = Message<"CAccountHardware_RegisterSteamController_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional string controller_code = 2;
   */
  controllerCode: string;
};

/**
 * Describes the message CAccountHardware_RegisterSteamController_Request.
 * Use `create(CAccountHardware_RegisterSteamController_RequestSchema)` to create a new message.
 */
export const CAccountHardware_RegisterSteamController_RequestSchema: GenMessage<CAccountHardware_RegisterSteamController_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 0);

/**
 * @generated from message CAccountHardware_RegisterSteamController_Response
 */
export type CAccountHardware_RegisterSteamController_Response = Message<"CAccountHardware_RegisterSteamController_Response"> & {
};

/**
 * Describes the message CAccountHardware_RegisterSteamController_Response.
 * Use `create(CAccountHardware_RegisterSteamController_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_RegisterSteamController_ResponseSchema: GenMessage<CAccountHardware_RegisterSteamController_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 1);

/**
 * @generated from message CAccountHardware_CompleteSteamControllerRegistration_Request
 */
export type CAccountHardware_CompleteSteamControllerRegistration_Request = Message<"CAccountHardware_CompleteSteamControllerRegistration_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional string controller_code = 2;
   */
  controllerCode: string;
};

/**
 * Describes the message CAccountHardware_CompleteSteamControllerRegistration_Request.
 * Use `create(CAccountHardware_CompleteSteamControllerRegistration_RequestSchema)` to create a new message.
 */
export const CAccountHardware_CompleteSteamControllerRegistration_RequestSchema: GenMessage<CAccountHardware_CompleteSteamControllerRegistration_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 2);

/**
 * @generated from message CAccountHardware_CompleteSteamControllerRegistration_Response
 */
export type CAccountHardware_CompleteSteamControllerRegistration_Response = Message<"CAccountHardware_CompleteSteamControllerRegistration_Response"> & {
};

/**
 * Describes the message CAccountHardware_CompleteSteamControllerRegistration_Response.
 * Use `create(CAccountHardware_CompleteSteamControllerRegistration_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_CompleteSteamControllerRegistration_ResponseSchema: GenMessage<CAccountHardware_CompleteSteamControllerRegistration_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 3);

/**
 * @generated from message CAccountHardware_QueryAccountsRegisteredToSerial_Request
 */
export type CAccountHardware_QueryAccountsRegisteredToSerial_Request = Message<"CAccountHardware_QueryAccountsRegisteredToSerial_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional string controller_code = 2;
   */
  controllerCode: string;
};

/**
 * Describes the message CAccountHardware_QueryAccountsRegisteredToSerial_Request.
 * Use `create(CAccountHardware_QueryAccountsRegisteredToSerial_RequestSchema)` to create a new message.
 */
export const CAccountHardware_QueryAccountsRegisteredToSerial_RequestSchema: GenMessage<CAccountHardware_QueryAccountsRegisteredToSerial_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 4);

/**
 * @generated from message CAccountHardware_QueryAccountsRegisteredToSerial_Accounts
 */
export type CAccountHardware_QueryAccountsRegisteredToSerial_Accounts = Message<"CAccountHardware_QueryAccountsRegisteredToSerial_Accounts"> & {
  /**
   * @generated from field: optional uint32 accountid = 1;
   */
  accountid: number;

  /**
   * @generated from field: optional bool registration_complete = 2;
   */
  registrationComplete: boolean;
};

/**
 * Describes the message CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.
 * Use `create(CAccountHardware_QueryAccountsRegisteredToSerial_AccountsSchema)` to create a new message.
 */
export const CAccountHardware_QueryAccountsRegisteredToSerial_AccountsSchema: GenMessage<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 5);

/**
 * @generated from message CAccountHardware_QueryAccountsRegisteredToSerial_Response
 */
export type CAccountHardware_QueryAccountsRegisteredToSerial_Response = Message<"CAccountHardware_QueryAccountsRegisteredToSerial_Response"> & {
  /**
   * @generated from field: repeated CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
   */
  accounts: CAccountHardware_QueryAccountsRegisteredToSerial_Accounts[];
};

/**
 * Describes the message CAccountHardware_QueryAccountsRegisteredToSerial_Response.
 * Use `create(CAccountHardware_QueryAccountsRegisteredToSerial_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_QueryAccountsRegisteredToSerial_ResponseSchema: GenMessage<CAccountHardware_QueryAccountsRegisteredToSerial_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 6);

/**
 * @generated from message CAccountHardware_UpdateControllerUsageReport_Request
 */
export type CAccountHardware_UpdateControllerUsageReport_Request = Message<"CAccountHardware_UpdateControllerUsageReport_Request"> & {
  /**
   * @generated from field: repeated CAccountHardware_UpdateControllerUsageReport_Request.Controller controllers = 1;
   */
  controllers: CAccountHardware_UpdateControllerUsageReport_Request_Controller[];
};

/**
 * Describes the message CAccountHardware_UpdateControllerUsageReport_Request.
 * Use `create(CAccountHardware_UpdateControllerUsageReport_RequestSchema)` to create a new message.
 */
export const CAccountHardware_UpdateControllerUsageReport_RequestSchema: GenMessage<CAccountHardware_UpdateControllerUsageReport_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 7);

/**
 * @generated from message CAccountHardware_UpdateControllerUsageReport_Request.Controller
 */
export type CAccountHardware_UpdateControllerUsageReport_Request_Controller = Message<"CAccountHardware_UpdateControllerUsageReport_Request.Controller"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional string controller_code = 2;
   */
  controllerCode: string;
};

/**
 * Describes the message CAccountHardware_UpdateControllerUsageReport_Request.Controller.
 * Use `create(CAccountHardware_UpdateControllerUsageReport_Request_ControllerSchema)` to create a new message.
 */
export const CAccountHardware_UpdateControllerUsageReport_Request_ControllerSchema: GenMessage<CAccountHardware_UpdateControllerUsageReport_Request_Controller> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 7, 0);

/**
 * @generated from message CAccountHardware_UpdateControllerUsageReport_Response
 */
export type CAccountHardware_UpdateControllerUsageReport_Response = Message<"CAccountHardware_UpdateControllerUsageReport_Response"> & {
};

/**
 * Describes the message CAccountHardware_UpdateControllerUsageReport_Response.
 * Use `create(CAccountHardware_UpdateControllerUsageReport_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_UpdateControllerUsageReport_ResponseSchema: GenMessage<CAccountHardware_UpdateControllerUsageReport_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 8);

/**
 * @generated from message CAccountHardware_SteamControllerSetConfig_ControllerConfig
 */
export type CAccountHardware_SteamControllerSetConfig_ControllerConfig = Message<"CAccountHardware_SteamControllerSetConfig_ControllerConfig"> & {
  /**
   * @generated from field: optional string appidorname = 1;
   */
  appidorname: string;

  /**
   * @generated from field: optional uint64 publishedfileid = 2;
   */
  publishedfileid: bigint;

  /**
   * @generated from field: optional string templatename = 3;
   */
  templatename: string;
};

/**
 * Describes the message CAccountHardware_SteamControllerSetConfig_ControllerConfig.
 * Use `create(CAccountHardware_SteamControllerSetConfig_ControllerConfigSchema)` to create a new message.
 */
export const CAccountHardware_SteamControllerSetConfig_ControllerConfigSchema: GenMessage<CAccountHardware_SteamControllerSetConfig_ControllerConfig> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 9);

/**
 * @generated from message CAccountHardware_SteamControllerSetConfig_Request
 */
export type CAccountHardware_SteamControllerSetConfig_Request = Message<"CAccountHardware_SteamControllerSetConfig_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional string controller_code = 2;
   */
  controllerCode: string;

  /**
   * @generated from field: optional uint32 accountid = 3;
   */
  accountid: number;

  /**
   * @generated from field: repeated CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
   */
  configurations: CAccountHardware_SteamControllerSetConfig_ControllerConfig[];

  /**
   * @generated from field: optional int32 controller_type = 5 [default = 2];
   */
  controllerType: number;

  /**
   * @generated from field: optional bool only_for_this_serial = 6 [default = false];
   */
  onlyForThisSerial: boolean;
};

/**
 * Describes the message CAccountHardware_SteamControllerSetConfig_Request.
 * Use `create(CAccountHardware_SteamControllerSetConfig_RequestSchema)` to create a new message.
 */
export const CAccountHardware_SteamControllerSetConfig_RequestSchema: GenMessage<CAccountHardware_SteamControllerSetConfig_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 10);

/**
 * @generated from message CAccountHardware_SteamControllerSetConfig_Response
 */
export type CAccountHardware_SteamControllerSetConfig_Response = Message<"CAccountHardware_SteamControllerSetConfig_Response"> & {
};

/**
 * Describes the message CAccountHardware_SteamControllerSetConfig_Response.
 * Use `create(CAccountHardware_SteamControllerSetConfig_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_SteamControllerSetConfig_ResponseSchema: GenMessage<CAccountHardware_SteamControllerSetConfig_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 11);

/**
 * @generated from message CAccountHardware_SteamControllerGetConfig_Request
 */
export type CAccountHardware_SteamControllerGetConfig_Request = Message<"CAccountHardware_SteamControllerGetConfig_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional string controller_code = 2;
   */
  controllerCode: string;

  /**
   * @generated from field: optional uint32 accountid = 3;
   */
  accountid: number;

  /**
   * @generated from field: optional string appidorname = 4;
   */
  appidorname: string;

  /**
   * @generated from field: optional int32 controller_type = 5 [default = 2];
   */
  controllerType: number;

  /**
   * @generated from field: optional bool only_for_this_serial = 6 [default = false];
   */
  onlyForThisSerial: boolean;
};

/**
 * Describes the message CAccountHardware_SteamControllerGetConfig_Request.
 * Use `create(CAccountHardware_SteamControllerGetConfig_RequestSchema)` to create a new message.
 */
export const CAccountHardware_SteamControllerGetConfig_RequestSchema: GenMessage<CAccountHardware_SteamControllerGetConfig_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 12);

/**
 * @generated from message CAccountHardware_SteamControllerGetConfig_ControllerConfig
 */
export type CAccountHardware_SteamControllerGetConfig_ControllerConfig = Message<"CAccountHardware_SteamControllerGetConfig_ControllerConfig"> & {
  /**
   * @generated from field: optional string appidorname = 1;
   */
  appidorname: string;

  /**
   * @generated from field: optional uint64 publishedfileid = 2;
   */
  publishedfileid: bigint;

  /**
   * @generated from field: optional string templatename = 3;
   */
  templatename: string;

  /**
   * @generated from field: optional string serial_number = 4;
   */
  serialNumber: string;

  /**
   * @generated from field: optional bool autosave = 5 [default = false];
   */
  autosave: boolean;
};

/**
 * Describes the message CAccountHardware_SteamControllerGetConfig_ControllerConfig.
 * Use `create(CAccountHardware_SteamControllerGetConfig_ControllerConfigSchema)` to create a new message.
 */
export const CAccountHardware_SteamControllerGetConfig_ControllerConfigSchema: GenMessage<CAccountHardware_SteamControllerGetConfig_ControllerConfig> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 13);

/**
 * @generated from message CAccountHardware_SteamControllerGetConfig_Response
 */
export type CAccountHardware_SteamControllerGetConfig_Response = Message<"CAccountHardware_SteamControllerGetConfig_Response"> & {
  /**
   * @generated from field: repeated CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
   */
  configurations: CAccountHardware_SteamControllerGetConfig_ControllerConfig[];
};

/**
 * Describes the message CAccountHardware_SteamControllerGetConfig_Response.
 * Use `create(CAccountHardware_SteamControllerGetConfig_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_SteamControllerGetConfig_ResponseSchema: GenMessage<CAccountHardware_SteamControllerGetConfig_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 14);

/**
 * @generated from message CAccountHardware_DeRegisterSteamController_Request
 */
export type CAccountHardware_DeRegisterSteamController_Request = Message<"CAccountHardware_DeRegisterSteamController_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional string controller_code = 2;
   */
  controllerCode: string;

  /**
   * @generated from field: optional uint32 accountid = 3;
   */
  accountid: number;
};

/**
 * Describes the message CAccountHardware_DeRegisterSteamController_Request.
 * Use `create(CAccountHardware_DeRegisterSteamController_RequestSchema)` to create a new message.
 */
export const CAccountHardware_DeRegisterSteamController_RequestSchema: GenMessage<CAccountHardware_DeRegisterSteamController_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 15);

/**
 * @generated from message CAccountHardware_DeRegisterSteamController_Response
 */
export type CAccountHardware_DeRegisterSteamController_Response = Message<"CAccountHardware_DeRegisterSteamController_Response"> & {
};

/**
 * Describes the message CAccountHardware_DeRegisterSteamController_Response.
 * Use `create(CAccountHardware_DeRegisterSteamController_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_DeRegisterSteamController_ResponseSchema: GenMessage<CAccountHardware_DeRegisterSteamController_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 16);

/**
 * @generated from message CAccountHardware_SetPersonalizationFile_Request
 */
export type CAccountHardware_SetPersonalizationFile_Request = Message<"CAccountHardware_SetPersonalizationFile_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional uint64 publishedfileid = 2;
   */
  publishedfileid: bigint;

  /**
   * @generated from field: optional uint32 accountid = 3;
   */
  accountid: number;
};

/**
 * Describes the message CAccountHardware_SetPersonalizationFile_Request.
 * Use `create(CAccountHardware_SetPersonalizationFile_RequestSchema)` to create a new message.
 */
export const CAccountHardware_SetPersonalizationFile_RequestSchema: GenMessage<CAccountHardware_SetPersonalizationFile_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 17);

/**
 * @generated from message CAccountHardware_SetPersonalizationFile_Response
 */
export type CAccountHardware_SetPersonalizationFile_Response = Message<"CAccountHardware_SetPersonalizationFile_Response"> & {
};

/**
 * Describes the message CAccountHardware_SetPersonalizationFile_Response.
 * Use `create(CAccountHardware_SetPersonalizationFile_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_SetPersonalizationFile_ResponseSchema: GenMessage<CAccountHardware_SetPersonalizationFile_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 18);

/**
 * @generated from message CAccountHardware_GetPersonalizationFile_Request
 */
export type CAccountHardware_GetPersonalizationFile_Request = Message<"CAccountHardware_GetPersonalizationFile_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional uint32 accountid = 2;
   */
  accountid: number;
};

/**
 * Describes the message CAccountHardware_GetPersonalizationFile_Request.
 * Use `create(CAccountHardware_GetPersonalizationFile_RequestSchema)` to create a new message.
 */
export const CAccountHardware_GetPersonalizationFile_RequestSchema: GenMessage<CAccountHardware_GetPersonalizationFile_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 19);

/**
 * @generated from message CAccountHardware_GetPersonalizationFile_Response
 */
export type CAccountHardware_GetPersonalizationFile_Response = Message<"CAccountHardware_GetPersonalizationFile_Response"> & {
  /**
   * @generated from field: optional uint64 publishedfileid = 1;
   */
  publishedfileid: bigint;
};

/**
 * Describes the message CAccountHardware_GetPersonalizationFile_Response.
 * Use `create(CAccountHardware_GetPersonalizationFile_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_GetPersonalizationFile_ResponseSchema: GenMessage<CAccountHardware_GetPersonalizationFile_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 20);

/**
 * @generated from message CAccountHardware_VRCompatibilityCheck_Request
 */
export type CAccountHardware_VRCompatibilityCheck_Request = Message<"CAccountHardware_VRCompatibilityCheck_Request"> & {
  /**
   * @generated from field: optional string product_name = 1;
   */
  productName: string;

  /**
   * @generated from field: repeated CAccountHardware_VRCompatibilityCheck_Request.Pair values = 2;
   */
  values: CAccountHardware_VRCompatibilityCheck_Request_Pair[];
};

/**
 * Describes the message CAccountHardware_VRCompatibilityCheck_Request.
 * Use `create(CAccountHardware_VRCompatibilityCheck_RequestSchema)` to create a new message.
 */
export const CAccountHardware_VRCompatibilityCheck_RequestSchema: GenMessage<CAccountHardware_VRCompatibilityCheck_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 21);

/**
 * @generated from message CAccountHardware_VRCompatibilityCheck_Request.Pair
 */
export type CAccountHardware_VRCompatibilityCheck_Request_Pair = Message<"CAccountHardware_VRCompatibilityCheck_Request.Pair"> & {
  /**
   * @generated from field: optional string key = 1;
   */
  key: string;

  /**
   * @generated from field: optional string value = 2;
   */
  value: string;
};

/**
 * Describes the message CAccountHardware_VRCompatibilityCheck_Request.Pair.
 * Use `create(CAccountHardware_VRCompatibilityCheck_Request_PairSchema)` to create a new message.
 */
export const CAccountHardware_VRCompatibilityCheck_Request_PairSchema: GenMessage<CAccountHardware_VRCompatibilityCheck_Request_Pair> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 21, 0);

/**
 * @generated from message CAccountHardware_VRCompatibilityCheck_Response
 */
export type CAccountHardware_VRCompatibilityCheck_Response = Message<"CAccountHardware_VRCompatibilityCheck_Response"> & {
  /**
   * @generated from field: repeated CAccountHardware_VRCompatibilityCheck_Response.Pair values = 1;
   */
  values: CAccountHardware_VRCompatibilityCheck_Response_Pair[];

  /**
   * @generated from field: repeated CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay components = 2;
   */
  components: CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay[];
};

/**
 * Describes the message CAccountHardware_VRCompatibilityCheck_Response.
 * Use `create(CAccountHardware_VRCompatibilityCheck_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_VRCompatibilityCheck_ResponseSchema: GenMessage<CAccountHardware_VRCompatibilityCheck_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 22);

/**
 * @generated from message CAccountHardware_VRCompatibilityCheck_Response.Pair
 */
export type CAccountHardware_VRCompatibilityCheck_Response_Pair = Message<"CAccountHardware_VRCompatibilityCheck_Response.Pair"> & {
  /**
   * @generated from field: optional string key = 1;
   */
  key: string;

  /**
   * @generated from field: optional string value = 2;
   */
  value: string;
};

/**
 * Describes the message CAccountHardware_VRCompatibilityCheck_Response.Pair.
 * Use `create(CAccountHardware_VRCompatibilityCheck_Response_PairSchema)` to create a new message.
 */
export const CAccountHardware_VRCompatibilityCheck_Response_PairSchema: GenMessage<CAccountHardware_VRCompatibilityCheck_Response_Pair> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 22, 0);

/**
 * @generated from message CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay
 */
export type CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay = Message<"CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay"> & {
  /**
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * @generated from field: optional string image = 2;
   */
  image: string;

  /**
   * @generated from field: optional string value = 3;
   */
  value: string;
};

/**
 * Describes the message CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.
 * Use `create(CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplaySchema)` to create a new message.
 */
export const CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplaySchema: GenMessage<CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 22, 1);

/**
 * @generated from message CAccountHardware_RegisterValveIndexComponent_Request
 */
export type CAccountHardware_RegisterValveIndexComponent_Request = Message<"CAccountHardware_RegisterValveIndexComponent_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional string manufacturer_serial_number = 2;
   */
  manufacturerSerialNumber: string;

  /**
   * @generated from field: optional string component_code = 3;
   */
  componentCode: string;

  /**
   * @generated from field: optional EValveIndexComponent component_type = 4 [default = k_EValveIndexComponentUnknown];
   */
  componentType: EValveIndexComponent;

  /**
   * @generated from field: optional int32 estimated_time_registered = 5;
   */
  estimatedTimeRegistered: number;
};

/**
 * Describes the message CAccountHardware_RegisterValveIndexComponent_Request.
 * Use `create(CAccountHardware_RegisterValveIndexComponent_RequestSchema)` to create a new message.
 */
export const CAccountHardware_RegisterValveIndexComponent_RequestSchema: GenMessage<CAccountHardware_RegisterValveIndexComponent_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 23);

/**
 * @generated from message CAccountHardware_RegisterValveIndexComponent_Response
 */
export type CAccountHardware_RegisterValveIndexComponent_Response = Message<"CAccountHardware_RegisterValveIndexComponent_Response"> & {
};

/**
 * Describes the message CAccountHardware_RegisterValveIndexComponent_Response.
 * Use `create(CAccountHardware_RegisterValveIndexComponent_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_RegisterValveIndexComponent_ResponseSchema: GenMessage<CAccountHardware_RegisterValveIndexComponent_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 24);

/**
 * @generated from message CAccountHardware_GetSteamDeckComponents_Request
 */
export type CAccountHardware_GetSteamDeckComponents_Request = Message<"CAccountHardware_GetSteamDeckComponents_Request"> & {
  /**
   * @generated from field: optional string serial_number = 1;
   */
  serialNumber: string;

  /**
   * @generated from field: optional string controller_code = 2;
   */
  controllerCode: string;
};

/**
 * Describes the message CAccountHardware_GetSteamDeckComponents_Request.
 * Use `create(CAccountHardware_GetSteamDeckComponents_RequestSchema)` to create a new message.
 */
export const CAccountHardware_GetSteamDeckComponents_RequestSchema: GenMessage<CAccountHardware_GetSteamDeckComponents_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 25);

/**
 * @generated from message CAccountHardware_GetSteamDeckComponents_Response
 */
export type CAccountHardware_GetSteamDeckComponents_Response = Message<"CAccountHardware_GetSteamDeckComponents_Response"> & {
  /**
   * @generated from field: optional string json_components = 1;
   */
  jsonComponents: string;
};

/**
 * Describes the message CAccountHardware_GetSteamDeckComponents_Response.
 * Use `create(CAccountHardware_GetSteamDeckComponents_ResponseSchema)` to create a new message.
 */
export const CAccountHardware_GetSteamDeckComponents_ResponseSchema: GenMessage<CAccountHardware_GetSteamDeckComponents_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_accounthardware_steamclient, 26);

/**
 * @generated from enum EValveIndexComponent
 */
export enum EValveIndexComponent {
  /**
   * @generated from enum value: k_EValveIndexComponentUnknown = 0;
   */
  k_EValveIndexComponentUnknown = 0,

  /**
   * @generated from enum value: k_EValveIndexComponentHMD = 1;
   */
  k_EValveIndexComponentHMD = 1,

  /**
   * @generated from enum value: k_EValveIndexComponentLeftKnuckle = 2;
   */
  k_EValveIndexComponentLeftKnuckle = 2,

  /**
   * @generated from enum value: k_EValveIndexComponentRightKnuckle = 3;
   */
  k_EValveIndexComponentRightKnuckle = 3,

  /**
   * @generated from enum value: k_ETempDTst1 = 4;
   */
  k_ETempDTst1 = 4,

  /**
   * @generated from enum value: k_ETempDTst2 = 5;
   */
  k_ETempDTst2 = 5,

  /**
   * @generated from enum value: k_ETempDTst3 = 6;
   */
  k_ETempDTst3 = 6,
}

/**
 * Describes the enum EValveIndexComponent.
 */
export const EValveIndexComponentSchema: GenEnum<EValveIndexComponent> = /*@__PURE__*/
  enumDesc(file_steammessages_accounthardware_steamclient, 0);

/**
 * @generated from service AccountHardware
 */
export const AccountHardware: GenService<{
  /**
   * @generated from rpc AccountHardware.RegisterSteamController
   */
  registerSteamController: {
    methodKind: "unary";
    input: typeof CAccountHardware_RegisterSteamController_RequestSchema;
    output: typeof CAccountHardware_RegisterSteamController_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.CompleteSteamControllerRegistration
   */
  completeSteamControllerRegistration: {
    methodKind: "unary";
    input: typeof CAccountHardware_CompleteSteamControllerRegistration_RequestSchema;
    output: typeof CAccountHardware_CompleteSteamControllerRegistration_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.QueryAccountsRegisteredToController
   */
  queryAccountsRegisteredToController: {
    methodKind: "unary";
    input: typeof CAccountHardware_QueryAccountsRegisteredToSerial_RequestSchema;
    output: typeof CAccountHardware_QueryAccountsRegisteredToSerial_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.UpdateControllerUsageReport
   */
  updateControllerUsageReport: {
    methodKind: "unary";
    input: typeof CAccountHardware_UpdateControllerUsageReport_RequestSchema;
    output: typeof CAccountHardware_UpdateControllerUsageReport_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.SetDesiredControllerConfigForApp
   */
  setDesiredControllerConfigForApp: {
    methodKind: "unary";
    input: typeof CAccountHardware_SteamControllerSetConfig_RequestSchema;
    output: typeof CAccountHardware_SteamControllerSetConfig_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.GetDesiredControllerConfigForApp
   */
  getDesiredControllerConfigForApp: {
    methodKind: "unary";
    input: typeof CAccountHardware_SteamControllerGetConfig_RequestSchema;
    output: typeof CAccountHardware_SteamControllerGetConfig_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.DeRegisterSteamController
   */
  deRegisterSteamController: {
    methodKind: "unary";
    input: typeof CAccountHardware_DeRegisterSteamController_RequestSchema;
    output: typeof CAccountHardware_DeRegisterSteamController_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.SetControllerPersonalizationFile
   */
  setControllerPersonalizationFile: {
    methodKind: "unary";
    input: typeof CAccountHardware_SetPersonalizationFile_RequestSchema;
    output: typeof CAccountHardware_SetPersonalizationFile_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.GetControllerPersonalizationFile
   */
  getControllerPersonalizationFile: {
    methodKind: "unary";
    input: typeof CAccountHardware_GetPersonalizationFile_RequestSchema;
    output: typeof CAccountHardware_GetPersonalizationFile_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.VRCompatibilityCheck
   */
  vRCompatibilityCheck: {
    methodKind: "unary";
    input: typeof CAccountHardware_VRCompatibilityCheck_RequestSchema;
    output: typeof CAccountHardware_VRCompatibilityCheck_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.RegisterValveIndexComponent
   */
  registerValveIndexComponent: {
    methodKind: "unary";
    input: typeof CAccountHardware_RegisterValveIndexComponent_RequestSchema;
    output: typeof CAccountHardware_RegisterValveIndexComponent_ResponseSchema;
  },
  /**
   * @generated from rpc AccountHardware.GetSteamDeckComponents
   */
  getSteamDeckComponents: {
    methodKind: "unary";
    input: typeof CAccountHardware_GetSteamDeckComponents_RequestSchema;
    output: typeof CAccountHardware_GetSteamDeckComponents_ResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_steammessages_accounthardware_steamclient, 0);

