// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file steammessages_site_license.steamclient.proto (syntax proto2)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_steammessages_base } from "./steammessages_base_pb";
import type { NoResponseSchema } from "./steammessages_unified_base.steamclient_pb";
import { file_steammessages_unified_base_steamclient } from "./steammessages_unified_base.steamclient_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file steammessages_site_license.steamclient.proto.
 */
export const file_steammessages_site_license_steamclient: GenFile = /*@__PURE__*/
  fileDesc("CixzdGVhbW1lc3NhZ2VzX3NpdGVfbGljZW5zZS5zdGVhbWNsaWVudC5wcm90byKNAQopQ1NpdGVNYW5hZ2VyQ2xpZW50X0luY29taW5nQ2xpZW50X1JlcXVlc3QSFwoPc2l0ZV9pbnN0YW5jZWlkGAEgASgGEhYKDmNsaWVudF9zdGVhbWlkGAIgASgGEhcKD2NsaWVudF9sb2NhbF9pcBgDIAEoBxIWCg5jb25uZWN0aW9uX2tleRgEIAEoDCIsCipDU2l0ZU1hbmFnZXJDbGllbnRfSW5jb21pbmdDbGllbnRfUmVzcG9uc2UiTgosQ1NpdGVMaWNlbnNlX0NsaWVudFNlYXRDaGVja291dF9Ob3RpZmljYXRpb24SDQoFYXBwaWQYASABKA0SDwoHZXJlc3VsdBgCIAEoDSLjAgovQ1NpdGVNYW5hZ2VyQ2xpZW50X1RyYWNrZWRQYXltZW50c19Ob3RpZmljYXRpb24SDwoHc2l0ZV9pZBgBIAEoBhJKCghwYXltZW50cxgCIAMoCzI4LkNTaXRlTWFuYWdlckNsaWVudF9UcmFja2VkUGF5bWVudHNfTm90aWZpY2F0aW9uLlBheW1lbnQa0gEKB1BheW1lbnQSDwoHdHJhbnNpZBgBIAEoBBIPCgdzdGVhbWlkGAIgASgEEg4KBmFtb3VudBgDIAEoAxIRCgllY3VycmVuY3kYBCABKA0SFAoMdGltZV9jcmVhdGVkGAUgASgFEhcKD3B1cmNoYXNlX3N0YXR1cxgGIAEoBRIUCgxtYWNoaW5lX25hbWUYByABKAkSFAoMcGVyc29uYV9uYW1lGAggASgJEhMKC3Byb2ZpbGVfdXJsGAkgASgJEhIKCmF2YXRhcl91cmwYCiABKAkicgooQ1NpdGVMaWNlbnNlX0luaXRpYXRlQXNzb2NpYXRpb25fUmVxdWVzdBIUCgxzaXRlX3N0ZWFtaWQYASABKAYSFwoPc2l0ZV9pbnN0YW5jZWlkGAIgASgGEhcKD2NsaWVudF9sb2NhbF9pcBgDIAEoByJDCilDU2l0ZUxpY2Vuc2VfSW5pdGlhdGVBc3NvY2lhdGlvbl9SZXNwb25zZRIWCg5jb25uZWN0aW9uX2tleRgBIAEoDCI6CiRDU2l0ZUxpY2Vuc2VfTENTQXV0aGVudGljYXRlX1JlcXVlc3QSEgoKaW5zdGFuY2VpZBgBIAEoBiJ6CiVDU2l0ZUxpY2Vuc2VfTENTQXV0aGVudGljYXRlX1Jlc3BvbnNlEg8KB3NpdGVfaWQYASABKAQSEQoJc2l0ZV9uYW1lGAIgASgJEhMKC25ld19zZXNzaW9uGAMgASgIEhgKEG5vX3NpdGVfbGljZW5zZXMYBCABKAgidAolQ1NpdGVMaWNlbnNlX0xDU0Fzc29jaWF0ZVVzZXJfUmVxdWVzdBIPCgdzdGVhbWlkGAEgASgGEhAKCGxvY2FsX2lwGAIgASgHEhIKCmluc3RhbmNlaWQYAyABKAYSFAoMbWFjaGluZV9uYW1lGAQgASgJIigKJkNTaXRlTGljZW5zZV9MQ1NBc3NvY2lhdGVVc2VyX1Jlc3BvbnNlIl0KJ0NTaXRlTGljZW5zZV9DbGllbnRTZWF0Q2hlY2tvdXRfUmVxdWVzdBIPCgdzdGVhbWlkGAEgASgGEhIKCmluc3RhbmNlaWQYAiABKAYSDQoFYXBwaWQYAyABKA0iKgooQ1NpdGVMaWNlbnNlX0NsaWVudFNlYXRDaGVja291dF9SZXNwb25zZSJiCixDU2l0ZUxpY2Vuc2VfQ2xpZW50R2V0QXZhaWxhYmxlU2VhdHNfUmVxdWVzdBIPCgdzdGVhbWlkGAEgASgGEhIKCmluc3RhbmNlaWQYAiABKAYSDQoFYXBwaWQYAyABKA0iSAotQ1NpdGVMaWNlbnNlX0NsaWVudEdldEF2YWlsYWJsZVNlYXRzX1Jlc3BvbnNlEhcKD2F2YWlsYWJsZV9zZWF0cxgBIAEoDTLAAgoRU2l0ZU1hbmFnZXJDbGllbnQSaQoOSW5jb21pbmdDbGllbnQSKi5DU2l0ZU1hbmFnZXJDbGllbnRfSW5jb21pbmdDbGllbnRfUmVxdWVzdBorLkNTaXRlTWFuYWdlckNsaWVudF9JbmNvbWluZ0NsaWVudF9SZXNwb25zZRJcCh5DbGllbnRTZWF0Q2hlY2tvdXROb3RpZmljYXRpb24SLS5DU2l0ZUxpY2Vuc2VfQ2xpZW50U2VhdENoZWNrb3V0X05vdGlmaWNhdGlvbhoLLk5vUmVzcG9uc2USXAobVHJhY2tlZFBheW1lbnRzTm90aWZpY2F0aW9uEjAuQ1NpdGVNYW5hZ2VyQ2xpZW50X1RyYWNrZWRQYXltZW50c19Ob3RpZmljYXRpb24aCy5Ob1Jlc3BvbnNlGgTAtRgCMqcECgtTaXRlTGljZW5zZRJsChNJbml0aWF0ZUFzc29jaWF0aW9uEikuQ1NpdGVMaWNlbnNlX0luaXRpYXRlQXNzb2NpYXRpb25fUmVxdWVzdBoqLkNTaXRlTGljZW5zZV9Jbml0aWF0ZUFzc29jaWF0aW9uX1Jlc3BvbnNlEmAKD0xDU0F1dGhlbnRpY2F0ZRIlLkNTaXRlTGljZW5zZV9MQ1NBdXRoZW50aWNhdGVfUmVxdWVzdBomLkNTaXRlTGljZW5zZV9MQ1NBdXRoZW50aWNhdGVfUmVzcG9uc2USYwoQTENTQXNzb2NpYXRlVXNlchImLkNTaXRlTGljZW5zZV9MQ1NBc3NvY2lhdGVVc2VyX1JlcXVlc3QaJy5DU2l0ZUxpY2Vuc2VfTENTQXNzb2NpYXRlVXNlcl9SZXNwb25zZRJpChJDbGllbnRTZWF0Q2hlY2tvdXQSKC5DU2l0ZUxpY2Vuc2VfQ2xpZW50U2VhdENoZWNrb3V0X1JlcXVlc3QaKS5DU2l0ZUxpY2Vuc2VfQ2xpZW50U2VhdENoZWNrb3V0X1Jlc3BvbnNlEngKF0NsaWVudEdldEF2YWlsYWJsZVNlYXRzEi0uQ1NpdGVMaWNlbnNlX0NsaWVudEdldEF2YWlsYWJsZVNlYXRzX1JlcXVlc3QaLi5DU2l0ZUxpY2Vuc2VfQ2xpZW50R2V0QXZhaWxhYmxlU2VhdHNfUmVzcG9uc2VCA4ABAQ", [file_steammessages_base, file_steammessages_unified_base_steamclient]);

/**
 * @generated from message CSiteManagerClient_IncomingClient_Request
 */
export type CSiteManagerClient_IncomingClient_Request = Message<"CSiteManagerClient_IncomingClient_Request"> & {
  /**
   * @generated from field: optional fixed64 site_instanceid = 1;
   */
  siteInstanceid: bigint;

  /**
   * @generated from field: optional fixed64 client_steamid = 2;
   */
  clientSteamid: bigint;

  /**
   * @generated from field: optional fixed32 client_local_ip = 3;
   */
  clientLocalIp: number;

  /**
   * @generated from field: optional bytes connection_key = 4;
   */
  connectionKey: Uint8Array;
};

/**
 * Describes the message CSiteManagerClient_IncomingClient_Request.
 * Use `create(CSiteManagerClient_IncomingClient_RequestSchema)` to create a new message.
 */
export const CSiteManagerClient_IncomingClient_RequestSchema: GenMessage<CSiteManagerClient_IncomingClient_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 0);

/**
 * @generated from message CSiteManagerClient_IncomingClient_Response
 */
export type CSiteManagerClient_IncomingClient_Response = Message<"CSiteManagerClient_IncomingClient_Response"> & {
};

/**
 * Describes the message CSiteManagerClient_IncomingClient_Response.
 * Use `create(CSiteManagerClient_IncomingClient_ResponseSchema)` to create a new message.
 */
export const CSiteManagerClient_IncomingClient_ResponseSchema: GenMessage<CSiteManagerClient_IncomingClient_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 1);

/**
 * @generated from message CSiteLicense_ClientSeatCheckout_Notification
 */
export type CSiteLicense_ClientSeatCheckout_Notification = Message<"CSiteLicense_ClientSeatCheckout_Notification"> & {
  /**
   * @generated from field: optional uint32 appid = 1;
   */
  appid: number;

  /**
   * @generated from field: optional uint32 eresult = 2;
   */
  eresult: number;
};

/**
 * Describes the message CSiteLicense_ClientSeatCheckout_Notification.
 * Use `create(CSiteLicense_ClientSeatCheckout_NotificationSchema)` to create a new message.
 */
export const CSiteLicense_ClientSeatCheckout_NotificationSchema: GenMessage<CSiteLicense_ClientSeatCheckout_Notification> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 2);

/**
 * @generated from message CSiteManagerClient_TrackedPayments_Notification
 */
export type CSiteManagerClient_TrackedPayments_Notification = Message<"CSiteManagerClient_TrackedPayments_Notification"> & {
  /**
   * @generated from field: optional fixed64 site_id = 1;
   */
  siteId: bigint;

  /**
   * @generated from field: repeated CSiteManagerClient_TrackedPayments_Notification.Payment payments = 2;
   */
  payments: CSiteManagerClient_TrackedPayments_Notification_Payment[];
};

/**
 * Describes the message CSiteManagerClient_TrackedPayments_Notification.
 * Use `create(CSiteManagerClient_TrackedPayments_NotificationSchema)` to create a new message.
 */
export const CSiteManagerClient_TrackedPayments_NotificationSchema: GenMessage<CSiteManagerClient_TrackedPayments_Notification> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 3);

/**
 * @generated from message CSiteManagerClient_TrackedPayments_Notification.Payment
 */
export type CSiteManagerClient_TrackedPayments_Notification_Payment = Message<"CSiteManagerClient_TrackedPayments_Notification.Payment"> & {
  /**
   * @generated from field: optional uint64 transid = 1;
   */
  transid: bigint;

  /**
   * @generated from field: optional uint64 steamid = 2;
   */
  steamid: bigint;

  /**
   * @generated from field: optional int64 amount = 3;
   */
  amount: bigint;

  /**
   * @generated from field: optional uint32 ecurrency = 4;
   */
  ecurrency: number;

  /**
   * @generated from field: optional int32 time_created = 5;
   */
  timeCreated: number;

  /**
   * @generated from field: optional int32 purchase_status = 6;
   */
  purchaseStatus: number;

  /**
   * @generated from field: optional string machine_name = 7;
   */
  machineName: string;

  /**
   * @generated from field: optional string persona_name = 8;
   */
  personaName: string;

  /**
   * @generated from field: optional string profile_url = 9;
   */
  profileUrl: string;

  /**
   * @generated from field: optional string avatar_url = 10;
   */
  avatarUrl: string;
};

/**
 * Describes the message CSiteManagerClient_TrackedPayments_Notification.Payment.
 * Use `create(CSiteManagerClient_TrackedPayments_Notification_PaymentSchema)` to create a new message.
 */
export const CSiteManagerClient_TrackedPayments_Notification_PaymentSchema: GenMessage<CSiteManagerClient_TrackedPayments_Notification_Payment> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 3, 0);

/**
 * @generated from message CSiteLicense_InitiateAssociation_Request
 */
export type CSiteLicense_InitiateAssociation_Request = Message<"CSiteLicense_InitiateAssociation_Request"> & {
  /**
   * @generated from field: optional fixed64 site_steamid = 1;
   */
  siteSteamid: bigint;

  /**
   * @generated from field: optional fixed64 site_instanceid = 2;
   */
  siteInstanceid: bigint;

  /**
   * @generated from field: optional fixed32 client_local_ip = 3;
   */
  clientLocalIp: number;
};

/**
 * Describes the message CSiteLicense_InitiateAssociation_Request.
 * Use `create(CSiteLicense_InitiateAssociation_RequestSchema)` to create a new message.
 */
export const CSiteLicense_InitiateAssociation_RequestSchema: GenMessage<CSiteLicense_InitiateAssociation_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 4);

/**
 * @generated from message CSiteLicense_InitiateAssociation_Response
 */
export type CSiteLicense_InitiateAssociation_Response = Message<"CSiteLicense_InitiateAssociation_Response"> & {
  /**
   * @generated from field: optional bytes connection_key = 1;
   */
  connectionKey: Uint8Array;
};

/**
 * Describes the message CSiteLicense_InitiateAssociation_Response.
 * Use `create(CSiteLicense_InitiateAssociation_ResponseSchema)` to create a new message.
 */
export const CSiteLicense_InitiateAssociation_ResponseSchema: GenMessage<CSiteLicense_InitiateAssociation_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 5);

/**
 * @generated from message CSiteLicense_LCSAuthenticate_Request
 */
export type CSiteLicense_LCSAuthenticate_Request = Message<"CSiteLicense_LCSAuthenticate_Request"> & {
  /**
   * @generated from field: optional fixed64 instanceid = 1;
   */
  instanceid: bigint;
};

/**
 * Describes the message CSiteLicense_LCSAuthenticate_Request.
 * Use `create(CSiteLicense_LCSAuthenticate_RequestSchema)` to create a new message.
 */
export const CSiteLicense_LCSAuthenticate_RequestSchema: GenMessage<CSiteLicense_LCSAuthenticate_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 6);

/**
 * @generated from message CSiteLicense_LCSAuthenticate_Response
 */
export type CSiteLicense_LCSAuthenticate_Response = Message<"CSiteLicense_LCSAuthenticate_Response"> & {
  /**
   * @generated from field: optional uint64 site_id = 1;
   */
  siteId: bigint;

  /**
   * @generated from field: optional string site_name = 2;
   */
  siteName: string;

  /**
   * @generated from field: optional bool new_session = 3;
   */
  newSession: boolean;

  /**
   * @generated from field: optional bool no_site_licenses = 4;
   */
  noSiteLicenses: boolean;
};

/**
 * Describes the message CSiteLicense_LCSAuthenticate_Response.
 * Use `create(CSiteLicense_LCSAuthenticate_ResponseSchema)` to create a new message.
 */
export const CSiteLicense_LCSAuthenticate_ResponseSchema: GenMessage<CSiteLicense_LCSAuthenticate_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 7);

/**
 * @generated from message CSiteLicense_LCSAssociateUser_Request
 */
export type CSiteLicense_LCSAssociateUser_Request = Message<"CSiteLicense_LCSAssociateUser_Request"> & {
  /**
   * @generated from field: optional fixed64 steamid = 1;
   */
  steamid: bigint;

  /**
   * @generated from field: optional fixed32 local_ip = 2;
   */
  localIp: number;

  /**
   * @generated from field: optional fixed64 instanceid = 3;
   */
  instanceid: bigint;

  /**
   * @generated from field: optional string machine_name = 4;
   */
  machineName: string;
};

/**
 * Describes the message CSiteLicense_LCSAssociateUser_Request.
 * Use `create(CSiteLicense_LCSAssociateUser_RequestSchema)` to create a new message.
 */
export const CSiteLicense_LCSAssociateUser_RequestSchema: GenMessage<CSiteLicense_LCSAssociateUser_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 8);

/**
 * @generated from message CSiteLicense_LCSAssociateUser_Response
 */
export type CSiteLicense_LCSAssociateUser_Response = Message<"CSiteLicense_LCSAssociateUser_Response"> & {
};

/**
 * Describes the message CSiteLicense_LCSAssociateUser_Response.
 * Use `create(CSiteLicense_LCSAssociateUser_ResponseSchema)` to create a new message.
 */
export const CSiteLicense_LCSAssociateUser_ResponseSchema: GenMessage<CSiteLicense_LCSAssociateUser_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 9);

/**
 * @generated from message CSiteLicense_ClientSeatCheckout_Request
 */
export type CSiteLicense_ClientSeatCheckout_Request = Message<"CSiteLicense_ClientSeatCheckout_Request"> & {
  /**
   * @generated from field: optional fixed64 steamid = 1;
   */
  steamid: bigint;

  /**
   * @generated from field: optional fixed64 instanceid = 2;
   */
  instanceid: bigint;

  /**
   * @generated from field: optional uint32 appid = 3;
   */
  appid: number;
};

/**
 * Describes the message CSiteLicense_ClientSeatCheckout_Request.
 * Use `create(CSiteLicense_ClientSeatCheckout_RequestSchema)` to create a new message.
 */
export const CSiteLicense_ClientSeatCheckout_RequestSchema: GenMessage<CSiteLicense_ClientSeatCheckout_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 10);

/**
 * @generated from message CSiteLicense_ClientSeatCheckout_Response
 */
export type CSiteLicense_ClientSeatCheckout_Response = Message<"CSiteLicense_ClientSeatCheckout_Response"> & {
};

/**
 * Describes the message CSiteLicense_ClientSeatCheckout_Response.
 * Use `create(CSiteLicense_ClientSeatCheckout_ResponseSchema)` to create a new message.
 */
export const CSiteLicense_ClientSeatCheckout_ResponseSchema: GenMessage<CSiteLicense_ClientSeatCheckout_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 11);

/**
 * @generated from message CSiteLicense_ClientGetAvailableSeats_Request
 */
export type CSiteLicense_ClientGetAvailableSeats_Request = Message<"CSiteLicense_ClientGetAvailableSeats_Request"> & {
  /**
   * @generated from field: optional fixed64 steamid = 1;
   */
  steamid: bigint;

  /**
   * @generated from field: optional fixed64 instanceid = 2;
   */
  instanceid: bigint;

  /**
   * @generated from field: optional uint32 appid = 3;
   */
  appid: number;
};

/**
 * Describes the message CSiteLicense_ClientGetAvailableSeats_Request.
 * Use `create(CSiteLicense_ClientGetAvailableSeats_RequestSchema)` to create a new message.
 */
export const CSiteLicense_ClientGetAvailableSeats_RequestSchema: GenMessage<CSiteLicense_ClientGetAvailableSeats_Request> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 12);

/**
 * @generated from message CSiteLicense_ClientGetAvailableSeats_Response
 */
export type CSiteLicense_ClientGetAvailableSeats_Response = Message<"CSiteLicense_ClientGetAvailableSeats_Response"> & {
  /**
   * @generated from field: optional uint32 available_seats = 1;
   */
  availableSeats: number;
};

/**
 * Describes the message CSiteLicense_ClientGetAvailableSeats_Response.
 * Use `create(CSiteLicense_ClientGetAvailableSeats_ResponseSchema)` to create a new message.
 */
export const CSiteLicense_ClientGetAvailableSeats_ResponseSchema: GenMessage<CSiteLicense_ClientGetAvailableSeats_Response> = /*@__PURE__*/
  messageDesc(file_steammessages_site_license_steamclient, 13);

/**
 * @generated from service SiteManagerClient
 */
export const SiteManagerClient: GenService<{
  /**
   * @generated from rpc SiteManagerClient.IncomingClient
   */
  incomingClient: {
    methodKind: "unary";
    input: typeof CSiteManagerClient_IncomingClient_RequestSchema;
    output: typeof CSiteManagerClient_IncomingClient_ResponseSchema;
  },
  /**
   * @generated from rpc SiteManagerClient.ClientSeatCheckoutNotification
   */
  clientSeatCheckoutNotification: {
    methodKind: "unary";
    input: typeof CSiteLicense_ClientSeatCheckout_NotificationSchema;
    output: typeof NoResponseSchema;
  },
  /**
   * @generated from rpc SiteManagerClient.TrackedPaymentsNotification
   */
  trackedPaymentsNotification: {
    methodKind: "unary";
    input: typeof CSiteManagerClient_TrackedPayments_NotificationSchema;
    output: typeof NoResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_steammessages_site_license_steamclient, 0);

/**
 * @generated from service SiteLicense
 */
export const SiteLicense: GenService<{
  /**
   * @generated from rpc SiteLicense.InitiateAssociation
   */
  initiateAssociation: {
    methodKind: "unary";
    input: typeof CSiteLicense_InitiateAssociation_RequestSchema;
    output: typeof CSiteLicense_InitiateAssociation_ResponseSchema;
  },
  /**
   * @generated from rpc SiteLicense.LCSAuthenticate
   */
  lCSAuthenticate: {
    methodKind: "unary";
    input: typeof CSiteLicense_LCSAuthenticate_RequestSchema;
    output: typeof CSiteLicense_LCSAuthenticate_ResponseSchema;
  },
  /**
   * @generated from rpc SiteLicense.LCSAssociateUser
   */
  lCSAssociateUser: {
    methodKind: "unary";
    input: typeof CSiteLicense_LCSAssociateUser_RequestSchema;
    output: typeof CSiteLicense_LCSAssociateUser_ResponseSchema;
  },
  /**
   * @generated from rpc SiteLicense.ClientSeatCheckout
   */
  clientSeatCheckout: {
    methodKind: "unary";
    input: typeof CSiteLicense_ClientSeatCheckout_RequestSchema;
    output: typeof CSiteLicense_ClientSeatCheckout_ResponseSchema;
  },
  /**
   * @generated from rpc SiteLicense.ClientGetAvailableSeats
   */
  clientGetAvailableSeats: {
    methodKind: "unary";
    input: typeof CSiteLicense_ClientGetAvailableSeats_RequestSchema;
    output: typeof CSiteLicense_ClientGetAvailableSeats_ResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_steammessages_site_license_steamclient, 1);

