// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file steammessages_clientserver.proto (syntax proto2)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { CMsgAuthTicket, CMsgIPAddress } from "./steammessages_base_pb";
import { file_steammessages_base } from "./steammessages_base_pb";
import type { EncryptedAppTicket } from "./encrypted_app_ticket_pb";
import { file_encrypted_app_ticket } from "./encrypted_app_ticket_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file steammessages_clientserver.proto.
 */
export const file_steammessages_clientserver: GenFile = /*@__PURE__*/
  fileDesc("", [file_steammessages_base, file_encrypted_app_ticket]);

/**
 * @generated from message CMsgClientRegisterAuthTicketWithCM
 */
export type CMsgClientRegisterAuthTicketWithCM = Message<"CMsgClientRegisterAuthTicketWithCM"> & {
  /**
   * @generated from field: optional uint32 protocol_version = 1;
   */
  protocolVersion: number;

  /**
   * @generated from field: optional bytes ticket = 3;
   */
  ticket: Uint8Array;

  /**
   * @generated from field: optional uint64 client_instance_id = 4;
   */
  clientInstanceId: bigint;
};

/**
 * Describes the message CMsgClientRegisterAuthTicketWithCM.
 * Use `create(CMsgClientRegisterAuthTicketWithCMSchema)` to create a new message.
 */
export const CMsgClientRegisterAuthTicketWithCMSchema: GenMessage<CMsgClientRegisterAuthTicketWithCM> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 0);

/**
 * @generated from message CMsgClientTicketAuthComplete
 */
export type CMsgClientTicketAuthComplete = Message<"CMsgClientTicketAuthComplete"> & {
  /**
   * @generated from field: optional fixed64 steam_id = 1;
   */
  steamId: bigint;

  /**
   * @generated from field: optional fixed64 game_id = 2;
   */
  gameId: bigint;

  /**
   * @generated from field: optional uint32 estate = 3;
   */
  estate: number;

  /**
   * @generated from field: optional uint32 eauth_session_response = 4;
   */
  eauthSessionResponse: number;

  /**
   * @generated from field: optional bytes DEPRECATED_ticket = 5;
   */
  DEPRECATEDTicket: Uint8Array;

  /**
   * @generated from field: optional uint32 ticket_crc = 6;
   */
  ticketCrc: number;

  /**
   * @generated from field: optional uint32 ticket_sequence = 7;
   */
  ticketSequence: number;

  /**
   * @generated from field: optional fixed64 owner_steam_id = 8;
   */
  ownerSteamId: bigint;
};

/**
 * Describes the message CMsgClientTicketAuthComplete.
 * Use `create(CMsgClientTicketAuthCompleteSchema)` to create a new message.
 */
export const CMsgClientTicketAuthCompleteSchema: GenMessage<CMsgClientTicketAuthComplete> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 1);

/**
 * @generated from message CMsgClientP2PConnectionInfo
 */
export type CMsgClientP2PConnectionInfo = Message<"CMsgClientP2PConnectionInfo"> & {
  /**
   * @generated from field: optional fixed64 steam_id_dest = 1;
   */
  steamIdDest: bigint;

  /**
   * @generated from field: optional fixed64 steam_id_src = 2;
   */
  steamIdSrc: bigint;

  /**
   * @generated from field: optional uint32 app_id = 3;
   */
  appId: number;

  /**
   * @generated from field: optional bytes candidate = 4;
   */
  candidate: Uint8Array;

  /**
   * @generated from field: optional fixed64 legacy_connection_id_src = 5;
   */
  legacyConnectionIdSrc: bigint;

  /**
   * @generated from field: optional bytes rendezvous = 6;
   */
  rendezvous: Uint8Array;

  /**
   * @generated from field: optional uint32 app_id_secondary = 7;
   */
  appIdSecondary: number;
};

/**
 * Describes the message CMsgClientP2PConnectionInfo.
 * Use `create(CMsgClientP2PConnectionInfoSchema)` to create a new message.
 */
export const CMsgClientP2PConnectionInfoSchema: GenMessage<CMsgClientP2PConnectionInfo> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 2);

/**
 * @generated from message CMsgClientP2PConnectionFailInfo
 */
export type CMsgClientP2PConnectionFailInfo = Message<"CMsgClientP2PConnectionFailInfo"> & {
  /**
   * @generated from field: optional fixed64 steam_id_dest = 1;
   */
  steamIdDest: bigint;

  /**
   * @generated from field: optional fixed64 steam_id_src = 2;
   */
  steamIdSrc: bigint;

  /**
   * @generated from field: optional uint32 app_id = 3;
   */
  appId: number;

  /**
   * @generated from field: optional uint32 ep2p_session_error = 4;
   */
  ep2pSessionError: number;

  /**
   * @generated from field: optional fixed64 connection_id_dest = 5;
   */
  connectionIdDest: bigint;

  /**
   * @generated from field: optional uint32 close_reason = 7;
   */
  closeReason: number;

  /**
   * @generated from field: optional string close_message = 8;
   */
  closeMessage: string;
};

/**
 * Describes the message CMsgClientP2PConnectionFailInfo.
 * Use `create(CMsgClientP2PConnectionFailInfoSchema)` to create a new message.
 */
export const CMsgClientP2PConnectionFailInfoSchema: GenMessage<CMsgClientP2PConnectionFailInfo> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 3);

/**
 * @generated from message CMsgClientNetworkingCertRequest
 */
export type CMsgClientNetworkingCertRequest = Message<"CMsgClientNetworkingCertRequest"> & {
  /**
   * @generated from field: optional bytes key_data = 2;
   */
  keyData: Uint8Array;

  /**
   * @generated from field: optional uint32 app_id = 3;
   */
  appId: number;
};

/**
 * Describes the message CMsgClientNetworkingCertRequest.
 * Use `create(CMsgClientNetworkingCertRequestSchema)` to create a new message.
 */
export const CMsgClientNetworkingCertRequestSchema: GenMessage<CMsgClientNetworkingCertRequest> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 4);

/**
 * @generated from message CMsgClientNetworkingCertReply
 */
export type CMsgClientNetworkingCertReply = Message<"CMsgClientNetworkingCertReply"> & {
  /**
   * @generated from field: optional bytes cert = 4;
   */
  cert: Uint8Array;

  /**
   * @generated from field: optional fixed64 ca_key_id = 5;
   */
  caKeyId: bigint;

  /**
   * @generated from field: optional bytes ca_signature = 6;
   */
  caSignature: Uint8Array;
};

/**
 * Describes the message CMsgClientNetworkingCertReply.
 * Use `create(CMsgClientNetworkingCertReplySchema)` to create a new message.
 */
export const CMsgClientNetworkingCertReplySchema: GenMessage<CMsgClientNetworkingCertReply> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 5);

/**
 * @generated from message CMsgClientNetworkingMobileCertRequest
 */
export type CMsgClientNetworkingMobileCertRequest = Message<"CMsgClientNetworkingMobileCertRequest"> & {
  /**
   * @generated from field: optional uint32 app_id = 1;
   */
  appId: number;
};

/**
 * Describes the message CMsgClientNetworkingMobileCertRequest.
 * Use `create(CMsgClientNetworkingMobileCertRequestSchema)` to create a new message.
 */
export const CMsgClientNetworkingMobileCertRequestSchema: GenMessage<CMsgClientNetworkingMobileCertRequest> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 6);

/**
 * @generated from message CMsgClientNetworkingMobileCertReply
 */
export type CMsgClientNetworkingMobileCertReply = Message<"CMsgClientNetworkingMobileCertReply"> & {
  /**
   * @generated from field: optional string encoded_cert = 1;
   */
  encodedCert: string;
};

/**
 * Describes the message CMsgClientNetworkingMobileCertReply.
 * Use `create(CMsgClientNetworkingMobileCertReplySchema)` to create a new message.
 */
export const CMsgClientNetworkingMobileCertReplySchema: GenMessage<CMsgClientNetworkingMobileCertReply> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 7);

/**
 * @generated from message CMsgClientGetAppOwnershipTicket
 */
export type CMsgClientGetAppOwnershipTicket = Message<"CMsgClientGetAppOwnershipTicket"> & {
  /**
   * @generated from field: optional uint32 app_id = 1;
   */
  appId: number;
};

/**
 * Describes the message CMsgClientGetAppOwnershipTicket.
 * Use `create(CMsgClientGetAppOwnershipTicketSchema)` to create a new message.
 */
export const CMsgClientGetAppOwnershipTicketSchema: GenMessage<CMsgClientGetAppOwnershipTicket> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 8);

/**
 * @generated from message CMsgClientGetAppOwnershipTicketResponse
 */
export type CMsgClientGetAppOwnershipTicketResponse = Message<"CMsgClientGetAppOwnershipTicketResponse"> & {
  /**
   * @generated from field: optional uint32 eresult = 1 [default = 2];
   */
  eresult: number;

  /**
   * @generated from field: optional uint32 app_id = 2;
   */
  appId: number;

  /**
   * @generated from field: optional bytes ticket = 3;
   */
  ticket: Uint8Array;
};

/**
 * Describes the message CMsgClientGetAppOwnershipTicketResponse.
 * Use `create(CMsgClientGetAppOwnershipTicketResponseSchema)` to create a new message.
 */
export const CMsgClientGetAppOwnershipTicketResponseSchema: GenMessage<CMsgClientGetAppOwnershipTicketResponse> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 9);

/**
 * @generated from message CMsgClientSessionToken
 */
export type CMsgClientSessionToken = Message<"CMsgClientSessionToken"> & {
  /**
   * @generated from field: optional uint64 token = 1;
   */
  token: bigint;
};

/**
 * Describes the message CMsgClientSessionToken.
 * Use `create(CMsgClientSessionTokenSchema)` to create a new message.
 */
export const CMsgClientSessionTokenSchema: GenMessage<CMsgClientSessionToken> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 10);

/**
 * @generated from message CMsgClientGameConnectTokens
 */
export type CMsgClientGameConnectTokens = Message<"CMsgClientGameConnectTokens"> & {
  /**
   * @generated from field: optional uint32 max_tokens_to_keep = 1 [default = 10];
   */
  maxTokensToKeep: number;

  /**
   * @generated from field: repeated bytes tokens = 2;
   */
  tokens: Uint8Array[];
};

/**
 * Describes the message CMsgClientGameConnectTokens.
 * Use `create(CMsgClientGameConnectTokensSchema)` to create a new message.
 */
export const CMsgClientGameConnectTokensSchema: GenMessage<CMsgClientGameConnectTokens> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 11);

/**
 * @generated from message CMsgClientGamesPlayed
 */
export type CMsgClientGamesPlayed = Message<"CMsgClientGamesPlayed"> & {
  /**
   * @generated from field: repeated CMsgClientGamesPlayed.GamePlayed games_played = 1;
   */
  gamesPlayed: CMsgClientGamesPlayed_GamePlayed[];

  /**
   * @generated from field: optional uint32 client_os_type = 2;
   */
  clientOsType: number;

  /**
   * @generated from field: optional uint32 cloud_gaming_platform = 3;
   */
  cloudGamingPlatform: number;

  /**
   * @generated from field: optional bool recent_reauthentication = 4;
   */
  recentReauthentication: boolean;
};

/**
 * Describes the message CMsgClientGamesPlayed.
 * Use `create(CMsgClientGamesPlayedSchema)` to create a new message.
 */
export const CMsgClientGamesPlayedSchema: GenMessage<CMsgClientGamesPlayed> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 12);

/**
 * @generated from message CMsgClientGamesPlayed.ProcessInfo
 */
export type CMsgClientGamesPlayed_ProcessInfo = Message<"CMsgClientGamesPlayed.ProcessInfo"> & {
  /**
   * @generated from field: optional uint32 process_id = 1;
   */
  processId: number;

  /**
   * @generated from field: optional uint32 process_id_parent = 2;
   */
  processIdParent: number;

  /**
   * @generated from field: optional bool parent_is_steam = 3;
   */
  parentIsSteam: boolean;
};

/**
 * Describes the message CMsgClientGamesPlayed.ProcessInfo.
 * Use `create(CMsgClientGamesPlayed_ProcessInfoSchema)` to create a new message.
 */
export const CMsgClientGamesPlayed_ProcessInfoSchema: GenMessage<CMsgClientGamesPlayed_ProcessInfo> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 12, 0);

/**
 * @generated from message CMsgClientGamesPlayed.GamePlayed
 */
export type CMsgClientGamesPlayed_GamePlayed = Message<"CMsgClientGamesPlayed.GamePlayed"> & {
  /**
   * @generated from field: optional uint64 steam_id_gs = 1;
   */
  steamIdGs: bigint;

  /**
   * @generated from field: optional fixed64 game_id = 2;
   */
  gameId: bigint;

  /**
   * @generated from field: optional uint32 deprecated_game_ip_address = 3;
   */
  deprecatedGameIpAddress: number;

  /**
   * @generated from field: optional uint32 game_port = 4;
   */
  gamePort: number;

  /**
   * @generated from field: optional bool is_secure = 5;
   */
  isSecure: boolean;

  /**
   * @generated from field: optional bytes token = 6;
   */
  token: Uint8Array;

  /**
   * @generated from field: optional string game_extra_info = 7;
   */
  gameExtraInfo: string;

  /**
   * @generated from field: optional bytes game_data_blob = 8;
   */
  gameDataBlob: Uint8Array;

  /**
   * @generated from field: optional uint32 process_id = 9;
   */
  processId: number;

  /**
   * @generated from field: optional uint32 streaming_provider_id = 10;
   */
  streamingProviderId: number;

  /**
   * @generated from field: optional uint32 game_flags = 11;
   */
  gameFlags: number;

  /**
   * @generated from field: optional uint32 owner_id = 12;
   */
  ownerId: number;

  /**
   * @generated from field: optional string vr_hmd_vendor = 13;
   */
  vrHmdVendor: string;

  /**
   * @generated from field: optional string vr_hmd_model = 14;
   */
  vrHmdModel: string;

  /**
   * @generated from field: optional uint32 launch_option_type = 15 [default = 0];
   */
  launchOptionType: number;

  /**
   * @generated from field: optional int32 primary_controller_type = 16 [default = -1];
   */
  primaryControllerType: number;

  /**
   * @generated from field: optional string primary_steam_controller_serial = 17;
   */
  primarySteamControllerSerial: string;

  /**
   * @generated from field: optional uint32 total_steam_controller_count = 18 [default = 0];
   */
  totalSteamControllerCount: number;

  /**
   * @generated from field: optional uint32 total_non_steam_controller_count = 19 [default = 0];
   */
  totalNonSteamControllerCount: number;

  /**
   * @generated from field: optional uint64 controller_workshop_file_id = 20 [default = 0];
   */
  controllerWorkshopFileId: bigint;

  /**
   * @generated from field: optional uint32 launch_source = 21 [default = 0];
   */
  launchSource: number;

  /**
   * @generated from field: optional uint32 vr_hmd_runtime = 22;
   */
  vrHmdRuntime: number;

  /**
   * @generated from field: optional CMsgIPAddress game_ip_address = 23;
   */
  gameIpAddress?: CMsgIPAddress;

  /**
   * @generated from field: optional uint32 controller_connection_type = 24 [default = 0];
   */
  controllerConnectionType: number;

  /**
   * @generated from field: optional int32 game_os_platform = 25;
   */
  gameOsPlatform: number;

  /**
   * @generated from field: optional uint32 game_build_id = 26;
   */
  gameBuildId: number;

  /**
   * @generated from field: optional uint32 compat_tool_id = 27 [default = 0];
   */
  compatToolId: number;

  /**
   * @generated from field: optional string compat_tool_cmd = 28;
   */
  compatToolCmd: string;

  /**
   * @generated from field: optional uint32 compat_tool_build_id = 29;
   */
  compatToolBuildId: number;

  /**
   * @generated from field: optional string beta_name = 30;
   */
  betaName: string;

  /**
   * @generated from field: optional uint32 dlc_context = 31;
   */
  dlcContext: number;

  /**
   * @generated from field: repeated CMsgClientGamesPlayed.ProcessInfo process_id_list = 32;
   */
  processIdList: CMsgClientGamesPlayed_ProcessInfo[];
};

/**
 * Describes the message CMsgClientGamesPlayed.GamePlayed.
 * Use `create(CMsgClientGamesPlayed_GamePlayedSchema)` to create a new message.
 */
export const CMsgClientGamesPlayed_GamePlayedSchema: GenMessage<CMsgClientGamesPlayed_GamePlayed> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 12, 1);

/**
 * @generated from message CMsgGSApprove
 */
export type CMsgGSApprove = Message<"CMsgGSApprove"> & {
  /**
   * @generated from field: optional fixed64 steam_id = 1;
   */
  steamId: bigint;

  /**
   * @generated from field: optional fixed64 owner_steam_id = 2;
   */
  ownerSteamId: bigint;
};

/**
 * Describes the message CMsgGSApprove.
 * Use `create(CMsgGSApproveSchema)` to create a new message.
 */
export const CMsgGSApproveSchema: GenMessage<CMsgGSApprove> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 13);

/**
 * @generated from message CMsgGSDeny
 */
export type CMsgGSDeny = Message<"CMsgGSDeny"> & {
  /**
   * @generated from field: optional fixed64 steam_id = 1;
   */
  steamId: bigint;

  /**
   * @generated from field: optional int32 edeny_reason = 2;
   */
  edenyReason: number;

  /**
   * @generated from field: optional string deny_string = 3;
   */
  denyString: string;
};

/**
 * Describes the message CMsgGSDeny.
 * Use `create(CMsgGSDenySchema)` to create a new message.
 */
export const CMsgGSDenySchema: GenMessage<CMsgGSDeny> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 14);

/**
 * @generated from message CMsgGSKick
 */
export type CMsgGSKick = Message<"CMsgGSKick"> & {
  /**
   * @generated from field: optional fixed64 steam_id = 1;
   */
  steamId: bigint;

  /**
   * @generated from field: optional int32 edeny_reason = 2;
   */
  edenyReason: number;
};

/**
 * Describes the message CMsgGSKick.
 * Use `create(CMsgGSKickSchema)` to create a new message.
 */
export const CMsgGSKickSchema: GenMessage<CMsgGSKick> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 15);

/**
 * @generated from message CMsgClientAuthList
 */
export type CMsgClientAuthList = Message<"CMsgClientAuthList"> & {
  /**
   * @generated from field: optional uint32 tokens_left = 1;
   */
  tokensLeft: number;

  /**
   * @generated from field: optional uint32 last_request_seq = 2;
   */
  lastRequestSeq: number;

  /**
   * @generated from field: optional uint32 last_request_seq_from_server = 3;
   */
  lastRequestSeqFromServer: number;

  /**
   * @generated from field: repeated CMsgAuthTicket tickets = 4;
   */
  tickets: CMsgAuthTicket[];

  /**
   * @generated from field: repeated uint32 app_ids = 5;
   */
  appIds: number[];

  /**
   * @generated from field: optional uint32 message_sequence = 6;
   */
  messageSequence: number;

  /**
   * @generated from field: optional bool filtered = 7;
   */
  filtered: boolean;
};

/**
 * Describes the message CMsgClientAuthList.
 * Use `create(CMsgClientAuthListSchema)` to create a new message.
 */
export const CMsgClientAuthListSchema: GenMessage<CMsgClientAuthList> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 16);

/**
 * @generated from message CMsgClientAuthListAck
 */
export type CMsgClientAuthListAck = Message<"CMsgClientAuthListAck"> & {
  /**
   * @generated from field: repeated uint32 ticket_crc = 1;
   */
  ticketCrc: number[];

  /**
   * @generated from field: repeated uint32 app_ids = 2;
   */
  appIds: number[];

  /**
   * @generated from field: optional uint32 message_sequence = 3;
   */
  messageSequence: number;
};

/**
 * Describes the message CMsgClientAuthListAck.
 * Use `create(CMsgClientAuthListAckSchema)` to create a new message.
 */
export const CMsgClientAuthListAckSchema: GenMessage<CMsgClientAuthListAck> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 17);

/**
 * @generated from message CMsgGameServerPolicyUpdate
 */
export type CMsgGameServerPolicyUpdate = Message<"CMsgGameServerPolicyUpdate"> & {
  /**
   * @generated from field: optional uint32 app_id = 1;
   */
  appId: number;

  /**
   * @generated from field: optional uint32 app_id_aux = 2;
   */
  appIdAux: number;
};

/**
 * Describes the message CMsgGameServerPolicyUpdate.
 * Use `create(CMsgGameServerPolicyUpdateSchema)` to create a new message.
 */
export const CMsgGameServerPolicyUpdateSchema: GenMessage<CMsgGameServerPolicyUpdate> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 18);

/**
 * @generated from message CMsgClientLicenseList
 */
export type CMsgClientLicenseList = Message<"CMsgClientLicenseList"> & {
  /**
   * @generated from field: optional int32 eresult = 1 [default = 2];
   */
  eresult: number;

  /**
   * @generated from field: repeated CMsgClientLicenseList.License licenses = 2;
   */
  licenses: CMsgClientLicenseList_License[];
};

/**
 * Describes the message CMsgClientLicenseList.
 * Use `create(CMsgClientLicenseListSchema)` to create a new message.
 */
export const CMsgClientLicenseListSchema: GenMessage<CMsgClientLicenseList> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 19);

/**
 * @generated from message CMsgClientLicenseList.License
 */
export type CMsgClientLicenseList_License = Message<"CMsgClientLicenseList.License"> & {
  /**
   * @generated from field: optional uint32 package_id = 1;
   */
  packageId: number;

  /**
   * @generated from field: optional fixed32 time_created = 2;
   */
  timeCreated: number;

  /**
   * @generated from field: optional fixed32 time_next_process = 3;
   */
  timeNextProcess: number;

  /**
   * @generated from field: optional int32 minute_limit = 4;
   */
  minuteLimit: number;

  /**
   * @generated from field: optional int32 minutes_used = 5;
   */
  minutesUsed: number;

  /**
   * @generated from field: optional uint32 payment_method = 6;
   */
  paymentMethod: number;

  /**
   * @generated from field: optional uint32 flags = 7;
   */
  flags: number;

  /**
   * @generated from field: optional string purchase_country_code = 8;
   */
  purchaseCountryCode: string;

  /**
   * @generated from field: optional uint32 license_type = 9;
   */
  licenseType: number;

  /**
   * @generated from field: optional int32 territory_code = 10;
   */
  territoryCode: number;

  /**
   * @generated from field: optional int32 change_number = 11;
   */
  changeNumber: number;

  /**
   * @generated from field: optional uint32 owner_id = 12;
   */
  ownerId: number;

  /**
   * @generated from field: optional uint32 initial_period = 13;
   */
  initialPeriod: number;

  /**
   * @generated from field: optional uint32 initial_time_unit = 14;
   */
  initialTimeUnit: number;

  /**
   * @generated from field: optional uint32 renewal_period = 15;
   */
  renewalPeriod: number;

  /**
   * @generated from field: optional uint32 renewal_time_unit = 16;
   */
  renewalTimeUnit: number;

  /**
   * @generated from field: optional uint64 access_token = 17;
   */
  accessToken: bigint;

  /**
   * @generated from field: optional uint32 master_package_id = 18;
   */
  masterPackageId: number;
};

/**
 * Describes the message CMsgClientLicenseList.License.
 * Use `create(CMsgClientLicenseList_LicenseSchema)` to create a new message.
 */
export const CMsgClientLicenseList_LicenseSchema: GenMessage<CMsgClientLicenseList_License> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 19, 0);

/**
 * @generated from message CMsgClientIsLimitedAccount
 */
export type CMsgClientIsLimitedAccount = Message<"CMsgClientIsLimitedAccount"> & {
  /**
   * @generated from field: optional bool bis_limited_account = 1;
   */
  bisLimitedAccount: boolean;

  /**
   * @generated from field: optional bool bis_community_banned = 2;
   */
  bisCommunityBanned: boolean;

  /**
   * @generated from field: optional bool bis_locked_account = 3;
   */
  bisLockedAccount: boolean;

  /**
   * @generated from field: optional bool bis_limited_account_allowed_to_invite_friends = 4;
   */
  bisLimitedAccountAllowedToInviteFriends: boolean;
};

/**
 * Describes the message CMsgClientIsLimitedAccount.
 * Use `create(CMsgClientIsLimitedAccountSchema)` to create a new message.
 */
export const CMsgClientIsLimitedAccountSchema: GenMessage<CMsgClientIsLimitedAccount> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 20);

/**
 * @generated from message CMsgClientRequestedClientStats
 */
export type CMsgClientRequestedClientStats = Message<"CMsgClientRequestedClientStats"> & {
  /**
   * @generated from field: repeated CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
   */
  statsToSend: CMsgClientRequestedClientStats_StatsToSend[];
};

/**
 * Describes the message CMsgClientRequestedClientStats.
 * Use `create(CMsgClientRequestedClientStatsSchema)` to create a new message.
 */
export const CMsgClientRequestedClientStatsSchema: GenMessage<CMsgClientRequestedClientStats> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 21);

/**
 * @generated from message CMsgClientRequestedClientStats.StatsToSend
 */
export type CMsgClientRequestedClientStats_StatsToSend = Message<"CMsgClientRequestedClientStats.StatsToSend"> & {
  /**
   * @generated from field: optional uint32 client_stat = 1;
   */
  clientStat: number;

  /**
   * @generated from field: optional uint32 stat_aggregate_method = 2;
   */
  statAggregateMethod: number;
};

/**
 * Describes the message CMsgClientRequestedClientStats.StatsToSend.
 * Use `create(CMsgClientRequestedClientStats_StatsToSendSchema)` to create a new message.
 */
export const CMsgClientRequestedClientStats_StatsToSendSchema: GenMessage<CMsgClientRequestedClientStats_StatsToSend> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 21, 0);

/**
 * @generated from message CMsgClientStat2
 */
export type CMsgClientStat2 = Message<"CMsgClientStat2"> & {
  /**
   * @generated from field: repeated CMsgClientStat2.StatDetail stat_detail = 1;
   */
  statDetail: CMsgClientStat2_StatDetail[];
};

/**
 * Describes the message CMsgClientStat2.
 * Use `create(CMsgClientStat2Schema)` to create a new message.
 */
export const CMsgClientStat2Schema: GenMessage<CMsgClientStat2> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 22);

/**
 * @generated from message CMsgClientStat2.StatDetail
 */
export type CMsgClientStat2_StatDetail = Message<"CMsgClientStat2.StatDetail"> & {
  /**
   * @generated from field: optional uint32 client_stat = 1;
   */
  clientStat: number;

  /**
   * @generated from field: optional int64 ll_value = 2;
   */
  llValue: bigint;

  /**
   * @generated from field: optional uint32 time_of_day = 3;
   */
  timeOfDay: number;

  /**
   * @generated from field: optional uint32 cell_id = 4;
   */
  cellId: number;

  /**
   * @generated from field: optional uint32 depot_id = 5;
   */
  depotId: number;

  /**
   * @generated from field: optional uint32 app_id = 6;
   */
  appId: number;
};

/**
 * Describes the message CMsgClientStat2.StatDetail.
 * Use `create(CMsgClientStat2_StatDetailSchema)` to create a new message.
 */
export const CMsgClientStat2_StatDetailSchema: GenMessage<CMsgClientStat2_StatDetail> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 22, 0);

/**
 * @generated from message CMsgClientInviteToGame
 */
export type CMsgClientInviteToGame = Message<"CMsgClientInviteToGame"> & {
  /**
   * @generated from field: optional fixed64 steam_id_dest = 1;
   */
  steamIdDest: bigint;

  /**
   * @generated from field: optional fixed64 steam_id_src = 2;
   */
  steamIdSrc: bigint;

  /**
   * @generated from field: optional string connect_string = 3;
   */
  connectString: string;

  /**
   * @generated from field: optional string remote_play = 4;
   */
  remotePlay: string;
};

/**
 * Describes the message CMsgClientInviteToGame.
 * Use `create(CMsgClientInviteToGameSchema)` to create a new message.
 */
export const CMsgClientInviteToGameSchema: GenMessage<CMsgClientInviteToGame> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 23);

/**
 * @generated from message CMsgClientChatInvite
 */
export type CMsgClientChatInvite = Message<"CMsgClientChatInvite"> & {
  /**
   * @generated from field: optional fixed64 steam_id_invited = 1;
   */
  steamIdInvited: bigint;

  /**
   * @generated from field: optional fixed64 steam_id_chat = 2;
   */
  steamIdChat: bigint;

  /**
   * @generated from field: optional fixed64 steam_id_patron = 3;
   */
  steamIdPatron: bigint;

  /**
   * @generated from field: optional int32 chatroom_type = 4;
   */
  chatroomType: number;

  /**
   * @generated from field: optional fixed64 steam_id_friend_chat = 5;
   */
  steamIdFriendChat: bigint;

  /**
   * @generated from field: optional string chat_name = 6;
   */
  chatName: string;

  /**
   * @generated from field: optional fixed64 game_id = 7;
   */
  gameId: bigint;
};

/**
 * Describes the message CMsgClientChatInvite.
 * Use `create(CMsgClientChatInviteSchema)` to create a new message.
 */
export const CMsgClientChatInviteSchema: GenMessage<CMsgClientChatInvite> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 24);

/**
 * @generated from message CMsgClientConnectionStats
 */
export type CMsgClientConnectionStats = Message<"CMsgClientConnectionStats"> & {
  /**
   * @generated from field: optional CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
   */
  statsLogon?: CMsgClientConnectionStats_Stats_Logon;

  /**
   * @generated from field: optional CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
   */
  statsVconn?: CMsgClientConnectionStats_Stats_VConn;
};

/**
 * Describes the message CMsgClientConnectionStats.
 * Use `create(CMsgClientConnectionStatsSchema)` to create a new message.
 */
export const CMsgClientConnectionStatsSchema: GenMessage<CMsgClientConnectionStats> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 25);

/**
 * @generated from message CMsgClientConnectionStats.Stats_Logon
 */
export type CMsgClientConnectionStats_Stats_Logon = Message<"CMsgClientConnectionStats.Stats_Logon"> & {
  /**
   * @generated from field: optional int32 connect_attempts = 1;
   */
  connectAttempts: number;

  /**
   * @generated from field: optional int32 connect_successes = 2;
   */
  connectSuccesses: number;

  /**
   * @generated from field: optional int32 connect_failures = 3;
   */
  connectFailures: number;

  /**
   * @generated from field: optional int32 connections_dropped = 4;
   */
  connectionsDropped: number;

  /**
   * @generated from field: optional uint32 seconds_running = 5;
   */
  secondsRunning: number;

  /**
   * @generated from field: optional uint32 msec_tologonthistime = 6;
   */
  msecTologonthistime: number;

  /**
   * @generated from field: optional uint32 count_bad_cms = 7;
   */
  countBadCms: number;

  /**
   * @generated from field: optional bool no_udp_connectivity = 8;
   */
  noUdpConnectivity: boolean;

  /**
   * @generated from field: optional bool no_tcp_connectivity = 9;
   */
  noTcpConnectivity: boolean;

  /**
   * @generated from field: optional bool no_websocket_443_connectivity = 10;
   */
  noWebsocket443Connectivity: boolean;

  /**
   * @generated from field: optional bool no_websocket_non_443_connectivity = 11;
   */
  noWebsocketNon443Connectivity: boolean;
};

/**
 * Describes the message CMsgClientConnectionStats.Stats_Logon.
 * Use `create(CMsgClientConnectionStats_Stats_LogonSchema)` to create a new message.
 */
export const CMsgClientConnectionStats_Stats_LogonSchema: GenMessage<CMsgClientConnectionStats_Stats_Logon> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 25, 0);

/**
 * @generated from message CMsgClientConnectionStats.Stats_UDP
 */
export type CMsgClientConnectionStats_Stats_UDP = Message<"CMsgClientConnectionStats.Stats_UDP"> & {
  /**
   * @generated from field: optional uint64 pkts_sent = 1;
   */
  pktsSent: bigint;

  /**
   * @generated from field: optional uint64 bytes_sent = 2;
   */
  bytesSent: bigint;

  /**
   * @generated from field: optional uint64 pkts_recv = 3;
   */
  pktsRecv: bigint;

  /**
   * @generated from field: optional uint64 pkts_processed = 4;
   */
  pktsProcessed: bigint;

  /**
   * @generated from field: optional uint64 bytes_recv = 5;
   */
  bytesRecv: bigint;
};

/**
 * Describes the message CMsgClientConnectionStats.Stats_UDP.
 * Use `create(CMsgClientConnectionStats_Stats_UDPSchema)` to create a new message.
 */
export const CMsgClientConnectionStats_Stats_UDPSchema: GenMessage<CMsgClientConnectionStats_Stats_UDP> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 25, 1);

/**
 * @generated from message CMsgClientConnectionStats.Stats_VConn
 */
export type CMsgClientConnectionStats_Stats_VConn = Message<"CMsgClientConnectionStats.Stats_VConn"> & {
  /**
   * @generated from field: optional uint32 connections_udp = 1;
   */
  connectionsUdp: number;

  /**
   * @generated from field: optional uint32 connections_tcp = 2;
   */
  connectionsTcp: number;

  /**
   * @generated from field: optional CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
   */
  statsUdp?: CMsgClientConnectionStats_Stats_UDP;

  /**
   * @generated from field: optional uint64 pkts_abandoned = 4;
   */
  pktsAbandoned: bigint;

  /**
   * @generated from field: optional uint64 conn_req_received = 5;
   */
  connReqReceived: bigint;

  /**
   * @generated from field: optional uint64 pkts_resent = 6;
   */
  pktsResent: bigint;

  /**
   * @generated from field: optional uint64 msgs_sent = 7;
   */
  msgsSent: bigint;

  /**
   * @generated from field: optional uint64 msgs_sent_failed = 8;
   */
  msgsSentFailed: bigint;

  /**
   * @generated from field: optional uint64 msgs_recv = 9;
   */
  msgsRecv: bigint;

  /**
   * @generated from field: optional uint64 datagrams_sent = 10;
   */
  datagramsSent: bigint;

  /**
   * @generated from field: optional uint64 datagrams_recv = 11;
   */
  datagramsRecv: bigint;

  /**
   * @generated from field: optional uint64 bad_pkts_recv = 12;
   */
  badPktsRecv: bigint;

  /**
   * @generated from field: optional uint64 unknown_conn_pkts_recv = 13;
   */
  unknownConnPktsRecv: bigint;

  /**
   * @generated from field: optional uint64 missed_pkts_recv = 14;
   */
  missedPktsRecv: bigint;

  /**
   * @generated from field: optional uint64 dup_pkts_recv = 15;
   */
  dupPktsRecv: bigint;

  /**
   * @generated from field: optional uint64 failed_connect_challenges = 16;
   */
  failedConnectChallenges: bigint;

  /**
   * @generated from field: optional uint32 micro_sec_avg_latency = 17;
   */
  microSecAvgLatency: number;

  /**
   * @generated from field: optional uint32 micro_sec_min_latency = 18;
   */
  microSecMinLatency: number;

  /**
   * @generated from field: optional uint32 micro_sec_max_latency = 19;
   */
  microSecMaxLatency: number;
};

/**
 * Describes the message CMsgClientConnectionStats.Stats_VConn.
 * Use `create(CMsgClientConnectionStats_Stats_VConnSchema)` to create a new message.
 */
export const CMsgClientConnectionStats_Stats_VConnSchema: GenMessage<CMsgClientConnectionStats_Stats_VConn> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 25, 2);

/**
 * @generated from message CMsgClientServersAvailable
 */
export type CMsgClientServersAvailable = Message<"CMsgClientServersAvailable"> & {
  /**
   * @generated from field: repeated CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
   */
  serverTypesAvailable: CMsgClientServersAvailable_Server_Types_Available[];

  /**
   * @generated from field: optional uint32 server_type_for_auth_services = 2;
   */
  serverTypeForAuthServices: number;
};

/**
 * Describes the message CMsgClientServersAvailable.
 * Use `create(CMsgClientServersAvailableSchema)` to create a new message.
 */
export const CMsgClientServersAvailableSchema: GenMessage<CMsgClientServersAvailable> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 26);

/**
 * @generated from message CMsgClientServersAvailable.Server_Types_Available
 */
export type CMsgClientServersAvailable_Server_Types_Available = Message<"CMsgClientServersAvailable.Server_Types_Available"> & {
  /**
   * @generated from field: optional uint32 server = 1;
   */
  server: number;

  /**
   * @generated from field: optional bool changed = 2;
   */
  changed: boolean;
};

/**
 * Describes the message CMsgClientServersAvailable.Server_Types_Available.
 * Use `create(CMsgClientServersAvailable_Server_Types_AvailableSchema)` to create a new message.
 */
export const CMsgClientServersAvailable_Server_Types_AvailableSchema: GenMessage<CMsgClientServersAvailable_Server_Types_Available> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 26, 0);

/**
 * @generated from message CMsgClientReportOverlayDetourFailure
 */
export type CMsgClientReportOverlayDetourFailure = Message<"CMsgClientReportOverlayDetourFailure"> & {
  /**
   * @generated from field: repeated string failure_strings = 1;
   */
  failureStrings: string[];
};

/**
 * Describes the message CMsgClientReportOverlayDetourFailure.
 * Use `create(CMsgClientReportOverlayDetourFailureSchema)` to create a new message.
 */
export const CMsgClientReportOverlayDetourFailureSchema: GenMessage<CMsgClientReportOverlayDetourFailure> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 27);

/**
 * @generated from message CMsgClientRequestEncryptedAppTicket
 */
export type CMsgClientRequestEncryptedAppTicket = Message<"CMsgClientRequestEncryptedAppTicket"> & {
  /**
   * @generated from field: optional uint32 app_id = 1;
   */
  appId: number;

  /**
   * @generated from field: optional bytes userdata = 2;
   */
  userdata: Uint8Array;
};

/**
 * Describes the message CMsgClientRequestEncryptedAppTicket.
 * Use `create(CMsgClientRequestEncryptedAppTicketSchema)` to create a new message.
 */
export const CMsgClientRequestEncryptedAppTicketSchema: GenMessage<CMsgClientRequestEncryptedAppTicket> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 28);

/**
 * @generated from message CMsgClientRequestEncryptedAppTicketResponse
 */
export type CMsgClientRequestEncryptedAppTicketResponse = Message<"CMsgClientRequestEncryptedAppTicketResponse"> & {
  /**
   * @generated from field: optional uint32 app_id = 1;
   */
  appId: number;

  /**
   * @generated from field: optional int32 eresult = 2 [default = 2];
   */
  eresult: number;

  /**
   * @generated from field: optional EncryptedAppTicket encrypted_app_ticket = 3;
   */
  encryptedAppTicket?: EncryptedAppTicket;
};

/**
 * Describes the message CMsgClientRequestEncryptedAppTicketResponse.
 * Use `create(CMsgClientRequestEncryptedAppTicketResponseSchema)` to create a new message.
 */
export const CMsgClientRequestEncryptedAppTicketResponseSchema: GenMessage<CMsgClientRequestEncryptedAppTicketResponse> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 29);

/**
 * @generated from message CMsgClientWalletInfoUpdate
 */
export type CMsgClientWalletInfoUpdate = Message<"CMsgClientWalletInfoUpdate"> & {
  /**
   * @generated from field: optional bool has_wallet = 1;
   */
  hasWallet: boolean;

  /**
   * @generated from field: optional int32 balance = 2;
   */
  balance: number;

  /**
   * @generated from field: optional int32 currency = 3;
   */
  currency: number;

  /**
   * @generated from field: optional int32 balance_delayed = 4;
   */
  balanceDelayed: number;

  /**
   * @generated from field: optional int64 balance64 = 5;
   */
  balance64: bigint;

  /**
   * @generated from field: optional int64 balance64_delayed = 6;
   */
  balance64Delayed: bigint;

  /**
   * @generated from field: optional int32 realm = 7;
   */
  realm: number;
};

/**
 * Describes the message CMsgClientWalletInfoUpdate.
 * Use `create(CMsgClientWalletInfoUpdateSchema)` to create a new message.
 */
export const CMsgClientWalletInfoUpdateSchema: GenMessage<CMsgClientWalletInfoUpdate> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 30);

/**
 * @generated from message CMsgClientAMGetClanOfficers
 */
export type CMsgClientAMGetClanOfficers = Message<"CMsgClientAMGetClanOfficers"> & {
  /**
   * @generated from field: optional fixed64 steamid_clan = 1;
   */
  steamidClan: bigint;
};

/**
 * Describes the message CMsgClientAMGetClanOfficers.
 * Use `create(CMsgClientAMGetClanOfficersSchema)` to create a new message.
 */
export const CMsgClientAMGetClanOfficersSchema: GenMessage<CMsgClientAMGetClanOfficers> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 31);

/**
 * @generated from message CMsgClientAMGetClanOfficersResponse
 */
export type CMsgClientAMGetClanOfficersResponse = Message<"CMsgClientAMGetClanOfficersResponse"> & {
  /**
   * @generated from field: optional int32 eresult = 1 [default = 2];
   */
  eresult: number;

  /**
   * @generated from field: optional fixed64 steamid_clan = 2;
   */
  steamidClan: bigint;

  /**
   * @generated from field: optional int32 officer_count = 3;
   */
  officerCount: number;
};

/**
 * Describes the message CMsgClientAMGetClanOfficersResponse.
 * Use `create(CMsgClientAMGetClanOfficersResponseSchema)` to create a new message.
 */
export const CMsgClientAMGetClanOfficersResponseSchema: GenMessage<CMsgClientAMGetClanOfficersResponse> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 32);

/**
 * @generated from message CMsgClientAMGetPersonaNameHistory
 */
export type CMsgClientAMGetPersonaNameHistory = Message<"CMsgClientAMGetPersonaNameHistory"> & {
  /**
   * @generated from field: optional int32 id_count = 1;
   */
  idCount: number;

  /**
   * @generated from field: repeated CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
   */
  Ids: CMsgClientAMGetPersonaNameHistory_IdInstance[];
};

/**
 * Describes the message CMsgClientAMGetPersonaNameHistory.
 * Use `create(CMsgClientAMGetPersonaNameHistorySchema)` to create a new message.
 */
export const CMsgClientAMGetPersonaNameHistorySchema: GenMessage<CMsgClientAMGetPersonaNameHistory> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 33);

/**
 * @generated from message CMsgClientAMGetPersonaNameHistory.IdInstance
 */
export type CMsgClientAMGetPersonaNameHistory_IdInstance = Message<"CMsgClientAMGetPersonaNameHistory.IdInstance"> & {
  /**
   * @generated from field: optional fixed64 steamid = 1;
   */
  steamid: bigint;
};

/**
 * Describes the message CMsgClientAMGetPersonaNameHistory.IdInstance.
 * Use `create(CMsgClientAMGetPersonaNameHistory_IdInstanceSchema)` to create a new message.
 */
export const CMsgClientAMGetPersonaNameHistory_IdInstanceSchema: GenMessage<CMsgClientAMGetPersonaNameHistory_IdInstance> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 33, 0);

/**
 * @generated from message CMsgClientAMGetPersonaNameHistoryResponse
 */
export type CMsgClientAMGetPersonaNameHistoryResponse = Message<"CMsgClientAMGetPersonaNameHistoryResponse"> & {
  /**
   * @generated from field: repeated CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
   */
  responses: CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance[];
};

/**
 * Describes the message CMsgClientAMGetPersonaNameHistoryResponse.
 * Use `create(CMsgClientAMGetPersonaNameHistoryResponseSchema)` to create a new message.
 */
export const CMsgClientAMGetPersonaNameHistoryResponseSchema: GenMessage<CMsgClientAMGetPersonaNameHistoryResponse> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 34);

/**
 * @generated from message CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance
 */
export type CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance = Message<"CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance"> & {
  /**
   * @generated from field: optional int32 eresult = 1 [default = 2];
   */
  eresult: number;

  /**
   * @generated from field: optional fixed64 steamid = 2;
   */
  steamid: bigint;

  /**
   * @generated from field: repeated CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
   */
  names: CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance[];
};

/**
 * Describes the message CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.
 * Use `create(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceSchema)` to create a new message.
 */
export const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceSchema: GenMessage<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 34, 0);

/**
 * @generated from message CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance
 */
export type CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance = Message<"CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance"> & {
  /**
   * @generated from field: optional fixed32 name_since = 1;
   */
  nameSince: number;

  /**
   * @generated from field: optional string name = 2;
   */
  name: string;
};

/**
 * Describes the message CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.
 * Use `create(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceSchema)` to create a new message.
 */
export const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceSchema: GenMessage<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 34, 0, 0);

/**
 * @generated from message CMsgClientDeregisterWithServer
 */
export type CMsgClientDeregisterWithServer = Message<"CMsgClientDeregisterWithServer"> & {
  /**
   * @generated from field: optional uint32 eservertype = 1;
   */
  eservertype: number;

  /**
   * @generated from field: optional uint32 app_id = 2;
   */
  appId: number;
};

/**
 * Describes the message CMsgClientDeregisterWithServer.
 * Use `create(CMsgClientDeregisterWithServerSchema)` to create a new message.
 */
export const CMsgClientDeregisterWithServerSchema: GenMessage<CMsgClientDeregisterWithServer> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 35);

/**
 * @generated from message CMsgClientClanState
 */
export type CMsgClientClanState = Message<"CMsgClientClanState"> & {
  /**
   * @generated from field: optional fixed64 steamid_clan = 1;
   */
  steamidClan: bigint;

  /**
   * @generated from field: optional uint32 clan_account_flags = 3;
   */
  clanAccountFlags: number;

  /**
   * @generated from field: optional CMsgClientClanState.NameInfo name_info = 4;
   */
  nameInfo?: CMsgClientClanState_NameInfo;

  /**
   * @generated from field: optional CMsgClientClanState.UserCounts user_counts = 5;
   */
  userCounts?: CMsgClientClanState_UserCounts;

  /**
   * @generated from field: repeated CMsgClientClanState.Event events = 6;
   */
  events: CMsgClientClanState_Event[];

  /**
   * @generated from field: repeated CMsgClientClanState.Event announcements = 7;
   */
  announcements: CMsgClientClanState_Event[];

  /**
   * @generated from field: optional bool chat_room_private = 8;
   */
  chatRoomPrivate: boolean;
};

/**
 * Describes the message CMsgClientClanState.
 * Use `create(CMsgClientClanStateSchema)` to create a new message.
 */
export const CMsgClientClanStateSchema: GenMessage<CMsgClientClanState> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 36);

/**
 * @generated from message CMsgClientClanState.NameInfo
 */
export type CMsgClientClanState_NameInfo = Message<"CMsgClientClanState.NameInfo"> & {
  /**
   * @generated from field: optional string clan_name = 1;
   */
  clanName: string;

  /**
   * @generated from field: optional bytes sha_avatar = 2;
   */
  shaAvatar: Uint8Array;
};

/**
 * Describes the message CMsgClientClanState.NameInfo.
 * Use `create(CMsgClientClanState_NameInfoSchema)` to create a new message.
 */
export const CMsgClientClanState_NameInfoSchema: GenMessage<CMsgClientClanState_NameInfo> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 36, 0);

/**
 * @generated from message CMsgClientClanState.UserCounts
 */
export type CMsgClientClanState_UserCounts = Message<"CMsgClientClanState.UserCounts"> & {
  /**
   * @generated from field: optional uint32 members = 1;
   */
  members: number;

  /**
   * @generated from field: optional uint32 online = 2;
   */
  online: number;

  /**
   * @generated from field: optional uint32 chatting = 3;
   */
  chatting: number;

  /**
   * @generated from field: optional uint32 in_game = 4;
   */
  inGame: number;

  /**
   * @generated from field: optional uint32 chat_room_members = 5;
   */
  chatRoomMembers: number;
};

/**
 * Describes the message CMsgClientClanState.UserCounts.
 * Use `create(CMsgClientClanState_UserCountsSchema)` to create a new message.
 */
export const CMsgClientClanState_UserCountsSchema: GenMessage<CMsgClientClanState_UserCounts> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 36, 1);

/**
 * @generated from message CMsgClientClanState.Event
 */
export type CMsgClientClanState_Event = Message<"CMsgClientClanState.Event"> & {
  /**
   * @generated from field: optional fixed64 gid = 1;
   */
  gid: bigint;

  /**
   * @generated from field: optional uint32 event_time = 2;
   */
  eventTime: number;

  /**
   * @generated from field: optional string headline = 3;
   */
  headline: string;

  /**
   * @generated from field: optional fixed64 game_id = 4;
   */
  gameId: bigint;

  /**
   * @generated from field: optional bool just_posted = 5;
   */
  justPosted: boolean;
};

/**
 * Describes the message CMsgClientClanState.Event.
 * Use `create(CMsgClientClanState_EventSchema)` to create a new message.
 */
export const CMsgClientClanState_EventSchema: GenMessage<CMsgClientClanState_Event> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver, 36, 2);

