// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file steammessages_clientserver_gameservers.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { CMsgIPAddress } from "./steammessages_base_pb";
import { file_steammessages_base } from "./steammessages_base_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file steammessages_clientserver_gameservers.proto.
 */
export const file_steammessages_clientserver_gameservers: GenFile = /*@__PURE__*/
  fileDesc("CixzdGVhbW1lc3NhZ2VzX2NsaWVudHNlcnZlcl9nYW1lc2VydmVycy5wcm90byLtAQoQQ01zZ0dTU2VydmVyVHlwZRIVCg1hcHBfaWRfc2VydmVkGAEgASgNEg0KBWZsYWdzGAIgASgNEiIKGmRlcHJlY2F0ZWRfZ2FtZV9pcF9hZGRyZXNzGAMgASgNEhEKCWdhbWVfcG9ydBgEIAEoDRIQCghnYW1lX2RpchgFIAEoCRIUCgxnYW1lX3ZlcnNpb24YBiABKAkSFwoPZ2FtZV9xdWVyeV9wb3J0GAcgASgNEhcKD2dhbWVfcG9ydF9sb2NhbBgKIAEoDRIRCglzZHJfbG9nb24YCCABKAwSDwoHZmFrZV9pcBgJIAEoByI6ChFDTXNnR1NTdGF0dXNSZXBseRIRCglpc19zZWN1cmUYASABKAgSEgoKaXNfdmFsdmVkcxgCIAEoCCKpAQoQQ01zZ0dTUGxheWVyTGlzdBIpCgdwbGF5ZXJzGAEgAygLMhguQ01zZ0dTUGxheWVyTGlzdC5QbGF5ZXIaagoGUGxheWVyEhAKCHN0ZWFtX2lkGAEgASgEEhwKFGRlcHJlY2F0ZWRfcHVibGljX2lwGAIgASgNEg0KBXRva2VuGAMgASgMEiEKCXB1YmxpY19pcBgEIAEoCzIOLkNNc2dJUEFkZHJlc3MidQoRQ01zZ0dTVXNlclBsYXlpbmcSEAoIc3RlYW1faWQYASABKAYSHAoUZGVwcmVjYXRlZF9wdWJsaWNfaXAYAiABKA0SDQoFdG9rZW4YAyABKAwSIQoJcHVibGljX2lwGAQgASgLMg4uQ01zZ0lQQWRkcmVzcyIqChZDTXNnR1NEaXNjb25uZWN0Tm90aWNlEhAKCHN0ZWFtX2lkGAEgASgGIpcEChJDTXNnR2FtZVNlcnZlckRhdGESEAoIcmV2aXNpb24YGCABKA0SEgoKcXVlcnlfcG9ydBgDIAEoDRIRCglnYW1lX3BvcnQYBCABKA0SFgoOc3BlY3RhdG9yX3BvcnQYBSABKA0SEwoLc2VydmVyX25hbWUYFiABKAkSGAoQZ2FtZV9kZXNjcmlwdGlvbhgdIAEoCRIdChVzcGVjdGF0b3Jfc2VydmVyX25hbWUYGyABKAkSDwoHZmFrZV9pcBgcIAEoBxIZChFzZHJfcGluZ19sb2NhdGlvbhgeIAEoCRIOCgZhcHBfaWQYBiABKA0SDwoHZ2FtZWRpchgHIAEoCRIPCgd2ZXJzaW9uGAggASgJEg8KB3Byb2R1Y3QYCSABKAkSDgoGcmVnaW9uGAogASgJEisKB3BsYXllcnMYCyADKAsyGi5DTXNnR2FtZVNlcnZlckRhdGEuUGxheWVyEhMKC21heF9wbGF5ZXJzGAwgASgNEhEKCWJvdF9jb3VudBgNIAEoDRIQCghwYXNzd29yZBgOIAEoCBIOCgZzZWN1cmUYDyABKAgSEQoJZGVkaWNhdGVkGBAgASgIEgoKAm9zGBEgASgJEhEKCWdhbWVfZGF0YRgSIAEoCRIRCglnYW1lX3R5cGUYFCABKAkSCwoDbWFwGBUgASgJGhoKBlBsYXllchIQCghzdGVhbV9pZBgBIAEoBiJNChRDTXNnR2FtZVNlcnZlclJlbW92ZRIaChJsZWdhY3lfc3RlYW1faWRfZ3MYASABKAYSGQoRbGVnYWN5X3F1ZXJ5X3BvcnQYAyABKA0inQEKGENNc2dDbGllbnRHTVNTZXJ2ZXJRdWVyeRIOCgZhcHBfaWQYASABKA0SFwoPZ2VvX2xvY2F0aW9uX2lwGAIgASgNEhMKC3JlZ2lvbl9jb2RlGAMgASgNEhMKC2ZpbHRlcl90ZXh0GAQgASgJEhMKC21heF9zZXJ2ZXJzGAUgASgNEhkKEXNkcl9waW5nX2xvY2F0aW9uGAYgASgJIqUHCiBDTXNnR01TQ2xpZW50U2VydmVyUXVlcnlSZXNwb25zZRI5CgdzZXJ2ZXJzGAEgAygLMiguQ01zZ0dNU0NsaWVudFNlcnZlclF1ZXJ5UmVzcG9uc2UuU2VydmVyEg0KBWVycm9yGAIgASgJEkUKE2RlZmF1bHRfc2VydmVyX2RhdGEYAyABKAsyKC5DTXNnR01TQ2xpZW50U2VydmVyUXVlcnlSZXNwb25zZS5TZXJ2ZXISFgoOc2VydmVyX3N0cmluZ3MYBCADKAkaoAUKBlNlcnZlchIcChRkZXByZWNhdGVkX3NlcnZlcl9pcBgBIAEoDRISCgpxdWVyeV9wb3J0GAIgASgNEhQKDGF1dGhfcGxheWVycxgDIAEoDRIhCglzZXJ2ZXJfaXAYBCABKAsyDi5DTXNnSVBBZGRyZXNzEhAKCHN0ZWFtX2lkGAYgASgGEhAKCHJldmlzaW9uGAcgASgNEg8KB3BsYXllcnMYCCABKA0SEQoJZ2FtZV9wb3J0GAkgASgNEhEKCXNkcl9wb3BpZBgKIAEoBxIZChFzZHJfcGluZ19sb2NhdGlvbhggIAEoCRINCgVmbGFncxgLIAEoDRIOCgZhcHBfaWQYDCABKA0SEwoLbWF4X3BsYXllcnMYDSABKA0SDAoEYm90cxgOIAEoDRIWCg5zcGVjdGF0b3JfcG9ydBgPIAEoDRITCgtnYW1lZGlyX3N0chgQIAEoCRIYChBnYW1lZGlyX3N0cmluZGV4GBEgASgNEg8KB21hcF9zdHIYEiABKAkSFAoMbWFwX3N0cmluZGV4GBMgASgNEhAKCG5hbWVfc3RyGBQgASgJEhUKDW5hbWVfc3RyaW5kZXgYFSABKA0SHAoUZ2FtZV9kZXNjcmlwdGlvbl9zdHIYFiABKAkSIQoZZ2FtZV9kZXNjcmlwdGlvbl9zdHJpbmRleBgXIAEoDRITCgt2ZXJzaW9uX3N0chgYIAEoCRIYChB2ZXJzaW9uX3N0cmluZGV4GBkgASgNEhQKDGdhbWV0eXBlX3N0chgaIAEoCRIZChFnYW1ldHlwZV9zdHJpbmRleBgbIAEoDRIaChJzcGVjdGF0b3JfbmFtZV9zdHIYHiABKAkSHwoXc3BlY3RhdG9yX25hbWVfc3RyaW5kZXgYHyABKA0iNQoGRUZsYWdzEhcKE2tfRUZsYWdfSGFzUGFzc3dvcmQQARISCg5rX0VGbGFnX1NlY3VyZRACIk8KF0NNc2dHYW1lU2VydmVyT3V0T2ZEYXRlEhMKC3N0ZWFtX2lkX2dzGAEgASgGEg4KBnJlamVjdBgCIAEoCBIPCgdtZXNzYWdlGAMgASgJIjAKF0NNc2dHU0Fzc29jaWF0ZVdpdGhDbGFuEhUKDXN0ZWFtX2lkX2NsYW4YASABKAYiTAofQ01zZ0dTQXNzb2NpYXRlV2l0aENsYW5SZXNwb25zZRIVCg1zdGVhbV9pZF9jbGFuGAEgASgGEhIKB2VyZXN1bHQYAiABKA06ATIiQQojQ01zZ0dTQ29tcHV0ZU5ld1BsYXllckNvbXBhdGliaWxpdHkSGgoSc3RlYW1faWRfY2FuZGlkYXRlGAEgASgGIs8BCitDTXNnR1NDb21wdXRlTmV3UGxheWVyQ29tcGF0aWJpbGl0eVJlc3BvbnNlEhoKEnN0ZWFtX2lkX2NhbmRpZGF0ZRgBIAEoBhISCgdlcmVzdWx0GAIgASgNOgEyEhYKDmlzX2NsYW5fbWVtYmVyGAMgASgIEhgKEGN0X2RvbnRfbGlrZV95b3UYBCABKAUSGAoQY3RfeW91X2RvbnRfbGlrZRgFIAEoBRIkChxjdF9jbGFubWVtYmVyc19kb250X2xpa2VfeW91GAYgASgFQgVIAYABAA", [file_steammessages_base]);

/**
 * @generated from message CMsgGSServerType
 */
export type CMsgGSServerType = Message<"CMsgGSServerType"> & {
  /**
   * @generated from field: optional uint32 app_id_served = 1;
   */
  appIdServed: number;

  /**
   * @generated from field: optional uint32 flags = 2;
   */
  flags: number;

  /**
   * @generated from field: optional uint32 deprecated_game_ip_address = 3;
   */
  deprecatedGameIpAddress: number;

  /**
   * @generated from field: optional uint32 game_port = 4;
   */
  gamePort: number;

  /**
   * @generated from field: optional string game_dir = 5;
   */
  gameDir: string;

  /**
   * @generated from field: optional string game_version = 6;
   */
  gameVersion: string;

  /**
   * @generated from field: optional uint32 game_query_port = 7;
   */
  gameQueryPort: number;

  /**
   * @generated from field: optional uint32 game_port_local = 10;
   */
  gamePortLocal: number;

  /**
   * @generated from field: optional bytes sdr_logon = 8;
   */
  sdrLogon: Uint8Array;

  /**
   * @generated from field: optional fixed32 fake_ip = 9;
   */
  fakeIp: number;
};

/**
 * Describes the message CMsgGSServerType.
 * Use `create(CMsgGSServerTypeSchema)` to create a new message.
 */
export const CMsgGSServerTypeSchema: GenMessage<CMsgGSServerType> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 0);

/**
 * @generated from message CMsgGSStatusReply
 */
export type CMsgGSStatusReply = Message<"CMsgGSStatusReply"> & {
  /**
   * @generated from field: optional bool is_secure = 1;
   */
  isSecure: boolean;

  /**
   * @generated from field: optional bool is_valveds = 2;
   */
  isValveds: boolean;
};

/**
 * Describes the message CMsgGSStatusReply.
 * Use `create(CMsgGSStatusReplySchema)` to create a new message.
 */
export const CMsgGSStatusReplySchema: GenMessage<CMsgGSStatusReply> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 1);

/**
 * @generated from message CMsgGSPlayerList
 */
export type CMsgGSPlayerList = Message<"CMsgGSPlayerList"> & {
  /**
   * @generated from field: repeated CMsgGSPlayerList.Player players = 1;
   */
  players: CMsgGSPlayerList_Player[];
};

/**
 * Describes the message CMsgGSPlayerList.
 * Use `create(CMsgGSPlayerListSchema)` to create a new message.
 */
export const CMsgGSPlayerListSchema: GenMessage<CMsgGSPlayerList> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 2);

/**
 * @generated from message CMsgGSPlayerList.Player
 */
export type CMsgGSPlayerList_Player = Message<"CMsgGSPlayerList.Player"> & {
  /**
   * @generated from field: optional uint64 steam_id = 1;
   */
  steamId: bigint;

  /**
   * @generated from field: optional uint32 deprecated_public_ip = 2;
   */
  deprecatedPublicIp: number;

  /**
   * @generated from field: optional bytes token = 3;
   */
  token: Uint8Array;

  /**
   * @generated from field: optional CMsgIPAddress public_ip = 4;
   */
  publicIp?: CMsgIPAddress;
};

/**
 * Describes the message CMsgGSPlayerList.Player.
 * Use `create(CMsgGSPlayerList_PlayerSchema)` to create a new message.
 */
export const CMsgGSPlayerList_PlayerSchema: GenMessage<CMsgGSPlayerList_Player> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 2, 0);

/**
 * @generated from message CMsgGSUserPlaying
 */
export type CMsgGSUserPlaying = Message<"CMsgGSUserPlaying"> & {
  /**
   * @generated from field: optional fixed64 steam_id = 1;
   */
  steamId: bigint;

  /**
   * @generated from field: optional uint32 deprecated_public_ip = 2;
   */
  deprecatedPublicIp: number;

  /**
   * @generated from field: optional bytes token = 3;
   */
  token: Uint8Array;

  /**
   * @generated from field: optional CMsgIPAddress public_ip = 4;
   */
  publicIp?: CMsgIPAddress;
};

/**
 * Describes the message CMsgGSUserPlaying.
 * Use `create(CMsgGSUserPlayingSchema)` to create a new message.
 */
export const CMsgGSUserPlayingSchema: GenMessage<CMsgGSUserPlaying> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 3);

/**
 * @generated from message CMsgGSDisconnectNotice
 */
export type CMsgGSDisconnectNotice = Message<"CMsgGSDisconnectNotice"> & {
  /**
   * @generated from field: optional fixed64 steam_id = 1;
   */
  steamId: bigint;
};

/**
 * Describes the message CMsgGSDisconnectNotice.
 * Use `create(CMsgGSDisconnectNoticeSchema)` to create a new message.
 */
export const CMsgGSDisconnectNoticeSchema: GenMessage<CMsgGSDisconnectNotice> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 4);

/**
 * @generated from message CMsgGameServerData
 */
export type CMsgGameServerData = Message<"CMsgGameServerData"> & {
  /**
   * @generated from field: optional uint32 revision = 24;
   */
  revision: number;

  /**
   * @generated from field: optional uint32 query_port = 3;
   */
  queryPort: number;

  /**
   * @generated from field: optional uint32 game_port = 4;
   */
  gamePort: number;

  /**
   * @generated from field: optional uint32 spectator_port = 5;
   */
  spectatorPort: number;

  /**
   * @generated from field: optional string server_name = 22;
   */
  serverName: string;

  /**
   * @generated from field: optional string game_description = 29;
   */
  gameDescription: string;

  /**
   * @generated from field: optional string spectator_server_name = 27;
   */
  spectatorServerName: string;

  /**
   * @generated from field: optional fixed32 fake_ip = 28;
   */
  fakeIp: number;

  /**
   * @generated from field: optional string sdr_ping_location = 30;
   */
  sdrPingLocation: string;

  /**
   * @generated from field: optional uint32 app_id = 6;
   */
  appId: number;

  /**
   * @generated from field: optional string gamedir = 7;
   */
  gamedir: string;

  /**
   * @generated from field: optional string version = 8;
   */
  version: string;

  /**
   * @generated from field: optional string product = 9;
   */
  product: string;

  /**
   * @generated from field: optional string region = 10;
   */
  region: string;

  /**
   * @generated from field: repeated CMsgGameServerData.Player players = 11;
   */
  players: CMsgGameServerData_Player[];

  /**
   * @generated from field: optional uint32 max_players = 12;
   */
  maxPlayers: number;

  /**
   * @generated from field: optional uint32 bot_count = 13;
   */
  botCount: number;

  /**
   * @generated from field: optional bool password = 14;
   */
  password: boolean;

  /**
   * @generated from field: optional bool secure = 15;
   */
  secure: boolean;

  /**
   * @generated from field: optional bool dedicated = 16;
   */
  dedicated: boolean;

  /**
   * @generated from field: optional string os = 17;
   */
  os: string;

  /**
   * @generated from field: optional string game_data = 18;
   */
  gameData: string;

  /**
   * @generated from field: optional string game_type = 20;
   */
  gameType: string;

  /**
   * @generated from field: optional string map = 21;
   */
  map: string;
};

/**
 * Describes the message CMsgGameServerData.
 * Use `create(CMsgGameServerDataSchema)` to create a new message.
 */
export const CMsgGameServerDataSchema: GenMessage<CMsgGameServerData> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 5);

/**
 * @generated from message CMsgGameServerData.Player
 */
export type CMsgGameServerData_Player = Message<"CMsgGameServerData.Player"> & {
  /**
   * @generated from field: optional fixed64 steam_id = 1;
   */
  steamId: bigint;
};

/**
 * Describes the message CMsgGameServerData.Player.
 * Use `create(CMsgGameServerData_PlayerSchema)` to create a new message.
 */
export const CMsgGameServerData_PlayerSchema: GenMessage<CMsgGameServerData_Player> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 5, 0);

/**
 * @generated from message CMsgGameServerRemove
 */
export type CMsgGameServerRemove = Message<"CMsgGameServerRemove"> & {
  /**
   * @generated from field: optional fixed64 legacy_steam_id_gs = 1;
   */
  legacySteamIdGs: bigint;

  /**
   * @generated from field: optional uint32 legacy_query_port = 3;
   */
  legacyQueryPort: number;
};

/**
 * Describes the message CMsgGameServerRemove.
 * Use `create(CMsgGameServerRemoveSchema)` to create a new message.
 */
export const CMsgGameServerRemoveSchema: GenMessage<CMsgGameServerRemove> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 6);

/**
 * @generated from message CMsgClientGMSServerQuery
 */
export type CMsgClientGMSServerQuery = Message<"CMsgClientGMSServerQuery"> & {
  /**
   * @generated from field: optional uint32 app_id = 1;
   */
  appId: number;

  /**
   * @generated from field: optional uint32 geo_location_ip = 2;
   */
  geoLocationIp: number;

  /**
   * @generated from field: optional uint32 region_code = 3;
   */
  regionCode: number;

  /**
   * @generated from field: optional string filter_text = 4;
   */
  filterText: string;

  /**
   * @generated from field: optional uint32 max_servers = 5;
   */
  maxServers: number;

  /**
   * @generated from field: optional string sdr_ping_location = 6;
   */
  sdrPingLocation: string;
};

/**
 * Describes the message CMsgClientGMSServerQuery.
 * Use `create(CMsgClientGMSServerQuerySchema)` to create a new message.
 */
export const CMsgClientGMSServerQuerySchema: GenMessage<CMsgClientGMSServerQuery> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 7);

/**
 * @generated from message CMsgGMSClientServerQueryResponse
 */
export type CMsgGMSClientServerQueryResponse = Message<"CMsgGMSClientServerQueryResponse"> & {
  /**
   * @generated from field: repeated CMsgGMSClientServerQueryResponse.Server servers = 1;
   */
  servers: CMsgGMSClientServerQueryResponse_Server[];

  /**
   * @generated from field: optional string error = 2;
   */
  error: string;

  /**
   * @generated from field: optional CMsgGMSClientServerQueryResponse.Server default_server_data = 3;
   */
  defaultServerData?: CMsgGMSClientServerQueryResponse_Server;

  /**
   * @generated from field: repeated string server_strings = 4;
   */
  serverStrings: string[];
};

/**
 * Describes the message CMsgGMSClientServerQueryResponse.
 * Use `create(CMsgGMSClientServerQueryResponseSchema)` to create a new message.
 */
export const CMsgGMSClientServerQueryResponseSchema: GenMessage<CMsgGMSClientServerQueryResponse> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 8);

/**
 * @generated from message CMsgGMSClientServerQueryResponse.Server
 */
export type CMsgGMSClientServerQueryResponse_Server = Message<"CMsgGMSClientServerQueryResponse.Server"> & {
  /**
   * @generated from field: optional uint32 deprecated_server_ip = 1;
   */
  deprecatedServerIp: number;

  /**
   * @generated from field: optional uint32 query_port = 2;
   */
  queryPort: number;

  /**
   * @generated from field: optional uint32 auth_players = 3;
   */
  authPlayers: number;

  /**
   * @generated from field: optional CMsgIPAddress server_ip = 4;
   */
  serverIp?: CMsgIPAddress;

  /**
   * @generated from field: optional fixed64 steam_id = 6;
   */
  steamId: bigint;

  /**
   * @generated from field: optional uint32 revision = 7;
   */
  revision: number;

  /**
   * @generated from field: optional uint32 players = 8;
   */
  players: number;

  /**
   * @generated from field: optional uint32 game_port = 9;
   */
  gamePort: number;

  /**
   * @generated from field: optional fixed32 sdr_popid = 10;
   */
  sdrPopid: number;

  /**
   * @generated from field: optional string sdr_ping_location = 32;
   */
  sdrPingLocation: string;

  /**
   * @generated from field: optional uint32 flags = 11;
   */
  flags: number;

  /**
   * @generated from field: optional uint32 app_id = 12;
   */
  appId: number;

  /**
   * @generated from field: optional uint32 max_players = 13;
   */
  maxPlayers: number;

  /**
   * @generated from field: optional uint32 bots = 14;
   */
  bots: number;

  /**
   * @generated from field: optional uint32 spectator_port = 15;
   */
  spectatorPort: number;

  /**
   * @generated from field: optional string gamedir_str = 16;
   */
  gamedirStr: string;

  /**
   * @generated from field: optional uint32 gamedir_strindex = 17;
   */
  gamedirStrindex: number;

  /**
   * @generated from field: optional string map_str = 18;
   */
  mapStr: string;

  /**
   * @generated from field: optional uint32 map_strindex = 19;
   */
  mapStrindex: number;

  /**
   * @generated from field: optional string name_str = 20;
   */
  nameStr: string;

  /**
   * @generated from field: optional uint32 name_strindex = 21;
   */
  nameStrindex: number;

  /**
   * @generated from field: optional string game_description_str = 22;
   */
  gameDescriptionStr: string;

  /**
   * @generated from field: optional uint32 game_description_strindex = 23;
   */
  gameDescriptionStrindex: number;

  /**
   * @generated from field: optional string version_str = 24;
   */
  versionStr: string;

  /**
   * @generated from field: optional uint32 version_strindex = 25;
   */
  versionStrindex: number;

  /**
   * @generated from field: optional string gametype_str = 26;
   */
  gametypeStr: string;

  /**
   * @generated from field: optional uint32 gametype_strindex = 27;
   */
  gametypeStrindex: number;

  /**
   * @generated from field: optional string spectator_name_str = 30;
   */
  spectatorNameStr: string;

  /**
   * @generated from field: optional uint32 spectator_name_strindex = 31;
   */
  spectatorNameStrindex: number;
};

/**
 * Describes the message CMsgGMSClientServerQueryResponse.Server.
 * Use `create(CMsgGMSClientServerQueryResponse_ServerSchema)` to create a new message.
 */
export const CMsgGMSClientServerQueryResponse_ServerSchema: GenMessage<CMsgGMSClientServerQueryResponse_Server> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 8, 0);

/**
 * @generated from enum CMsgGMSClientServerQueryResponse.EFlags
 */
export enum CMsgGMSClientServerQueryResponse_EFlags {
  /**
   * @generated from enum value: k_EFlag_HasPassword = 1;
   */
  k_EFlag_HasPassword = 1,

  /**
   * @generated from enum value: k_EFlag_Secure = 2;
   */
  k_EFlag_Secure = 2,
}

/**
 * Describes the enum CMsgGMSClientServerQueryResponse.EFlags.
 */
export const CMsgGMSClientServerQueryResponse_EFlagsSchema: GenEnum<CMsgGMSClientServerQueryResponse_EFlags> = /*@__PURE__*/
  enumDesc(file_steammessages_clientserver_gameservers, 8, 0);

/**
 * @generated from message CMsgGameServerOutOfDate
 */
export type CMsgGameServerOutOfDate = Message<"CMsgGameServerOutOfDate"> & {
  /**
   * @generated from field: optional fixed64 steam_id_gs = 1;
   */
  steamIdGs: bigint;

  /**
   * @generated from field: optional bool reject = 2;
   */
  reject: boolean;

  /**
   * @generated from field: optional string message = 3;
   */
  message: string;
};

/**
 * Describes the message CMsgGameServerOutOfDate.
 * Use `create(CMsgGameServerOutOfDateSchema)` to create a new message.
 */
export const CMsgGameServerOutOfDateSchema: GenMessage<CMsgGameServerOutOfDate> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 9);

/**
 * @generated from message CMsgGSAssociateWithClan
 */
export type CMsgGSAssociateWithClan = Message<"CMsgGSAssociateWithClan"> & {
  /**
   * @generated from field: optional fixed64 steam_id_clan = 1;
   */
  steamIdClan: bigint;
};

/**
 * Describes the message CMsgGSAssociateWithClan.
 * Use `create(CMsgGSAssociateWithClanSchema)` to create a new message.
 */
export const CMsgGSAssociateWithClanSchema: GenMessage<CMsgGSAssociateWithClan> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 10);

/**
 * @generated from message CMsgGSAssociateWithClanResponse
 */
export type CMsgGSAssociateWithClanResponse = Message<"CMsgGSAssociateWithClanResponse"> & {
  /**
   * @generated from field: optional fixed64 steam_id_clan = 1;
   */
  steamIdClan: bigint;

  /**
   * @generated from field: optional uint32 eresult = 2 [default = 2];
   */
  eresult: number;
};

/**
 * Describes the message CMsgGSAssociateWithClanResponse.
 * Use `create(CMsgGSAssociateWithClanResponseSchema)` to create a new message.
 */
export const CMsgGSAssociateWithClanResponseSchema: GenMessage<CMsgGSAssociateWithClanResponse> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 11);

/**
 * @generated from message CMsgGSComputeNewPlayerCompatibility
 */
export type CMsgGSComputeNewPlayerCompatibility = Message<"CMsgGSComputeNewPlayerCompatibility"> & {
  /**
   * @generated from field: optional fixed64 steam_id_candidate = 1;
   */
  steamIdCandidate: bigint;
};

/**
 * Describes the message CMsgGSComputeNewPlayerCompatibility.
 * Use `create(CMsgGSComputeNewPlayerCompatibilitySchema)` to create a new message.
 */
export const CMsgGSComputeNewPlayerCompatibilitySchema: GenMessage<CMsgGSComputeNewPlayerCompatibility> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 12);

/**
 * @generated from message CMsgGSComputeNewPlayerCompatibilityResponse
 */
export type CMsgGSComputeNewPlayerCompatibilityResponse = Message<"CMsgGSComputeNewPlayerCompatibilityResponse"> & {
  /**
   * @generated from field: optional fixed64 steam_id_candidate = 1;
   */
  steamIdCandidate: bigint;

  /**
   * @generated from field: optional uint32 eresult = 2 [default = 2];
   */
  eresult: number;

  /**
   * @generated from field: optional bool is_clan_member = 3;
   */
  isClanMember: boolean;

  /**
   * @generated from field: optional int32 ct_dont_like_you = 4;
   */
  ctDontLikeYou: number;

  /**
   * @generated from field: optional int32 ct_you_dont_like = 5;
   */
  ctYouDontLike: number;

  /**
   * @generated from field: optional int32 ct_clanmembers_dont_like_you = 6;
   */
  ctClanmembersDontLikeYou: number;
};

/**
 * Describes the message CMsgGSComputeNewPlayerCompatibilityResponse.
 * Use `create(CMsgGSComputeNewPlayerCompatibilityResponseSchema)` to create a new message.
 */
export const CMsgGSComputeNewPlayerCompatibilityResponseSchema: GenMessage<CMsgGSComputeNewPlayerCompatibilityResponse> = /*@__PURE__*/
  messageDesc(file_steammessages_clientserver_gameservers, 13);

