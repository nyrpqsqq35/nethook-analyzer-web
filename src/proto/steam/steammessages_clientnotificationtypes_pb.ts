// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file steammessages_clientnotificationtypes.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file steammessages_clientnotificationtypes.proto.
 */
export const file_steammessages_clientnotificationtypes: GenFile = /*@__PURE__*/
  fileDesc("");

/**
 * @generated from message CClientNotificationCloudSyncFailure
 */
export type CClientNotificationCloudSyncFailure = Message<"CClientNotificationCloudSyncFailure"> & {
  /**
   * @generated from field: optional uint32 appid = 1;
   */
  appid: number;
};

/**
 * Describes the message CClientNotificationCloudSyncFailure.
 * Use `create(CClientNotificationCloudSyncFailureSchema)` to create a new message.
 */
export const CClientNotificationCloudSyncFailureSchema: GenMessage<CClientNotificationCloudSyncFailure> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 0);

/**
 * @generated from message CClientNotificationCloudSyncConflict
 */
export type CClientNotificationCloudSyncConflict = Message<"CClientNotificationCloudSyncConflict"> & {
  /**
   * @generated from field: optional uint32 appid = 1;
   */
  appid: number;
};

/**
 * Describes the message CClientNotificationCloudSyncConflict.
 * Use `create(CClientNotificationCloudSyncConflictSchema)` to create a new message.
 */
export const CClientNotificationCloudSyncConflictSchema: GenMessage<CClientNotificationCloudSyncConflict> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 1);

/**
 * @generated from message CClientNotificationScreenshot
 */
export type CClientNotificationScreenshot = Message<"CClientNotificationScreenshot"> & {
  /**
   * @generated from field: optional string screenshot_handle = 1;
   */
  screenshotHandle: string;

  /**
   * @generated from field: optional string description = 2;
   */
  description: string;

  /**
   * @generated from field: optional string local_url = 3;
   */
  localUrl: string;
};

/**
 * Describes the message CClientNotificationScreenshot.
 * Use `create(CClientNotificationScreenshotSchema)` to create a new message.
 */
export const CClientNotificationScreenshotSchema: GenMessage<CClientNotificationScreenshot> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 2);

/**
 * @generated from message CClientNotificationDownloadCompleted
 */
export type CClientNotificationDownloadCompleted = Message<"CClientNotificationDownloadCompleted"> & {
  /**
   * @generated from field: optional uint32 appid = 1;
   */
  appid: number;

  /**
   * @generated from field: optional uint32 dlc_appid = 2;
   */
  dlcAppid: number;
};

/**
 * Describes the message CClientNotificationDownloadCompleted.
 * Use `create(CClientNotificationDownloadCompletedSchema)` to create a new message.
 */
export const CClientNotificationDownloadCompletedSchema: GenMessage<CClientNotificationDownloadCompleted> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 3);

/**
 * @generated from message CClientNotificationFriendInvite
 */
export type CClientNotificationFriendInvite = Message<"CClientNotificationFriendInvite"> & {
  /**
   * @generated from field: optional fixed64 steamid = 1;
   */
  steamid: bigint;
};

/**
 * Describes the message CClientNotificationFriendInvite.
 * Use `create(CClientNotificationFriendInviteSchema)` to create a new message.
 */
export const CClientNotificationFriendInviteSchema: GenMessage<CClientNotificationFriendInvite> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 4);

/**
 * @generated from message CClientNotificationFriendInviteRollup
 */
export type CClientNotificationFriendInviteRollup = Message<"CClientNotificationFriendInviteRollup"> & {
  /**
   * @generated from field: optional uint32 new_invite_count = 1;
   */
  newInviteCount: number;
};

/**
 * Describes the message CClientNotificationFriendInviteRollup.
 * Use `create(CClientNotificationFriendInviteRollupSchema)` to create a new message.
 */
export const CClientNotificationFriendInviteRollupSchema: GenMessage<CClientNotificationFriendInviteRollup> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 5);

/**
 * @generated from message CClientNotificationFriendInGame
 */
export type CClientNotificationFriendInGame = Message<"CClientNotificationFriendInGame"> & {
  /**
   * @generated from field: optional fixed64 steamid = 1;
   */
  steamid: bigint;

  /**
   * @generated from field: optional string game_name = 2;
   */
  gameName: string;
};

/**
 * Describes the message CClientNotificationFriendInGame.
 * Use `create(CClientNotificationFriendInGameSchema)` to create a new message.
 */
export const CClientNotificationFriendInGameSchema: GenMessage<CClientNotificationFriendInGame> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 6);

/**
 * @generated from message CClientNotificationFriendOnline
 */
export type CClientNotificationFriendOnline = Message<"CClientNotificationFriendOnline"> & {
  /**
   * @generated from field: optional fixed64 steamid = 1;
   */
  steamid: bigint;
};

/**
 * Describes the message CClientNotificationFriendOnline.
 * Use `create(CClientNotificationFriendOnlineSchema)` to create a new message.
 */
export const CClientNotificationFriendOnlineSchema: GenMessage<CClientNotificationFriendOnline> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 7);

/**
 * @generated from message CClientNotificationAchievement
 */
export type CClientNotificationAchievement = Message<"CClientNotificationAchievement"> & {
  /**
   * @generated from field: optional string achievement_id = 1;
   */
  achievementId: string;

  /**
   * @generated from field: optional uint32 appid = 2;
   */
  appid: number;

  /**
   * @generated from field: optional string name = 3;
   */
  name: string;

  /**
   * @generated from field: optional string description = 4;
   */
  description: string;

  /**
   * @generated from field: optional string image_url = 5;
   */
  imageUrl: string;

  /**
   * @generated from field: optional bool achieved = 6;
   */
  achieved: boolean;

  /**
   * @generated from field: optional uint32 rtime_unlocked = 7;
   */
  rtimeUnlocked: number;

  /**
   * @generated from field: optional float min_progress = 8;
   */
  minProgress: number;

  /**
   * @generated from field: optional float current_progress = 9;
   */
  currentProgress: number;

  /**
   * @generated from field: optional float max_progress = 10;
   */
  maxProgress: number;

  /**
   * @generated from field: optional float global_achieved_pct = 11;
   */
  globalAchievedPct: number;
};

/**
 * Describes the message CClientNotificationAchievement.
 * Use `create(CClientNotificationAchievementSchema)` to create a new message.
 */
export const CClientNotificationAchievementSchema: GenMessage<CClientNotificationAchievement> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 8);

/**
 * @generated from message CClientNotificationLowBattery
 */
export type CClientNotificationLowBattery = Message<"CClientNotificationLowBattery"> & {
  /**
   * @generated from field: optional float pct_remaining = 1;
   */
  pctRemaining: number;
};

/**
 * Describes the message CClientNotificationLowBattery.
 * Use `create(CClientNotificationLowBatterySchema)` to create a new message.
 */
export const CClientNotificationLowBatterySchema: GenMessage<CClientNotificationLowBattery> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 9);

/**
 * @generated from message CClientNotificationSystemUpdate
 */
export type CClientNotificationSystemUpdate = Message<"CClientNotificationSystemUpdate"> & {
  /**
   * @generated from field: optional ESystemUpdateNotificationType type = 1 [default = k_ESystemUpdateNotificationType_Invalid];
   */
  type: ESystemUpdateNotificationType;
};

/**
 * Describes the message CClientNotificationSystemUpdate.
 * Use `create(CClientNotificationSystemUpdateSchema)` to create a new message.
 */
export const CClientNotificationSystemUpdateSchema: GenMessage<CClientNotificationSystemUpdate> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 10);

/**
 * @generated from message CClientNotificationFriendMessage
 */
export type CClientNotificationFriendMessage = Message<"CClientNotificationFriendMessage"> & {
  /**
   * @generated from field: optional string tag = 1;
   */
  tag: string;

  /**
   * @generated from field: optional string steamid = 2;
   */
  steamid: string;

  /**
   * @generated from field: optional string title = 3;
   */
  title: string;

  /**
   * @generated from field: optional string body = 4;
   */
  body: string;

  /**
   * @generated from field: optional string icon = 5;
   */
  icon: string;

  /**
   * @generated from field: optional uint32 notificationid = 6;
   */
  notificationid: number;

  /**
   * @generated from field: optional string response_steamurl = 7;
   */
  responseSteamurl: string;
};

/**
 * Describes the message CClientNotificationFriendMessage.
 * Use `create(CClientNotificationFriendMessageSchema)` to create a new message.
 */
export const CClientNotificationFriendMessageSchema: GenMessage<CClientNotificationFriendMessage> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 11);

/**
 * @generated from message CClientNotificationGroupChatMessage
 */
export type CClientNotificationGroupChatMessage = Message<"CClientNotificationGroupChatMessage"> & {
  /**
   * @generated from field: optional string tag = 1;
   */
  tag: string;

  /**
   * @generated from field: optional string steamid_sender = 2;
   */
  steamidSender: string;

  /**
   * @generated from field: optional string chat_group_id = 3;
   */
  chatGroupId: string;

  /**
   * @generated from field: optional string chat_id = 4;
   */
  chatId: string;

  /**
   * @generated from field: optional string title = 5;
   */
  title: string;

  /**
   * @generated from field: optional string body = 6;
   */
  body: string;

  /**
   * @generated from field: optional string rawbody = 7;
   */
  rawbody: string;

  /**
   * @generated from field: optional string icon = 8;
   */
  icon: string;

  /**
   * @generated from field: optional uint32 notificationid = 9;
   */
  notificationid: number;
};

/**
 * Describes the message CClientNotificationGroupChatMessage.
 * Use `create(CClientNotificationGroupChatMessageSchema)` to create a new message.
 */
export const CClientNotificationGroupChatMessageSchema: GenMessage<CClientNotificationGroupChatMessage> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 12);

/**
 * @generated from message CClientNotificationFamilySharingDeviceAuthorizationChanged
 */
export type CClientNotificationFamilySharingDeviceAuthorizationChanged = Message<"CClientNotificationFamilySharingDeviceAuthorizationChanged"> & {
  /**
   * @generated from field: optional uint32 accountid_owner = 1;
   */
  accountidOwner: number;

  /**
   * @generated from field: optional bool authorized = 2;
   */
  authorized: boolean;
};

/**
 * Describes the message CClientNotificationFamilySharingDeviceAuthorizationChanged.
 * Use `create(CClientNotificationFamilySharingDeviceAuthorizationChangedSchema)` to create a new message.
 */
export const CClientNotificationFamilySharingDeviceAuthorizationChangedSchema: GenMessage<CClientNotificationFamilySharingDeviceAuthorizationChanged> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 13);

/**
 * @generated from message CClientNotificationFamilySharingStopPlaying
 */
export type CClientNotificationFamilySharingStopPlaying = Message<"CClientNotificationFamilySharingStopPlaying"> & {
  /**
   * @generated from field: optional uint32 accountid_owner = 1;
   */
  accountidOwner: number;

  /**
   * @generated from field: optional uint32 seconds_remaining = 2;
   */
  secondsRemaining: number;

  /**
   * @generated from field: optional uint32 appid = 3;
   */
  appid: number;
};

/**
 * Describes the message CClientNotificationFamilySharingStopPlaying.
 * Use `create(CClientNotificationFamilySharingStopPlayingSchema)` to create a new message.
 */
export const CClientNotificationFamilySharingStopPlayingSchema: GenMessage<CClientNotificationFamilySharingStopPlaying> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 14);

/**
 * @generated from message CClientNotificationFamilySharingLibraryAvailable
 */
export type CClientNotificationFamilySharingLibraryAvailable = Message<"CClientNotificationFamilySharingLibraryAvailable"> & {
  /**
   * @generated from field: optional uint32 accountid_owner = 1;
   */
  accountidOwner: number;
};

/**
 * Describes the message CClientNotificationFamilySharingLibraryAvailable.
 * Use `create(CClientNotificationFamilySharingLibraryAvailableSchema)` to create a new message.
 */
export const CClientNotificationFamilySharingLibraryAvailableSchema: GenMessage<CClientNotificationFamilySharingLibraryAvailable> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 15);

/**
 * @generated from message CClientNotificationIncomingVoiceChat
 */
export type CClientNotificationIncomingVoiceChat = Message<"CClientNotificationIncomingVoiceChat"> & {
  /**
   * @generated from field: optional fixed64 steamid = 1;
   */
  steamid: bigint;
};

/**
 * Describes the message CClientNotificationIncomingVoiceChat.
 * Use `create(CClientNotificationIncomingVoiceChatSchema)` to create a new message.
 */
export const CClientNotificationIncomingVoiceChatSchema: GenMessage<CClientNotificationIncomingVoiceChat> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 16);

/**
 * @generated from message CClientNotificationClaimSteamDeckRewards
 */
export type CClientNotificationClaimSteamDeckRewards = Message<"CClientNotificationClaimSteamDeckRewards"> & {
};

/**
 * Describes the message CClientNotificationClaimSteamDeckRewards.
 * Use `create(CClientNotificationClaimSteamDeckRewardsSchema)` to create a new message.
 */
export const CClientNotificationClaimSteamDeckRewardsSchema: GenMessage<CClientNotificationClaimSteamDeckRewards> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 17);

/**
 * @generated from message CClientNotificationGiftReceived
 */
export type CClientNotificationGiftReceived = Message<"CClientNotificationGiftReceived"> & {
  /**
   * @generated from field: optional string sender_name = 1;
   */
  senderName: string;
};

/**
 * Describes the message CClientNotificationGiftReceived.
 * Use `create(CClientNotificationGiftReceivedSchema)` to create a new message.
 */
export const CClientNotificationGiftReceivedSchema: GenMessage<CClientNotificationGiftReceived> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 18);

/**
 * @generated from message CClientNotificationItemAnnouncement
 */
export type CClientNotificationItemAnnouncement = Message<"CClientNotificationItemAnnouncement"> & {
  /**
   * @generated from field: optional uint32 new_item_count = 1;
   */
  newItemCount: number;

  /**
   * @generated from field: optional bool new_backpack_items = 2;
   */
  newBackpackItems: boolean;
};

/**
 * Describes the message CClientNotificationItemAnnouncement.
 * Use `create(CClientNotificationItemAnnouncementSchema)` to create a new message.
 */
export const CClientNotificationItemAnnouncementSchema: GenMessage<CClientNotificationItemAnnouncement> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 19);

/**
 * @generated from message CClientNotificationHardwareSurveyPending
 */
export type CClientNotificationHardwareSurveyPending = Message<"CClientNotificationHardwareSurveyPending"> & {
};

/**
 * Describes the message CClientNotificationHardwareSurveyPending.
 * Use `create(CClientNotificationHardwareSurveyPendingSchema)` to create a new message.
 */
export const CClientNotificationHardwareSurveyPendingSchema: GenMessage<CClientNotificationHardwareSurveyPending> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 20);

/**
 * @generated from message CClientNotificationLowDiskSpace
 */
export type CClientNotificationLowDiskSpace = Message<"CClientNotificationLowDiskSpace"> & {
  /**
   * @generated from field: optional uint32 folder_index = 1;
   */
  folderIndex: number;
};

/**
 * Describes the message CClientNotificationLowDiskSpace.
 * Use `create(CClientNotificationLowDiskSpaceSchema)` to create a new message.
 */
export const CClientNotificationLowDiskSpaceSchema: GenMessage<CClientNotificationLowDiskSpace> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 21);

/**
 * @generated from message CClientNotificationBatteryTemperature
 */
export type CClientNotificationBatteryTemperature = Message<"CClientNotificationBatteryTemperature"> & {
  /**
   * @generated from field: optional uint32 temperature = 1;
   */
  temperature: number;

  /**
   * @generated from field: optional string notification_type = 2;
   */
  notificationType: string;
};

/**
 * Describes the message CClientNotificationBatteryTemperature.
 * Use `create(CClientNotificationBatteryTemperatureSchema)` to create a new message.
 */
export const CClientNotificationBatteryTemperatureSchema: GenMessage<CClientNotificationBatteryTemperature> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 22);

/**
 * @generated from message CClientNotificationDockUnsupportedFirmware
 */
export type CClientNotificationDockUnsupportedFirmware = Message<"CClientNotificationDockUnsupportedFirmware"> & {
};

/**
 * Describes the message CClientNotificationDockUnsupportedFirmware.
 * Use `create(CClientNotificationDockUnsupportedFirmwareSchema)` to create a new message.
 */
export const CClientNotificationDockUnsupportedFirmwareSchema: GenMessage<CClientNotificationDockUnsupportedFirmware> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 23);

/**
 * @generated from message CClientNotificationPeerContentUpload
 */
export type CClientNotificationPeerContentUpload = Message<"CClientNotificationPeerContentUpload"> & {
  /**
   * @generated from field: optional uint32 appid = 1;
   */
  appid: number;

  /**
   * @generated from field: optional string peer_name = 2;
   */
  peerName: string;
};

/**
 * Describes the message CClientNotificationPeerContentUpload.
 * Use `create(CClientNotificationPeerContentUploadSchema)` to create a new message.
 */
export const CClientNotificationPeerContentUploadSchema: GenMessage<CClientNotificationPeerContentUpload> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 24);

/**
 * @generated from message CClientNotificationCannotReadControllerGuideButton
 */
export type CClientNotificationCannotReadControllerGuideButton = Message<"CClientNotificationCannotReadControllerGuideButton"> & {
  /**
   * @generated from field: optional int32 controller_index = 1;
   */
  controllerIndex: number;
};

/**
 * Describes the message CClientNotificationCannotReadControllerGuideButton.
 * Use `create(CClientNotificationCannotReadControllerGuideButtonSchema)` to create a new message.
 */
export const CClientNotificationCannotReadControllerGuideButtonSchema: GenMessage<CClientNotificationCannotReadControllerGuideButton> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 25);

/**
 * @generated from message CClientNotificationOverlaySplashScreen
 */
export type CClientNotificationOverlaySplashScreen = Message<"CClientNotificationOverlaySplashScreen"> & {
};

/**
 * Describes the message CClientNotificationOverlaySplashScreen.
 * Use `create(CClientNotificationOverlaySplashScreenSchema)` to create a new message.
 */
export const CClientNotificationOverlaySplashScreenSchema: GenMessage<CClientNotificationOverlaySplashScreen> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 26);

/**
 * @generated from message CClientNotificationBroadcastAvailableToWatch
 */
export type CClientNotificationBroadcastAvailableToWatch = Message<"CClientNotificationBroadcastAvailableToWatch"> & {
  /**
   * @generated from field: optional int32 broadcast_permission = 1;
   */
  broadcastPermission: number;
};

/**
 * Describes the message CClientNotificationBroadcastAvailableToWatch.
 * Use `create(CClientNotificationBroadcastAvailableToWatchSchema)` to create a new message.
 */
export const CClientNotificationBroadcastAvailableToWatchSchema: GenMessage<CClientNotificationBroadcastAvailableToWatch> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 27);

/**
 * @generated from message CClientNotificationTimedTrialRemaining
 */
export type CClientNotificationTimedTrialRemaining = Message<"CClientNotificationTimedTrialRemaining"> & {
  /**
   * @generated from field: optional uint32 appid = 1;
   */
  appid: number;

  /**
   * @generated from field: optional string icon = 2;
   */
  icon: string;

  /**
   * @generated from field: optional bool offline = 3;
   */
  offline: boolean;

  /**
   * @generated from field: optional uint32 allowed_seconds = 4;
   */
  allowedSeconds: number;

  /**
   * @generated from field: optional uint32 played_seconds = 5;
   */
  playedSeconds: number;
};

/**
 * Describes the message CClientNotificationTimedTrialRemaining.
 * Use `create(CClientNotificationTimedTrialRemainingSchema)` to create a new message.
 */
export const CClientNotificationTimedTrialRemainingSchema: GenMessage<CClientNotificationTimedTrialRemaining> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 28);

/**
 * @generated from message CClientNotificationLoginRefresh
 */
export type CClientNotificationLoginRefresh = Message<"CClientNotificationLoginRefresh"> & {
};

/**
 * Describes the message CClientNotificationLoginRefresh.
 * Use `create(CClientNotificationLoginRefreshSchema)` to create a new message.
 */
export const CClientNotificationLoginRefreshSchema: GenMessage<CClientNotificationLoginRefresh> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 29);

/**
 * @generated from message CClientNotificationTimerExpired
 */
export type CClientNotificationTimerExpired = Message<"CClientNotificationTimerExpired"> & {
};

/**
 * Describes the message CClientNotificationTimerExpired.
 * Use `create(CClientNotificationTimerExpiredSchema)` to create a new message.
 */
export const CClientNotificationTimerExpiredSchema: GenMessage<CClientNotificationTimerExpired> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 30);

/**
 * @generated from message CClientNotificationSteamInputActionSetChanged
 */
export type CClientNotificationSteamInputActionSetChanged = Message<"CClientNotificationSteamInputActionSetChanged"> & {
  /**
   * @generated from field: optional int32 controller_index = 1;
   */
  controllerIndex: number;

  /**
   * @generated from field: optional string action_set_name = 2;
   */
  actionSetName: string;
};

/**
 * Describes the message CClientNotificationSteamInputActionSetChanged.
 * Use `create(CClientNotificationSteamInputActionSetChangedSchema)` to create a new message.
 */
export const CClientNotificationSteamInputActionSetChangedSchema: GenMessage<CClientNotificationSteamInputActionSetChanged> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 31);

/**
 * @generated from message CClientNotificationRemoteClientConnection
 */
export type CClientNotificationRemoteClientConnection = Message<"CClientNotificationRemoteClientConnection"> & {
  /**
   * @generated from field: optional string machine = 1;
   */
  machine: string;

  /**
   * @generated from field: optional bool connected = 2;
   */
  connected: boolean;
};

/**
 * Describes the message CClientNotificationRemoteClientConnection.
 * Use `create(CClientNotificationRemoteClientConnectionSchema)` to create a new message.
 */
export const CClientNotificationRemoteClientConnectionSchema: GenMessage<CClientNotificationRemoteClientConnection> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 32);

/**
 * @generated from message CClientNotificationRemoteClientStartStream
 */
export type CClientNotificationRemoteClientStartStream = Message<"CClientNotificationRemoteClientStartStream"> & {
  /**
   * @generated from field: optional string machine = 1;
   */
  machine: string;

  /**
   * @generated from field: optional string game_name = 2;
   */
  gameName: string;
};

/**
 * Describes the message CClientNotificationRemoteClientStartStream.
 * Use `create(CClientNotificationRemoteClientStartStreamSchema)` to create a new message.
 */
export const CClientNotificationRemoteClientStartStreamSchema: GenMessage<CClientNotificationRemoteClientStartStream> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 33);

/**
 * @generated from message CClientNotificationStreamingClientConnection
 */
export type CClientNotificationStreamingClientConnection = Message<"CClientNotificationStreamingClientConnection"> & {
  /**
   * @generated from field: optional string hostname = 1;
   */
  hostname: string;

  /**
   * @generated from field: optional string machine = 2;
   */
  machine: string;

  /**
   * @generated from field: optional uint32 guest_id = 3;
   */
  guestId: number;

  /**
   * @generated from field: optional bool connected = 4;
   */
  connected: boolean;
};

/**
 * Describes the message CClientNotificationStreamingClientConnection.
 * Use `create(CClientNotificationStreamingClientConnectionSchema)` to create a new message.
 */
export const CClientNotificationStreamingClientConnectionSchema: GenMessage<CClientNotificationStreamingClientConnection> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 34);

/**
 * @generated from message CClientNotificationPlaytimeWarning
 */
export type CClientNotificationPlaytimeWarning = Message<"CClientNotificationPlaytimeWarning"> & {
  /**
   * @generated from field: optional string type = 1;
   */
  type: string;

  /**
   * @generated from field: optional uint32 playtime_remaining = 2;
   */
  playtimeRemaining: number;
};

/**
 * Describes the message CClientNotificationPlaytimeWarning.
 * Use `create(CClientNotificationPlaytimeWarningSchema)` to create a new message.
 */
export const CClientNotificationPlaytimeWarningSchema: GenMessage<CClientNotificationPlaytimeWarning> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 35);

/**
 * @generated from message CClientNotificationGameRecordingError
 */
export type CClientNotificationGameRecordingError = Message<"CClientNotificationGameRecordingError"> & {
  /**
   * @generated from field: optional fixed64 game_id = 1;
   */
  gameId: bigint;

  /**
   * @generated from field: optional EGameRecordingErrorType error_type = 2 [default = k_EGameRecordingErrorGeneral];
   */
  errorType: EGameRecordingErrorType;
};

/**
 * Describes the message CClientNotificationGameRecordingError.
 * Use `create(CClientNotificationGameRecordingErrorSchema)` to create a new message.
 */
export const CClientNotificationGameRecordingErrorSchema: GenMessage<CClientNotificationGameRecordingError> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 36);

/**
 * @generated from message CClientNotificationGameRecordingStart
 */
export type CClientNotificationGameRecordingStart = Message<"CClientNotificationGameRecordingStart"> & {
  /**
   * @generated from field: optional fixed64 game_id = 1;
   */
  gameId: bigint;
};

/**
 * Describes the message CClientNotificationGameRecordingStart.
 * Use `create(CClientNotificationGameRecordingStartSchema)` to create a new message.
 */
export const CClientNotificationGameRecordingStartSchema: GenMessage<CClientNotificationGameRecordingStart> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 37);

/**
 * @generated from message CClientNotificationGameRecordingStop
 */
export type CClientNotificationGameRecordingStop = Message<"CClientNotificationGameRecordingStop"> & {
  /**
   * @generated from field: optional fixed64 game_id = 1;
   */
  gameId: bigint;

  /**
   * @generated from field: optional string clip_id = 2;
   */
  clipId: string;

  /**
   * @generated from field: optional float duration_secs = 3;
   */
  durationSecs: number;
};

/**
 * Describes the message CClientNotificationGameRecordingStop.
 * Use `create(CClientNotificationGameRecordingStopSchema)` to create a new message.
 */
export const CClientNotificationGameRecordingStopSchema: GenMessage<CClientNotificationGameRecordingStop> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 38);

/**
 * @generated from message CClientNotificationGameRecordingUserMarkerAdded
 */
export type CClientNotificationGameRecordingUserMarkerAdded = Message<"CClientNotificationGameRecordingUserMarkerAdded"> & {
  /**
   * @generated from field: optional fixed64 game_id = 1;
   */
  gameId: bigint;
};

/**
 * Describes the message CClientNotificationGameRecordingUserMarkerAdded.
 * Use `create(CClientNotificationGameRecordingUserMarkerAddedSchema)` to create a new message.
 */
export const CClientNotificationGameRecordingUserMarkerAddedSchema: GenMessage<CClientNotificationGameRecordingUserMarkerAdded> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 39);

/**
 * @generated from message CClientNotificationGameRecordingInstantClip
 */
export type CClientNotificationGameRecordingInstantClip = Message<"CClientNotificationGameRecordingInstantClip"> & {
  /**
   * @generated from field: optional fixed64 game_id = 1;
   */
  gameId: bigint;

  /**
   * @generated from field: optional string clip_id = 2;
   */
  clipId: string;

  /**
   * @generated from field: optional float duration_secs = 3;
   */
  durationSecs: number;
};

/**
 * Describes the message CClientNotificationGameRecordingInstantClip.
 * Use `create(CClientNotificationGameRecordingInstantClipSchema)` to create a new message.
 */
export const CClientNotificationGameRecordingInstantClipSchema: GenMessage<CClientNotificationGameRecordingInstantClip> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 40);

/**
 * @generated from message CClientNotificationHardwareUpdateAvailable
 */
export type CClientNotificationHardwareUpdateAvailable = Message<"CClientNotificationHardwareUpdateAvailable"> & {
  /**
   * @generated from field: repeated uint32 etype = 1;
   */
  etype: number[];
};

/**
 * Describes the message CClientNotificationHardwareUpdateAvailable.
 * Use `create(CClientNotificationHardwareUpdateAvailableSchema)` to create a new message.
 */
export const CClientNotificationHardwareUpdateAvailableSchema: GenMessage<CClientNotificationHardwareUpdateAvailable> = /*@__PURE__*/
  messageDesc(file_steammessages_clientnotificationtypes, 41);

/**
 * @generated from enum EClientNotificationType
 */
export enum EClientNotificationType {
  /**
   * @generated from enum value: k_EClientNotificationType_Invalid = 0;
   */
  k_EClientNotificationType_Invalid = 0,

  /**
   * @generated from enum value: k_EClientNotificationType_DownloadCompleted = 1;
   */
  k_EClientNotificationType_DownloadCompleted = 1,

  /**
   * @generated from enum value: k_EClientNotificationType_FriendInvite = 2;
   */
  k_EClientNotificationType_FriendInvite = 2,

  /**
   * @generated from enum value: k_EClientNotificationType_FriendInGame = 3;
   */
  k_EClientNotificationType_FriendInGame = 3,

  /**
   * @generated from enum value: k_EClientNotificationType_FriendOnline = 4;
   */
  k_EClientNotificationType_FriendOnline = 4,

  /**
   * @generated from enum value: k_EClientNotificationType_Achievement = 5;
   */
  k_EClientNotificationType_Achievement = 5,

  /**
   * @generated from enum value: k_EClientNotificationType_LowBattery = 6;
   */
  k_EClientNotificationType_LowBattery = 6,

  /**
   * @generated from enum value: k_EClientNotificationType_SystemUpdate = 7;
   */
  k_EClientNotificationType_SystemUpdate = 7,

  /**
   * @generated from enum value: k_EClientNotificationType_FriendMessage = 8;
   */
  k_EClientNotificationType_FriendMessage = 8,

  /**
   * @generated from enum value: k_EClientNotificationType_GroupChatMessage = 9;
   */
  k_EClientNotificationType_GroupChatMessage = 9,

  /**
   * @generated from enum value: k_EClientNotificationType_FriendInviteRollup = 10;
   */
  k_EClientNotificationType_FriendInviteRollup = 10,

  /**
   * @generated from enum value: k_EClientNotificationType_FamilySharingStopPlaying = 12;
   */
  k_EClientNotificationType_FamilySharingStopPlaying = 12,

  /**
   * @generated from enum value: k_EClientNotificationType_Screenshot = 14;
   */
  k_EClientNotificationType_Screenshot = 14,

  /**
   * @generated from enum value: k_EClientNotificationType_CloudSyncFailure = 15;
   */
  k_EClientNotificationType_CloudSyncFailure = 15,

  /**
   * @generated from enum value: k_EClientNotificationType_CloudSyncConflict = 16;
   */
  k_EClientNotificationType_CloudSyncConflict = 16,

  /**
   * @generated from enum value: k_EClientNotificationType_IncomingVoiceChat = 17;
   */
  k_EClientNotificationType_IncomingVoiceChat = 17,

  /**
   * @generated from enum value: k_EClientNotificationType_ClaimSteamDeckRewards = 18;
   */
  k_EClientNotificationType_ClaimSteamDeckRewards = 18,

  /**
   * @generated from enum value: k_EClientNotificationType_GiftReceived = 19;
   */
  k_EClientNotificationType_GiftReceived = 19,

  /**
   * @generated from enum value: k_EClientNotificationType_ItemAnnouncement = 20;
   */
  k_EClientNotificationType_ItemAnnouncement = 20,

  /**
   * @generated from enum value: k_EClientNotificationType_HardwareSurvey = 21;
   */
  k_EClientNotificationType_HardwareSurvey = 21,

  /**
   * @generated from enum value: k_EClientNotificationType_LowDiskSpace = 22;
   */
  k_EClientNotificationType_LowDiskSpace = 22,

  /**
   * @generated from enum value: k_EClientNotificationType_BatteryTemperature = 23;
   */
  k_EClientNotificationType_BatteryTemperature = 23,

  /**
   * @generated from enum value: k_EClientNotificationType_DockUnsupportedFirmware = 24;
   */
  k_EClientNotificationType_DockUnsupportedFirmware = 24,

  /**
   * @generated from enum value: k_EClientNotificationType_PeerContentUpload = 25;
   */
  k_EClientNotificationType_PeerContentUpload = 25,

  /**
   * @generated from enum value: k_EClientNotificationType_CannotReadControllerGuideButton = 26;
   */
  k_EClientNotificationType_CannotReadControllerGuideButton = 26,

  /**
   * @generated from enum value: k_EClientNotificationType_Comment = 27;
   */
  k_EClientNotificationType_Comment = 27,

  /**
   * @generated from enum value: k_EClientNotificationType_Wishlist = 28;
   */
  k_EClientNotificationType_Wishlist = 28,

  /**
   * @generated from enum value: k_EClientNotificationType_TradeOffer = 29;
   */
  k_EClientNotificationType_TradeOffer = 29,

  /**
   * @generated from enum value: k_EClientNotificationType_AsyncGame = 30;
   */
  k_EClientNotificationType_AsyncGame = 30,

  /**
   * @generated from enum value: k_EClientNotificationType_General = 31;
   */
  k_EClientNotificationType_General = 31,

  /**
   * @generated from enum value: k_EClientNotificationType_HelpRequest = 32;
   */
  k_EClientNotificationType_HelpRequest = 32,

  /**
   * @generated from enum value: k_EClientNotificationType_OverlaySplashScreen = 33;
   */
  k_EClientNotificationType_OverlaySplashScreen = 33,

  /**
   * @generated from enum value: k_EClientNotificationType_BroadcastAvailableToWatch = 34;
   */
  k_EClientNotificationType_BroadcastAvailableToWatch = 34,

  /**
   * @generated from enum value: k_EClientNotificationType_TimedTrialRemaining = 35;
   */
  k_EClientNotificationType_TimedTrialRemaining = 35,

  /**
   * @generated from enum value: k_EClientNotificationType_LoginRefresh = 36;
   */
  k_EClientNotificationType_LoginRefresh = 36,

  /**
   * @generated from enum value: k_EClientNotificationType_MajorSale = 37;
   */
  k_EClientNotificationType_MajorSale = 37,

  /**
   * @generated from enum value: k_EClientNotificationType_TimerExpired = 38;
   */
  k_EClientNotificationType_TimerExpired = 38,

  /**
   * @generated from enum value: k_EClientNotificationType_ModeratorMsg = 39;
   */
  k_EClientNotificationType_ModeratorMsg = 39,

  /**
   * @generated from enum value: k_EClientNotificationType_SteamInputActionSetChanged = 40;
   */
  k_EClientNotificationType_SteamInputActionSetChanged = 40,

  /**
   * @generated from enum value: k_EClientNotificationType_RemoteClientConnection = 41;
   */
  k_EClientNotificationType_RemoteClientConnection = 41,

  /**
   * @generated from enum value: k_EClientNotificationType_RemoteClientStartStream = 42;
   */
  k_EClientNotificationType_RemoteClientStartStream = 42,

  /**
   * @generated from enum value: k_EClientNotificationType_StreamingClientConnection = 43;
   */
  k_EClientNotificationType_StreamingClientConnection = 43,

  /**
   * @generated from enum value: k_EClientNotificationType_FamilyInvite = 44;
   */
  k_EClientNotificationType_FamilyInvite = 44,

  /**
   * @generated from enum value: k_EClientNotificationType_PlaytimeWarning = 45;
   */
  k_EClientNotificationType_PlaytimeWarning = 45,

  /**
   * @generated from enum value: k_EClientNotificationType_FamilyPurchaseRequest = 46;
   */
  k_EClientNotificationType_FamilyPurchaseRequest = 46,

  /**
   * @generated from enum value: k_EClientNotificationType_FamilyPurchaseRequestResponse = 47;
   */
  k_EClientNotificationType_FamilyPurchaseRequestResponse = 47,

  /**
   * @generated from enum value: k_EClientNotificationType_ParentalFeatureRequest = 48;
   */
  k_EClientNotificationType_ParentalFeatureRequest = 48,

  /**
   * @generated from enum value: k_EClientNotificationType_ParentalPlaytimeRequest = 49;
   */
  k_EClientNotificationType_ParentalPlaytimeRequest = 49,

  /**
   * @generated from enum value: k_EClientNotificationType_GameRecordingError = 50;
   */
  k_EClientNotificationType_GameRecordingError = 50,

  /**
   * @generated from enum value: k_EClientNotificationType_ParentalFeatureResponse = 51;
   */
  k_EClientNotificationType_ParentalFeatureResponse = 51,

  /**
   * @generated from enum value: k_EClientNotificationType_ParentalPlaytimeResponse = 52;
   */
  k_EClientNotificationType_ParentalPlaytimeResponse = 52,

  /**
   * @generated from enum value: k_EClientNotificationType_RequestedGameAdded = 53;
   */
  k_EClientNotificationType_RequestedGameAdded = 53,

  /**
   * @generated from enum value: k_EClientNotificationType_ClipDownloaded = 54;
   */
  k_EClientNotificationType_ClipDownloaded = 54,

  /**
   * @generated from enum value: k_EClientNotificationType_GameRecordingStart = 55;
   */
  k_EClientNotificationType_GameRecordingStart = 55,

  /**
   * @generated from enum value: k_EClientNotificationType_GameRecordingStop = 56;
   */
  k_EClientNotificationType_GameRecordingStop = 56,

  /**
   * @generated from enum value: k_EClientNotificationType_GameRecordingUserMarkerAdded = 57;
   */
  k_EClientNotificationType_GameRecordingUserMarkerAdded = 57,

  /**
   * @generated from enum value: k_EClientNotificationType_GameRecordingInstantClip = 58;
   */
  k_EClientNotificationType_GameRecordingInstantClip = 58,

  /**
   * @generated from enum value: k_EClientNotificationType_PlaytestInvite = 59;
   */
  k_EClientNotificationType_PlaytestInvite = 59,

  /**
   * @generated from enum value: k_EClientNotificationType_TradeReversal = 60;
   */
  k_EClientNotificationType_TradeReversal = 60,

  /**
   * @generated from enum value: k_EClientNotificationType_HardwareUpdateAvailable = 61;
   */
  k_EClientNotificationType_HardwareUpdateAvailable = 61,
}

/**
 * Describes the enum EClientNotificationType.
 */
export const EClientNotificationTypeSchema: GenEnum<EClientNotificationType> = /*@__PURE__*/
  enumDesc(file_steammessages_clientnotificationtypes, 0);

/**
 * @generated from enum ESystemUpdateNotificationType
 */
export enum ESystemUpdateNotificationType {
  /**
   * @generated from enum value: k_ESystemUpdateNotificationType_Invalid = 0;
   */
  k_ESystemUpdateNotificationType_Invalid = 0,

  /**
   * @generated from enum value: k_ESystemUpdateNotificationType_Available = 1;
   */
  k_ESystemUpdateNotificationType_Available = 1,

  /**
   * @generated from enum value: k_ESystemUpdateNotificationType_NeedsRestart = 2;
   */
  k_ESystemUpdateNotificationType_NeedsRestart = 2,
}

/**
 * Describes the enum ESystemUpdateNotificationType.
 */
export const ESystemUpdateNotificationTypeSchema: GenEnum<ESystemUpdateNotificationType> = /*@__PURE__*/
  enumDesc(file_steammessages_clientnotificationtypes, 1);

/**
 * @generated from enum EGameRecordingErrorType
 */
export enum EGameRecordingErrorType {
  /**
   * @generated from enum value: k_EGameRecordingErrorGeneral = 1;
   */
  k_EGameRecordingErrorGeneral = 1,

  /**
   * @generated from enum value: k_EGameRecordingErrorLowDiskSpace = 2;
   */
  k_EGameRecordingErrorLowDiskSpace = 2,
}

/**
 * Describes the enum EGameRecordingErrorType.
 */
export const EGameRecordingErrorTypeSchema: GenEnum<EGameRecordingErrorType> = /*@__PURE__*/
  enumDesc(file_steammessages_clientnotificationtypes, 2);

